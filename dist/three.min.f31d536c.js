// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"js/three.min.js":[function(require,module,exports) {
var define;
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeFunction(fn) { try { return Function.toString.call(fn).indexOf("[native code]") !== -1; } catch (e) { return typeof fn === "function"; } }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e319) { throw _e319; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e320) { didErr = true; err = _e320; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
console.warn('Scripts "build/three.js" and "build/three.min.js" are deprecated with r150+, and will be removed with r160. Please use ES Modules or alternatives: https://threejs.org/docs/index.html#manual/en/introduction/Installation'),
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).THREE = {});
}(this, function (t) {
  "use strict";

  var _Me;
  var e = "157",
    n = 1,
    i = 2,
    r = 3,
    s = 0,
    a = 1,
    o = 100,
    l = 0,
    c = 1,
    h = 2,
    u = 0,
    d = 1,
    p = 2,
    m = 3,
    f = 4,
    g = 5,
    _ = 300,
    v = 301,
    y = 302,
    x = 303,
    M = 304,
    S = 306,
    b = 1e3,
    T = 1001,
    E = 1002,
    w = 1003,
    A = 1004,
    R = 1005,
    C = 1006,
    L = 1007,
    P = 1008,
    I = 1009,
    U = 1012,
    D = 1013,
    N = 1014,
    O = 1015,
    F = 1016,
    B = 1017,
    z = 1018,
    H = 1020,
    G = 1023,
    V = 1026,
    k = 1027,
    W = 1029,
    X = 1031,
    j = 1033,
    q = 33776,
    Y = 33777,
    Z = 33778,
    J = 33779,
    K = 35840,
    $ = 35841,
    Q = 35842,
    tt = 35843,
    et = 37492,
    nt = 37496,
    it = 37808,
    rt = 37809,
    st = 37810,
    at = 37811,
    ot = 37812,
    lt = 37813,
    ct = 37814,
    ht = 37815,
    ut = 37816,
    dt = 37817,
    pt = 37818,
    mt = 37819,
    ft = 37820,
    gt = 37821,
    _t = 36492,
    vt = 36494,
    yt = 36495,
    xt = 36284,
    Mt = 36285,
    St = 36286,
    bt = 2300,
    Tt = 2301,
    Et = 2302,
    wt = 2400,
    At = 2401,
    Rt = 2402,
    Ct = 2500,
    Lt = 2501,
    Pt = 3e3,
    It = 3001,
    Ut = "",
    Dt = "srgb",
    Nt = "srgb-linear",
    Ot = "display-p3",
    Ft = "display-p3-linear",
    Bt = "linear",
    zt = "srgb",
    Ht = "rec709",
    Gt = "p3",
    Vt = 7680,
    kt = 35044,
    Wt = "300 es",
    Xt = 1035,
    jt = 2e3,
    qt = 2001;
  var Yt = /*#__PURE__*/function () {
    function Yt() {
      _classCallCheck(this, Yt);
    }
    _createClass(Yt, [{
      key: "addEventListener",
      value: function addEventListener(t, e) {
        void 0 === this._listeners && (this._listeners = {});
        var n = this._listeners;
        void 0 === n[t] && (n[t] = []), -1 === n[t].indexOf(e) && n[t].push(e);
      }
    }, {
      key: "hasEventListener",
      value: function hasEventListener(t, e) {
        if (void 0 === this._listeners) return !1;
        var n = this._listeners;
        return void 0 !== n[t] && -1 !== n[t].indexOf(e);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(t, e) {
        if (void 0 === this._listeners) return;
        var n = this._listeners[t];
        if (void 0 !== n) {
          var _t2 = n.indexOf(e);
          -1 !== _t2 && n.splice(_t2, 1);
        }
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(t) {
        if (void 0 === this._listeners) return;
        var e = this._listeners[t.type];
        if (void 0 !== e) {
          t.target = this;
          var _n2 = e.slice(0);
          for (var _e2 = 0, _i2 = _n2.length; _e2 < _i2; _e2++) _n2[_e2].call(this, t);
          t.target = null;
        }
      }
    }]);
    return Yt;
  }();
  var Zt = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  var Jt = 1234567;
  var Kt = Math.PI / 180,
    $t = 180 / Math.PI;
  function Qt() {
    var t = 4294967295 * Math.random() | 0,
      e = 4294967295 * Math.random() | 0,
      n = 4294967295 * Math.random() | 0,
      i = 4294967295 * Math.random() | 0;
    return (Zt[255 & t] + Zt[t >> 8 & 255] + Zt[t >> 16 & 255] + Zt[t >> 24 & 255] + "-" + Zt[255 & e] + Zt[e >> 8 & 255] + "-" + Zt[e >> 16 & 15 | 64] + Zt[e >> 24 & 255] + "-" + Zt[63 & n | 128] + Zt[n >> 8 & 255] + "-" + Zt[n >> 16 & 255] + Zt[n >> 24 & 255] + Zt[255 & i] + Zt[i >> 8 & 255] + Zt[i >> 16 & 255] + Zt[i >> 24 & 255]).toLowerCase();
  }
  function te(t, e, n) {
    return Math.max(e, Math.min(n, t));
  }
  function ee(t, e) {
    return (t % e + e) % e;
  }
  function ne(t, e, n) {
    return (1 - n) * t + n * e;
  }
  function ie(t) {
    return 0 == (t & t - 1) && 0 !== t;
  }
  function re(t) {
    return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2));
  }
  function se(t) {
    return Math.pow(2, Math.floor(Math.log(t) / Math.LN2));
  }
  function ae(t, e) {
    switch (e.constructor) {
      case Float32Array:
        return t;
      case Uint32Array:
        return t / 4294967295;
      case Uint16Array:
        return t / 65535;
      case Uint8Array:
        return t / 255;
      case Int32Array:
        return Math.max(t / 2147483647, -1);
      case Int16Array:
        return Math.max(t / 32767, -1);
      case Int8Array:
        return Math.max(t / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function oe(t, e) {
    switch (e.constructor) {
      case Float32Array:
        return t;
      case Uint32Array:
        return Math.round(4294967295 * t);
      case Uint16Array:
        return Math.round(65535 * t);
      case Uint8Array:
        return Math.round(255 * t);
      case Int32Array:
        return Math.round(2147483647 * t);
      case Int16Array:
        return Math.round(32767 * t);
      case Int8Array:
        return Math.round(127 * t);
      default:
        throw new Error("Invalid component type.");
    }
  }
  var le = {
    DEG2RAD: Kt,
    RAD2DEG: $t,
    generateUUID: Qt,
    clamp: te,
    euclideanModulo: ee,
    mapLinear: function mapLinear(t, e, n, i, r) {
      return i + (t - e) * (r - i) / (n - e);
    },
    inverseLerp: function inverseLerp(t, e, n) {
      return t !== e ? (n - t) / (e - t) : 0;
    },
    lerp: ne,
    damp: function damp(t, e, n, i) {
      return ne(t, e, 1 - Math.exp(-n * i));
    },
    pingpong: function pingpong(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return e - Math.abs(ee(t, 2 * e) - e);
    },
    smoothstep: function smoothstep(t, e, n) {
      return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * (3 - 2 * t);
    },
    smootherstep: function smootherstep(t, e, n) {
      return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * t * (t * (6 * t - 15) + 10);
    },
    randInt: function randInt(t, e) {
      return t + Math.floor(Math.random() * (e - t + 1));
    },
    randFloat: function randFloat(t, e) {
      return t + Math.random() * (e - t);
    },
    randFloatSpread: function randFloatSpread(t) {
      return t * (.5 - Math.random());
    },
    seededRandom: function seededRandom(t) {
      void 0 !== t && (Jt = t);
      var e = Jt += 1831565813;
      return e = Math.imul(e ^ e >>> 15, 1 | e), e ^= e + Math.imul(e ^ e >>> 7, 61 | e), ((e ^ e >>> 14) >>> 0) / 4294967296;
    },
    degToRad: function degToRad(t) {
      return t * Kt;
    },
    radToDeg: function radToDeg(t) {
      return t * $t;
    },
    isPowerOfTwo: ie,
    ceilPowerOfTwo: re,
    floorPowerOfTwo: se,
    setQuaternionFromProperEuler: function setQuaternionFromProperEuler(t, e, n, i, r) {
      var s = Math.cos,
        a = Math.sin,
        o = s(n / 2),
        l = a(n / 2),
        c = s((e + i) / 2),
        h = a((e + i) / 2),
        u = s((e - i) / 2),
        d = a((e - i) / 2),
        p = s((i - e) / 2),
        m = a((i - e) / 2);
      switch (r) {
        case "XYX":
          t.set(o * h, l * u, l * d, o * c);
          break;
        case "YZY":
          t.set(l * d, o * h, l * u, o * c);
          break;
        case "ZXZ":
          t.set(l * u, l * d, o * h, o * c);
          break;
        case "XZX":
          t.set(o * h, l * m, l * p, o * c);
          break;
        case "YXY":
          t.set(l * p, o * h, l * m, o * c);
          break;
        case "ZYZ":
          t.set(l * m, l * p, o * h, o * c);
          break;
        default:
          console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + r);
      }
    },
    normalize: oe,
    denormalize: ae
  };
  var ce = /*#__PURE__*/function (_Symbol$iterator) {
    function ce() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _classCallCheck(this, ce);
      ce.prototype.isVector2 = !0, this.x = t, this.y = e;
    }
    _createClass(ce, [{
      key: "width",
      get: function get() {
        return this.x;
      },
      set: function set(t) {
        this.x = t;
      }
    }, {
      key: "height",
      get: function get() {
        return this.y;
      },
      set: function set(t) {
        this.y = t;
      }
    }, {
      key: "set",
      value: function set(t, e) {
        return this.x = t, this.y = e, this;
      }
    }, {
      key: "setScalar",
      value: function setScalar(t) {
        return this.x = t, this.y = t, this;
      }
    }, {
      key: "setX",
      value: function setX(t) {
        return this.x = t, this;
      }
    }, {
      key: "setY",
      value: function setY(t) {
        return this.y = t, this;
      }
    }, {
      key: "setComponent",
      value: function setComponent(t, e) {
        switch (t) {
          case 0:
            this.x = e;
            break;
          case 1:
            this.y = e;
            break;
          default:
            throw new Error("index is out of range: " + t);
        }
        return this;
      }
    }, {
      key: "getComponent",
      value: function getComponent(t) {
        switch (t) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          default:
            throw new Error("index is out of range: " + t);
        }
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor(this.x, this.y);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.x = t.x, this.y = t.y, this;
      }
    }, {
      key: "add",
      value: function add(t) {
        return this.x += t.x, this.y += t.y, this;
      }
    }, {
      key: "addScalar",
      value: function addScalar(t) {
        return this.x += t, this.y += t, this;
      }
    }, {
      key: "addVectors",
      value: function addVectors(t, e) {
        return this.x = t.x + e.x, this.y = t.y + e.y, this;
      }
    }, {
      key: "addScaledVector",
      value: function addScaledVector(t, e) {
        return this.x += t.x * e, this.y += t.y * e, this;
      }
    }, {
      key: "sub",
      value: function sub(t) {
        return this.x -= t.x, this.y -= t.y, this;
      }
    }, {
      key: "subScalar",
      value: function subScalar(t) {
        return this.x -= t, this.y -= t, this;
      }
    }, {
      key: "subVectors",
      value: function subVectors(t, e) {
        return this.x = t.x - e.x, this.y = t.y - e.y, this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        return this.x *= t.x, this.y *= t.y, this;
      }
    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(t) {
        return this.x *= t, this.y *= t, this;
      }
    }, {
      key: "divide",
      value: function divide(t) {
        return this.x /= t.x, this.y /= t.y, this;
      }
    }, {
      key: "divideScalar",
      value: function divideScalar(t) {
        return this.multiplyScalar(1 / t);
      }
    }, {
      key: "applyMatrix3",
      value: function applyMatrix3(t) {
        var e = this.x,
          n = this.y,
          i = t.elements;
        return this.x = i[0] * e + i[3] * n + i[6], this.y = i[1] * e + i[4] * n + i[7], this;
      }
    }, {
      key: "min",
      value: function min(t) {
        return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this;
      }
    }, {
      key: "max",
      value: function max(t) {
        return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this;
      }
    }, {
      key: "clamp",
      value: function clamp(t, e) {
        return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this;
      }
    }, {
      key: "clampScalar",
      value: function clampScalar(t, e) {
        return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this;
      }
    }, {
      key: "clampLength",
      value: function clampLength(t, e) {
        var n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
      }
    }, {
      key: "floor",
      value: function floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
      }
    }, {
      key: "ceil",
      value: function ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
      }
    }, {
      key: "round",
      value: function round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
      }
    }, {
      key: "roundToZero",
      value: function roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this.x = -this.x, this.y = -this.y, this;
      }
    }, {
      key: "dot",
      value: function dot(t) {
        return this.x * t.x + this.y * t.y;
      }
    }, {
      key: "cross",
      value: function cross(t) {
        return this.x * t.y - this.y * t.x;
      }
    }, {
      key: "lengthSq",
      value: function lengthSq() {
        return this.x * this.x + this.y * this.y;
      }
    }, {
      key: "length",
      value: function length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
      }
    }, {
      key: "manhattanLength",
      value: function manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return this.divideScalar(this.length() || 1);
      }
    }, {
      key: "angle",
      value: function angle() {
        return Math.atan2(-this.y, -this.x) + Math.PI;
      }
    }, {
      key: "angleTo",
      value: function angleTo(t) {
        var e = Math.sqrt(this.lengthSq() * t.lengthSq());
        if (0 === e) return Math.PI / 2;
        var n = this.dot(t) / e;
        return Math.acos(te(n, -1, 1));
      }
    }, {
      key: "distanceTo",
      value: function distanceTo(t) {
        return Math.sqrt(this.distanceToSquared(t));
      }
    }, {
      key: "distanceToSquared",
      value: function distanceToSquared(t) {
        var e = this.x - t.x,
          n = this.y - t.y;
        return e * e + n * n;
      }
    }, {
      key: "manhattanDistanceTo",
      value: function manhattanDistanceTo(t) {
        return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);
      }
    }, {
      key: "setLength",
      value: function setLength(t) {
        return this.normalize().multiplyScalar(t);
      }
    }, {
      key: "lerp",
      value: function lerp(t, e) {
        return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this;
      }
    }, {
      key: "lerpVectors",
      value: function lerpVectors(t, e, n) {
        return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.x === this.x && t.y === this.y;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.x = t[e], this.y = t[e + 1], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this.x, t[e + 1] = this.y, t;
      }
    }, {
      key: "fromBufferAttribute",
      value: function fromBufferAttribute(t, e) {
        return this.x = t.getX(e), this.y = t.getY(e), this;
      }
    }, {
      key: "rotateAround",
      value: function rotateAround(t, e) {
        var n = Math.cos(e),
          i = Math.sin(e),
          r = this.x - t.x,
          s = this.y - t.y;
        return this.x = r * n - s * i + t.x, this.y = r * i + s * n + t.y, this;
      }
    }, {
      key: "random",
      value: function random() {
        return this.x = Math.random(), this.y = Math.random(), this;
      }
    }, {
      key: _Symbol$iterator,
      value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
        return _regeneratorRuntime().wrap(function value$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.x;
            case 2:
              _context.next = 4;
              return this.y;
            case 4:
            case "end":
              return _context.stop();
          }
        }, value, this);
      })
    }]);
    return ce;
  }(Symbol.iterator);
  var he = /*#__PURE__*/function () {
    function he(t, e, n, i, r, s, a, o, l) {
      _classCallCheck(this, he);
      he.prototype.isMatrix3 = !0, this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], void 0 !== t && this.set(t, e, n, i, r, s, a, o, l);
    }
    _createClass(he, [{
      key: "set",
      value: function set(t, e, n, i, r, s, a, o, l) {
        var c = this.elements;
        return c[0] = t, c[1] = i, c[2] = a, c[3] = e, c[4] = r, c[5] = o, c[6] = n, c[7] = s, c[8] = l, this;
      }
    }, {
      key: "identity",
      value: function identity() {
        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        var e = this.elements,
          n = t.elements;
        return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], this;
      }
    }, {
      key: "extractBasis",
      value: function extractBasis(t, e, n) {
        return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
      }
    }, {
      key: "setFromMatrix4",
      value: function setFromMatrix4(t) {
        var e = t.elements;
        return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        return this.multiplyMatrices(this, t);
      }
    }, {
      key: "premultiply",
      value: function premultiply(t) {
        return this.multiplyMatrices(t, this);
      }
    }, {
      key: "multiplyMatrices",
      value: function multiplyMatrices(t, e) {
        var n = t.elements,
          i = e.elements,
          r = this.elements,
          s = n[0],
          a = n[3],
          o = n[6],
          l = n[1],
          c = n[4],
          h = n[7],
          u = n[2],
          d = n[5],
          p = n[8],
          m = i[0],
          f = i[3],
          g = i[6],
          _ = i[1],
          v = i[4],
          y = i[7],
          x = i[2],
          M = i[5],
          S = i[8];
        return r[0] = s * m + a * _ + o * x, r[3] = s * f + a * v + o * M, r[6] = s * g + a * y + o * S, r[1] = l * m + c * _ + h * x, r[4] = l * f + c * v + h * M, r[7] = l * g + c * y + h * S, r[2] = u * m + d * _ + p * x, r[5] = u * f + d * v + p * M, r[8] = u * g + d * y + p * S, this;
      }
    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(t) {
        var e = this.elements;
        return e[0] *= t, e[3] *= t, e[6] *= t, e[1] *= t, e[4] *= t, e[7] *= t, e[2] *= t, e[5] *= t, e[8] *= t, this;
      }
    }, {
      key: "determinant",
      value: function determinant() {
        var t = this.elements,
          e = t[0],
          n = t[1],
          i = t[2],
          r = t[3],
          s = t[4],
          a = t[5],
          o = t[6],
          l = t[7],
          c = t[8];
        return e * s * c - e * a * l - n * r * c + n * a * o + i * r * l - i * s * o;
      }
    }, {
      key: "invert",
      value: function invert() {
        var t = this.elements,
          e = t[0],
          n = t[1],
          i = t[2],
          r = t[3],
          s = t[4],
          a = t[5],
          o = t[6],
          l = t[7],
          c = t[8],
          h = c * s - a * l,
          u = a * o - c * r,
          d = l * r - s * o,
          p = e * h + n * u + i * d;
        if (0 === p) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        var m = 1 / p;
        return t[0] = h * m, t[1] = (i * l - c * n) * m, t[2] = (a * n - i * s) * m, t[3] = u * m, t[4] = (c * e - i * o) * m, t[5] = (i * r - a * e) * m, t[6] = d * m, t[7] = (n * o - l * e) * m, t[8] = (s * e - n * r) * m, this;
      }
    }, {
      key: "transpose",
      value: function transpose() {
        var t;
        var e = this.elements;
        return t = e[1], e[1] = e[3], e[3] = t, t = e[2], e[2] = e[6], e[6] = t, t = e[5], e[5] = e[7], e[7] = t, this;
      }
    }, {
      key: "getNormalMatrix",
      value: function getNormalMatrix(t) {
        return this.setFromMatrix4(t).invert().transpose();
      }
    }, {
      key: "transposeIntoArray",
      value: function transposeIntoArray(t) {
        var e = this.elements;
        return t[0] = e[0], t[1] = e[3], t[2] = e[6], t[3] = e[1], t[4] = e[4], t[5] = e[7], t[6] = e[2], t[7] = e[5], t[8] = e[8], this;
      }
    }, {
      key: "setUvTransform",
      value: function setUvTransform(t, e, n, i, r, s, a) {
        var o = Math.cos(r),
          l = Math.sin(r);
        return this.set(n * o, n * l, -n * (o * s + l * a) + s + t, -i * l, i * o, -i * (-l * s + o * a) + a + e, 0, 0, 1), this;
      }
    }, {
      key: "scale",
      value: function scale(t, e) {
        return this.premultiply(ue.makeScale(t, e)), this;
      }
    }, {
      key: "rotate",
      value: function rotate(t) {
        return this.premultiply(ue.makeRotation(-t)), this;
      }
    }, {
      key: "translate",
      value: function translate(t, e) {
        return this.premultiply(ue.makeTranslation(t, e)), this;
      }
    }, {
      key: "makeTranslation",
      value: function makeTranslation(t, e) {
        return t.isVector2 ? this.set(1, 0, t.x, 0, 1, t.y, 0, 0, 1) : this.set(1, 0, t, 0, 1, e, 0, 0, 1), this;
      }
    }, {
      key: "makeRotation",
      value: function makeRotation(t) {
        var e = Math.cos(t),
          n = Math.sin(t);
        return this.set(e, -n, 0, n, e, 0, 0, 0, 1), this;
      }
    }, {
      key: "makeScale",
      value: function makeScale(t, e) {
        return this.set(t, 0, 0, 0, e, 0, 0, 0, 1), this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        var e = this.elements,
          n = t.elements;
        for (var _t3 = 0; _t3 < 9; _t3++) if (e[_t3] !== n[_t3]) return !1;
        return !0;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        for (var _n3 = 0; _n3 < 9; _n3++) this.elements[_n3] = t[_n3 + e];
        return this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = this.elements;
        return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().fromArray(this.elements);
      }
    }]);
    return he;
  }();
  var ue = new he();
  function de(t) {
    for (var _e3 = t.length - 1; _e3 >= 0; --_e3) if (t[_e3] >= 65535) return !0;
    return !1;
  }
  var pe = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray: Uint8ClampedArray,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array
  };
  function me(t, e) {
    return new pe[t](e);
  }
  function fe(t) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", t);
  }
  function ge() {
    var t = fe("canvas");
    return t.style.display = "block", t;
  }
  var _e = {};
  function ve(t) {
    t in _e || (_e[t] = !0, console.warn(t));
  }
  var ye = new he().set(.8224621, .177538, 0, .0331941, .9668058, 0, .0170827, .0723974, .9105199),
    xe = new he().set(1.2249401, -.2249404, 0, -.0420569, 1.0420571, 0, -.0196376, -.0786361, 1.0982735),
    Me = (_Me = {}, _defineProperty(_Me, Nt, {
      transfer: Bt,
      primaries: Ht,
      toReference: function toReference(t) {
        return t;
      },
      fromReference: function fromReference(t) {
        return t;
      }
    }), _defineProperty(_Me, Dt, {
      transfer: zt,
      primaries: Ht,
      toReference: function toReference(t) {
        return t.convertSRGBToLinear();
      },
      fromReference: function fromReference(t) {
        return t.convertLinearToSRGB();
      }
    }), _defineProperty(_Me, Ft, {
      transfer: Bt,
      primaries: Gt,
      toReference: function toReference(t) {
        return t.applyMatrix3(xe);
      },
      fromReference: function fromReference(t) {
        return t.applyMatrix3(ye);
      }
    }), _defineProperty(_Me, Ot, {
      transfer: zt,
      primaries: Gt,
      toReference: function toReference(t) {
        return t.convertSRGBToLinear().applyMatrix3(xe);
      },
      fromReference: function fromReference(t) {
        return t.applyMatrix3(ye).convertLinearToSRGB();
      }
    }), _Me),
    Se = new Set([Nt, Ft]),
    be = {
      enabled: !0,
      _workingColorSpace: Nt,
      get legacyMode() {
        return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled;
      },
      set legacyMode(t) {
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !t;
      },
      get workingColorSpace() {
        return this._workingColorSpace;
      },
      set workingColorSpace(t) {
        if (!Se.has(t)) throw new Error("Unsupported working color space, \"".concat(t, "\"."));
        this._workingColorSpace = t;
      },
      convert: function convert(t, e, n) {
        if (!1 === this.enabled || e === n || !e || !n) return t;
        var i = Me[e].toReference;
        return (0, Me[n].fromReference)(i(t));
      },
      fromWorkingColorSpace: function fromWorkingColorSpace(t, e) {
        return this.convert(t, this._workingColorSpace, e);
      },
      toWorkingColorSpace: function toWorkingColorSpace(t, e) {
        return this.convert(t, e, this._workingColorSpace);
      },
      getPrimaries: function getPrimaries(t) {
        return Me[t].primaries;
      },
      getTransfer: function getTransfer(t) {
        return t === Ut ? Bt : Me[t].transfer;
      }
    };
  function Te(t) {
    return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4);
  }
  function Ee(t) {
    return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055;
  }
  var we;
  var Ae = /*#__PURE__*/function () {
    function Ae() {
      _classCallCheck(this, Ae);
    }
    _createClass(Ae, null, [{
      key: "getDataURL",
      value: function getDataURL(t) {
        if (/^data:/i.test(t.src)) return t.src;
        if ("undefined" == typeof HTMLCanvasElement) return t.src;
        var e;
        if (t instanceof HTMLCanvasElement) e = t;else {
          void 0 === we && (we = fe("canvas")), we.width = t.width, we.height = t.height;
          var _n4 = we.getContext("2d");
          t instanceof ImageData ? _n4.putImageData(t, 0, 0) : _n4.drawImage(t, 0, 0, t.width, t.height), e = we;
        }
        return e.width > 2048 || e.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", t), e.toDataURL("image/jpeg", .6)) : e.toDataURL("image/png");
      }
    }, {
      key: "sRGBToLinear",
      value: function sRGBToLinear(t) {
        if ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap) {
          var _e4 = fe("canvas");
          _e4.width = t.width, _e4.height = t.height;
          var _n5 = _e4.getContext("2d");
          _n5.drawImage(t, 0, 0, t.width, t.height);
          var _i3 = _n5.getImageData(0, 0, t.width, t.height),
            _r2 = _i3.data;
          for (var _t4 = 0; _t4 < _r2.length; _t4++) _r2[_t4] = 255 * Te(_r2[_t4] / 255);
          return _n5.putImageData(_i3, 0, 0), _e4;
        }
        if (t.data) {
          var _e5 = t.data.slice(0);
          for (var _t5 = 0; _t5 < _e5.length; _t5++) _e5 instanceof Uint8Array || _e5 instanceof Uint8ClampedArray ? _e5[_t5] = Math.floor(255 * Te(_e5[_t5] / 255)) : _e5[_t5] = Te(_e5[_t5]);
          return {
            data: _e5,
            width: t.width,
            height: t.height
          };
        }
        return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), t;
      }
    }]);
    return Ae;
  }();
  var Re = 0;
  var Ce = /*#__PURE__*/function () {
    function Ce() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      _classCallCheck(this, Ce);
      this.isSource = !0, Object.defineProperty(this, "id", {
        value: Re++
      }), this.uuid = Qt(), this.data = t, this.version = 0;
    }
    _createClass(Ce, [{
      key: "needsUpdate",
      set: function set(t) {
        !0 === t && this.version++;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = void 0 === t || "string" == typeof t;
        if (!e && void 0 !== t.images[this.uuid]) return t.images[this.uuid];
        var n = {
            uuid: this.uuid,
            url: ""
          },
          i = this.data;
        if (null !== i) {
          var _t6;
          if (Array.isArray(i)) {
            _t6 = [];
            for (var _e6 = 0, _n6 = i.length; _e6 < _n6; _e6++) i[_e6].isDataTexture ? _t6.push(Le(i[_e6].image)) : _t6.push(Le(i[_e6]));
          } else _t6 = Le(i);
          n.url = _t6;
        }
        return e || (t.images[this.uuid] = n), n;
      }
    }]);
    return Ce;
  }();
  function Le(t) {
    return "undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap ? Ae.getDataURL(t) : t.data ? {
      data: Array.from(t.data),
      width: t.width,
      height: t.height,
      type: t.data.constructor.name
    } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
  }
  var Pe = 0;
  var Ie = /*#__PURE__*/function (_Yt) {
    _inherits(Ie, _Yt);
    var _super = _createSuper(Ie);
    function Ie() {
      var _this;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Ie.DEFAULT_IMAGE;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Ie.DEFAULT_MAPPING;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1001;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1001;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1006;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1008;
      var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1023;
      var o = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1009;
      var l = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : Ie.DEFAULT_ANISOTROPY;
      var c = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : "";
      _classCallCheck(this, Ie);
      _this = _super.call(this), _this.isTexture = !0, Object.defineProperty(_assertThisInitialized(_this), "id", {
        value: Pe++
      }), _this.uuid = Qt(), _this.name = "", _this.source = new Ce(t), _this.mipmaps = [], _this.mapping = e, _this.channel = 0, _this.wrapS = n, _this.wrapT = i, _this.magFilter = r, _this.minFilter = s, _this.anisotropy = l, _this.format = a, _this.internalFormat = null, _this.type = o, _this.offset = new ce(0, 0), _this.repeat = new ce(1, 1), _this.center = new ce(0, 0), _this.rotation = 0, _this.matrixAutoUpdate = !0, _this.matrix = new he(), _this.generateMipmaps = !0, _this.premultiplyAlpha = !1, _this.flipY = !0, _this.unpackAlignment = 4, "string" == typeof c ? _this.colorSpace = c : (ve("THREE.Texture: Property .encoding has been replaced by .colorSpace."), _this.colorSpace = c === It ? Dt : Ut), _this.userData = {}, _this.version = 0, _this.onUpdate = null, _this.isRenderTargetTexture = !1, _this.needsPMREMUpdate = !1;
      return _this;
    }
    _createClass(Ie, [{
      key: "image",
      get: function get() {
        return this.source.data;
      },
      set: function set() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        this.source.data = t;
      }
    }, {
      key: "updateMatrix",
      value: function updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.name = t.name, this.source = t.source, this.mipmaps = t.mipmaps.slice(0), this.mapping = t.mapping, this.channel = t.channel, this.wrapS = t.wrapS, this.wrapT = t.wrapT, this.magFilter = t.magFilter, this.minFilter = t.minFilter, this.anisotropy = t.anisotropy, this.format = t.format, this.internalFormat = t.internalFormat, this.type = t.type, this.offset.copy(t.offset), this.repeat.copy(t.repeat), this.center.copy(t.center), this.rotation = t.rotation, this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrix.copy(t.matrix), this.generateMipmaps = t.generateMipmaps, this.premultiplyAlpha = t.premultiplyAlpha, this.flipY = t.flipY, this.unpackAlignment = t.unpackAlignment, this.colorSpace = t.colorSpace, this.userData = JSON.parse(JSON.stringify(t.userData)), this.needsUpdate = !0, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = void 0 === t || "string" == typeof t;
        if (!e && void 0 !== t.textures[this.uuid]) return t.textures[this.uuid];
        var n = {
          metadata: {
            version: 4.6,
            type: "Texture",
            generator: "Texture.toJSON"
          },
          uuid: this.uuid,
          name: this.name,
          image: this.source.toJSON(t).uuid,
          mapping: this.mapping,
          channel: this.channel,
          repeat: [this.repeat.x, this.repeat.y],
          offset: [this.offset.x, this.offset.y],
          center: [this.center.x, this.center.y],
          rotation: this.rotation,
          wrap: [this.wrapS, this.wrapT],
          format: this.format,
          internalFormat: this.internalFormat,
          type: this.type,
          colorSpace: this.colorSpace,
          minFilter: this.minFilter,
          magFilter: this.magFilter,
          anisotropy: this.anisotropy,
          flipY: this.flipY,
          generateMipmaps: this.generateMipmaps,
          premultiplyAlpha: this.premultiplyAlpha,
          unpackAlignment: this.unpackAlignment
        };
        return Object.keys(this.userData).length > 0 && (n.userData = this.userData), e || (t.textures[this.uuid] = n), n;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    }, {
      key: "transformUv",
      value: function transformUv(t) {
        if (this.mapping !== _) return t;
        if (t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1) switch (this.wrapS) {
          case b:
            t.x = t.x - Math.floor(t.x);
            break;
          case T:
            t.x = t.x < 0 ? 0 : 1;
            break;
          case E:
            1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x);
        }
        if (t.y < 0 || t.y > 1) switch (this.wrapT) {
          case b:
            t.y = t.y - Math.floor(t.y);
            break;
          case T:
            t.y = t.y < 0 ? 0 : 1;
            break;
          case E:
            1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y);
        }
        return this.flipY && (t.y = 1 - t.y), t;
      }
    }, {
      key: "needsUpdate",
      set: function set(t) {
        !0 === t && (this.version++, this.source.needsUpdate = !0);
      }
    }, {
      key: "encoding",
      get: function get() {
        return ve("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace === Dt ? It : Pt;
      },
      set: function set(t) {
        ve("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = t === It ? Dt : Ut;
      }
    }]);
    return Ie;
  }(Yt);
  Ie.DEFAULT_IMAGE = null, Ie.DEFAULT_MAPPING = _, Ie.DEFAULT_ANISOTROPY = 1;
  var Ue = /*#__PURE__*/function (_Symbol$iterator2) {
    function Ue() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      _classCallCheck(this, Ue);
      Ue.prototype.isVector4 = !0, this.x = t, this.y = e, this.z = n, this.w = i;
    }
    _createClass(Ue, [{
      key: "width",
      get: function get() {
        return this.z;
      },
      set: function set(t) {
        this.z = t;
      }
    }, {
      key: "height",
      get: function get() {
        return this.w;
      },
      set: function set(t) {
        this.w = t;
      }
    }, {
      key: "set",
      value: function set(t, e, n, i) {
        return this.x = t, this.y = e, this.z = n, this.w = i, this;
      }
    }, {
      key: "setScalar",
      value: function setScalar(t) {
        return this.x = t, this.y = t, this.z = t, this.w = t, this;
      }
    }, {
      key: "setX",
      value: function setX(t) {
        return this.x = t, this;
      }
    }, {
      key: "setY",
      value: function setY(t) {
        return this.y = t, this;
      }
    }, {
      key: "setZ",
      value: function setZ(t) {
        return this.z = t, this;
      }
    }, {
      key: "setW",
      value: function setW(t) {
        return this.w = t, this;
      }
    }, {
      key: "setComponent",
      value: function setComponent(t, e) {
        switch (t) {
          case 0:
            this.x = e;
            break;
          case 1:
            this.y = e;
            break;
          case 2:
            this.z = e;
            break;
          case 3:
            this.w = e;
            break;
          default:
            throw new Error("index is out of range: " + t);
        }
        return this;
      }
    }, {
      key: "getComponent",
      value: function getComponent(t) {
        switch (t) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          case 3:
            return this.w;
          default:
            throw new Error("index is out of range: " + t);
        }
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.x = t.x, this.y = t.y, this.z = t.z, this.w = void 0 !== t.w ? t.w : 1, this;
      }
    }, {
      key: "add",
      value: function add(t) {
        return this.x += t.x, this.y += t.y, this.z += t.z, this.w += t.w, this;
      }
    }, {
      key: "addScalar",
      value: function addScalar(t) {
        return this.x += t, this.y += t, this.z += t, this.w += t, this;
      }
    }, {
      key: "addVectors",
      value: function addVectors(t, e) {
        return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this.w = t.w + e.w, this;
      }
    }, {
      key: "addScaledVector",
      value: function addScaledVector(t, e) {
        return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this.w += t.w * e, this;
      }
    }, {
      key: "sub",
      value: function sub(t) {
        return this.x -= t.x, this.y -= t.y, this.z -= t.z, this.w -= t.w, this;
      }
    }, {
      key: "subScalar",
      value: function subScalar(t) {
        return this.x -= t, this.y -= t, this.z -= t, this.w -= t, this;
      }
    }, {
      key: "subVectors",
      value: function subVectors(t, e) {
        return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this.w = t.w - e.w, this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        return this.x *= t.x, this.y *= t.y, this.z *= t.z, this.w *= t.w, this;
      }
    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(t) {
        return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this;
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        var e = this.x,
          n = this.y,
          i = this.z,
          r = this.w,
          s = t.elements;
        return this.x = s[0] * e + s[4] * n + s[8] * i + s[12] * r, this.y = s[1] * e + s[5] * n + s[9] * i + s[13] * r, this.z = s[2] * e + s[6] * n + s[10] * i + s[14] * r, this.w = s[3] * e + s[7] * n + s[11] * i + s[15] * r, this;
      }
    }, {
      key: "divideScalar",
      value: function divideScalar(t) {
        return this.multiplyScalar(1 / t);
      }
    }, {
      key: "setAxisAngleFromQuaternion",
      value: function setAxisAngleFromQuaternion(t) {
        this.w = 2 * Math.acos(t.w);
        var e = Math.sqrt(1 - t.w * t.w);
        return e < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t.x / e, this.y = t.y / e, this.z = t.z / e), this;
      }
    }, {
      key: "setAxisAngleFromRotationMatrix",
      value: function setAxisAngleFromRotationMatrix(t) {
        var e, n, i, r;
        var s = .01,
          a = .1,
          o = t.elements,
          l = o[0],
          c = o[4],
          h = o[8],
          u = o[1],
          d = o[5],
          p = o[9],
          m = o[2],
          f = o[6],
          g = o[10];
        if (Math.abs(c - u) < s && Math.abs(h - m) < s && Math.abs(p - f) < s) {
          if (Math.abs(c + u) < a && Math.abs(h + m) < a && Math.abs(p + f) < a && Math.abs(l + d + g - 3) < a) return this.set(1, 0, 0, 0), this;
          e = Math.PI;
          var _t7 = (l + 1) / 2,
            _o2 = (d + 1) / 2,
            _2 = (g + 1) / 2,
            _v = (c + u) / 4,
            _y = (h + m) / 4,
            _x = (p + f) / 4;
          return _t7 > _o2 && _t7 > _2 ? _t7 < s ? (n = 0, i = .707106781, r = .707106781) : (n = Math.sqrt(_t7), i = _v / n, r = _y / n) : _o2 > _2 ? _o2 < s ? (n = .707106781, i = 0, r = .707106781) : (i = Math.sqrt(_o2), n = _v / i, r = _x / i) : _2 < s ? (n = .707106781, i = .707106781, r = 0) : (r = Math.sqrt(_2), n = _y / r, i = _x / r), this.set(n, i, r, e), this;
        }
        var _ = Math.sqrt((f - p) * (f - p) + (h - m) * (h - m) + (u - c) * (u - c));
        return Math.abs(_) < .001 && (_ = 1), this.x = (f - p) / _, this.y = (h - m) / _, this.z = (u - c) / _, this.w = Math.acos((l + d + g - 1) / 2), this;
      }
    }, {
      key: "min",
      value: function min(t) {
        return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this.w = Math.min(this.w, t.w), this;
      }
    }, {
      key: "max",
      value: function max(t) {
        return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this.w = Math.max(this.w, t.w), this;
      }
    }, {
      key: "clamp",
      value: function clamp(t, e) {
        return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this.w = Math.max(t.w, Math.min(e.w, this.w)), this;
      }
    }, {
      key: "clampScalar",
      value: function clampScalar(t, e) {
        return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this.w = Math.max(t, Math.min(e, this.w)), this;
      }
    }, {
      key: "clampLength",
      value: function clampLength(t, e) {
        var n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
      }
    }, {
      key: "floor",
      value: function floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
      }
    }, {
      key: "ceil",
      value: function ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
      }
    }, {
      key: "round",
      value: function round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
      }
    }, {
      key: "roundToZero",
      value: function roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
      }
    }, {
      key: "dot",
      value: function dot(t) {
        return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
      }
    }, {
      key: "lengthSq",
      value: function lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
      }
    }, {
      key: "length",
      value: function length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      }
    }, {
      key: "manhattanLength",
      value: function manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return this.divideScalar(this.length() || 1);
      }
    }, {
      key: "setLength",
      value: function setLength(t) {
        return this.normalize().multiplyScalar(t);
      }
    }, {
      key: "lerp",
      value: function lerp(t, e) {
        return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this.w += (t.w - this.w) * e, this;
      }
    }, {
      key: "lerpVectors",
      value: function lerpVectors(t, e, n) {
        return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this.w = t.w + (e.w - t.w) * n, this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this.w = t[e + 3], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t[e + 3] = this.w, t;
      }
    }, {
      key: "fromBufferAttribute",
      value: function fromBufferAttribute(t, e) {
        return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this.w = t.getW(e), this;
      }
    }, {
      key: "random",
      value: function random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
      }
    }, {
      key: _Symbol$iterator2,
      value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
        return _regeneratorRuntime().wrap(function value$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.x;
            case 2:
              _context2.next = 4;
              return this.y;
            case 4:
              _context2.next = 6;
              return this.z;
            case 6:
              _context2.next = 8;
              return this.w;
            case 8:
            case "end":
              return _context2.stop();
          }
        }, value, this);
      })
    }]);
    return Ue;
  }(Symbol.iterator);
  var De = /*#__PURE__*/function (_Yt2) {
    _inherits(De, _Yt2);
    var _super2 = _createSuper(De);
    function De() {
      var _this2;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _classCallCheck(this, De);
      _this2 = _super2.call(this), _this2.isRenderTarget = !0, _this2.width = t, _this2.height = e, _this2.depth = 1, _this2.scissor = new Ue(0, 0, t, e), _this2.scissorTest = !1, _this2.viewport = new Ue(0, 0, t, e);
      var i = {
        width: t,
        height: e,
        depth: 1
      };
      void 0 !== n.encoding && (ve("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."), n.colorSpace = n.encoding === It ? Dt : Ut), n = Object.assign({
        generateMipmaps: !1,
        internalFormat: null,
        minFilter: C,
        depthBuffer: !0,
        stencilBuffer: !1,
        depthTexture: null,
        samples: 0
      }, n), _this2.texture = new Ie(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace), _this2.texture.isRenderTargetTexture = !0, _this2.texture.flipY = !1, _this2.texture.generateMipmaps = n.generateMipmaps, _this2.texture.internalFormat = n.internalFormat, _this2.depthBuffer = n.depthBuffer, _this2.stencilBuffer = n.stencilBuffer, _this2.depthTexture = n.depthTexture, _this2.samples = n.samples;
      return _this2;
    }
    _createClass(De, [{
      key: "setSize",
      value: function setSize(t, e) {
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        this.width === t && this.height === e && this.depth === n || (this.width = t, this.height = e, this.depth = n, this.texture.image.width = t, this.texture.image.height = e, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        this.width = t.width, this.height = t.height, this.depth = t.depth, this.scissor.copy(t.scissor), this.scissorTest = t.scissorTest, this.viewport.copy(t.viewport), this.texture = t.texture.clone(), this.texture.isRenderTargetTexture = !0;
        var e = Object.assign({}, t.texture.image);
        return this.texture.source = new Ce(e), this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, null !== t.depthTexture && (this.depthTexture = t.depthTexture.clone()), this.samples = t.samples, this;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    }]);
    return De;
  }(Yt);
  var Ne = /*#__PURE__*/function (_De) {
    _inherits(Ne, _De);
    var _super3 = _createSuper(Ne);
    function Ne() {
      var _this3;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _classCallCheck(this, Ne);
      _this3 = _super3.call(this, t, e, n), _this3.isWebGLRenderTarget = !0;
      return _this3;
    }
    return _createClass(Ne);
  }(De);
  var Oe = /*#__PURE__*/function (_Ie) {
    _inherits(Oe, _Ie);
    var _super4 = _createSuper(Oe);
    function Oe() {
      var _this4;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      _classCallCheck(this, Oe);
      _this4 = _super4.call(this, null), _this4.isDataArrayTexture = !0, _this4.image = {
        data: t,
        width: e,
        height: n,
        depth: i
      }, _this4.magFilter = w, _this4.minFilter = w, _this4.wrapR = T, _this4.generateMipmaps = !1, _this4.flipY = !1, _this4.unpackAlignment = 1;
      return _this4;
    }
    return _createClass(Oe);
  }(Ie);
  var Fe = /*#__PURE__*/function (_Ie2) {
    _inherits(Fe, _Ie2);
    var _super5 = _createSuper(Fe);
    function Fe() {
      var _this5;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      _classCallCheck(this, Fe);
      _this5 = _super5.call(this, null), _this5.isData3DTexture = !0, _this5.image = {
        data: t,
        width: e,
        height: n,
        depth: i
      }, _this5.magFilter = w, _this5.minFilter = w, _this5.wrapR = T, _this5.generateMipmaps = !1, _this5.flipY = !1, _this5.unpackAlignment = 1;
      return _this5;
    }
    return _createClass(Fe);
  }(Ie);
  var Be = /*#__PURE__*/function (_Symbol$iterator3) {
    function Be() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      _classCallCheck(this, Be);
      this.isQuaternion = !0, this._x = t, this._y = e, this._z = n, this._w = i;
    }
    _createClass(Be, [{
      key: "x",
      get: function get() {
        return this._x;
      },
      set: function set(t) {
        this._x = t, this._onChangeCallback();
      }
    }, {
      key: "y",
      get: function get() {
        return this._y;
      },
      set: function set(t) {
        this._y = t, this._onChangeCallback();
      }
    }, {
      key: "z",
      get: function get() {
        return this._z;
      },
      set: function set(t) {
        this._z = t, this._onChangeCallback();
      }
    }, {
      key: "w",
      get: function get() {
        return this._w;
      },
      set: function set(t) {
        this._w = t, this._onChangeCallback();
      }
    }, {
      key: "set",
      value: function set(t, e, n, i) {
        return this._x = t, this._y = e, this._z = n, this._w = i, this._onChangeCallback(), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this._x = t.x, this._y = t.y, this._z = t.z, this._w = t.w, this._onChangeCallback(), this;
      }
    }, {
      key: "setFromEuler",
      value: function setFromEuler(t, e) {
        var n = t._x,
          i = t._y,
          r = t._z,
          s = t._order,
          a = Math.cos,
          o = Math.sin,
          l = a(n / 2),
          c = a(i / 2),
          h = a(r / 2),
          u = o(n / 2),
          d = o(i / 2),
          p = o(r / 2);
        switch (s) {
          case "XYZ":
            this._x = u * c * h + l * d * p, this._y = l * d * h - u * c * p, this._z = l * c * p + u * d * h, this._w = l * c * h - u * d * p;
            break;
          case "YXZ":
            this._x = u * c * h + l * d * p, this._y = l * d * h - u * c * p, this._z = l * c * p - u * d * h, this._w = l * c * h + u * d * p;
            break;
          case "ZXY":
            this._x = u * c * h - l * d * p, this._y = l * d * h + u * c * p, this._z = l * c * p + u * d * h, this._w = l * c * h - u * d * p;
            break;
          case "ZYX":
            this._x = u * c * h - l * d * p, this._y = l * d * h + u * c * p, this._z = l * c * p - u * d * h, this._w = l * c * h + u * d * p;
            break;
          case "YZX":
            this._x = u * c * h + l * d * p, this._y = l * d * h + u * c * p, this._z = l * c * p - u * d * h, this._w = l * c * h - u * d * p;
            break;
          case "XZY":
            this._x = u * c * h - l * d * p, this._y = l * d * h - u * c * p, this._z = l * c * p + u * d * h, this._w = l * c * h + u * d * p;
            break;
          default:
            console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + s);
        }
        return !1 !== e && this._onChangeCallback(), this;
      }
    }, {
      key: "setFromAxisAngle",
      value: function setFromAxisAngle(t, e) {
        var n = e / 2,
          i = Math.sin(n);
        return this._x = t.x * i, this._y = t.y * i, this._z = t.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
      }
    }, {
      key: "setFromRotationMatrix",
      value: function setFromRotationMatrix(t) {
        var e = t.elements,
          n = e[0],
          i = e[4],
          r = e[8],
          s = e[1],
          a = e[5],
          o = e[9],
          l = e[2],
          c = e[6],
          h = e[10],
          u = n + a + h;
        if (u > 0) {
          var _t8 = .5 / Math.sqrt(u + 1);
          this._w = .25 / _t8, this._x = (c - o) * _t8, this._y = (r - l) * _t8, this._z = (s - i) * _t8;
        } else if (n > a && n > h) {
          var _t9 = 2 * Math.sqrt(1 + n - a - h);
          this._w = (c - o) / _t9, this._x = .25 * _t9, this._y = (i + s) / _t9, this._z = (r + l) / _t9;
        } else if (a > h) {
          var _t10 = 2 * Math.sqrt(1 + a - n - h);
          this._w = (r - l) / _t10, this._x = (i + s) / _t10, this._y = .25 * _t10, this._z = (o + c) / _t10;
        } else {
          var _t11 = 2 * Math.sqrt(1 + h - n - a);
          this._w = (s - i) / _t11, this._x = (r + l) / _t11, this._y = (o + c) / _t11, this._z = .25 * _t11;
        }
        return this._onChangeCallback(), this;
      }
    }, {
      key: "setFromUnitVectors",
      value: function setFromUnitVectors(t, e) {
        var n = t.dot(e) + 1;
        return n < Number.EPSILON ? (n = 0, Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y, this._y = t.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -t.z, this._z = t.y, this._w = n)) : (this._x = t.y * e.z - t.z * e.y, this._y = t.z * e.x - t.x * e.z, this._z = t.x * e.y - t.y * e.x, this._w = n), this.normalize();
      }
    }, {
      key: "angleTo",
      value: function angleTo(t) {
        return 2 * Math.acos(Math.abs(te(this.dot(t), -1, 1)));
      }
    }, {
      key: "rotateTowards",
      value: function rotateTowards(t, e) {
        var n = this.angleTo(t);
        if (0 === n) return this;
        var i = Math.min(1, e / n);
        return this.slerp(t, i), this;
      }
    }, {
      key: "identity",
      value: function identity() {
        return this.set(0, 0, 0, 1);
      }
    }, {
      key: "invert",
      value: function invert() {
        return this.conjugate();
      }
    }, {
      key: "conjugate",
      value: function conjugate() {
        return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
      }
    }, {
      key: "dot",
      value: function dot(t) {
        return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w;
      }
    }, {
      key: "lengthSq",
      value: function lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
      }
    }, {
      key: "length",
      value: function length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
      }
    }, {
      key: "normalize",
      value: function normalize() {
        var t = this.length();
        return 0 === t ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t = 1 / t, this._x = this._x * t, this._y = this._y * t, this._z = this._z * t, this._w = this._w * t), this._onChangeCallback(), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        return this.multiplyQuaternions(this, t);
      }
    }, {
      key: "premultiply",
      value: function premultiply(t) {
        return this.multiplyQuaternions(t, this);
      }
    }, {
      key: "multiplyQuaternions",
      value: function multiplyQuaternions(t, e) {
        var n = t._x,
          i = t._y,
          r = t._z,
          s = t._w,
          a = e._x,
          o = e._y,
          l = e._z,
          c = e._w;
        return this._x = n * c + s * a + i * l - r * o, this._y = i * c + s * o + r * a - n * l, this._z = r * c + s * l + n * o - i * a, this._w = s * c - n * a - i * o - r * l, this._onChangeCallback(), this;
      }
    }, {
      key: "slerp",
      value: function slerp(t, e) {
        if (0 === e) return this;
        if (1 === e) return this.copy(t);
        var n = this._x,
          i = this._y,
          r = this._z,
          s = this._w;
        var a = s * t._w + n * t._x + i * t._y + r * t._z;
        if (a < 0 ? (this._w = -t._w, this._x = -t._x, this._y = -t._y, this._z = -t._z, a = -a) : this.copy(t), a >= 1) return this._w = s, this._x = n, this._y = i, this._z = r, this;
        var o = 1 - a * a;
        if (o <= Number.EPSILON) {
          var _t12 = 1 - e;
          return this._w = _t12 * s + e * this._w, this._x = _t12 * n + e * this._x, this._y = _t12 * i + e * this._y, this._z = _t12 * r + e * this._z, this.normalize(), this._onChangeCallback(), this;
        }
        var l = Math.sqrt(o),
          c = Math.atan2(l, a),
          h = Math.sin((1 - e) * c) / l,
          u = Math.sin(e * c) / l;
        return this._w = s * h + this._w * u, this._x = n * h + this._x * u, this._y = i * h + this._y * u, this._z = r * h + this._z * u, this._onChangeCallback(), this;
      }
    }, {
      key: "slerpQuaternions",
      value: function slerpQuaternions(t, e, n) {
        return this.copy(t).slerp(e, n);
      }
    }, {
      key: "random",
      value: function random() {
        var t = Math.random(),
          e = Math.sqrt(1 - t),
          n = Math.sqrt(t),
          i = 2 * Math.PI * Math.random(),
          r = 2 * Math.PI * Math.random();
        return this.set(e * Math.cos(i), n * Math.sin(r), n * Math.cos(r), e * Math.sin(i));
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this._x = t[e], this._y = t[e + 1], this._z = t[e + 2], this._w = t[e + 3], this._onChangeCallback(), this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._w, t;
      }
    }, {
      key: "fromBufferAttribute",
      value: function fromBufferAttribute(t, e) {
        return this._x = t.getX(e), this._y = t.getY(e), this._z = t.getZ(e), this._w = t.getW(e), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toArray();
      }
    }, {
      key: "_onChange",
      value: function _onChange(t) {
        return this._onChangeCallback = t, this;
      }
    }, {
      key: "_onChangeCallback",
      value: function _onChangeCallback() {}
    }, {
      key: _Symbol$iterator3,
      value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
        return _regeneratorRuntime().wrap(function value$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this._x;
            case 2:
              _context3.next = 4;
              return this._y;
            case 4:
              _context3.next = 6;
              return this._z;
            case 6:
              _context3.next = 8;
              return this._w;
            case 8:
            case "end":
              return _context3.stop();
          }
        }, value, this);
      })
    }], [{
      key: "slerpFlat",
      value: function slerpFlat(t, e, n, i, r, s, a) {
        var o = n[i + 0],
          l = n[i + 1],
          c = n[i + 2],
          h = n[i + 3];
        var u = r[s + 0],
          d = r[s + 1],
          p = r[s + 2],
          m = r[s + 3];
        if (0 === a) return t[e + 0] = o, t[e + 1] = l, t[e + 2] = c, void (t[e + 3] = h);
        if (1 === a) return t[e + 0] = u, t[e + 1] = d, t[e + 2] = p, void (t[e + 3] = m);
        if (h !== m || o !== u || l !== d || c !== p) {
          var _t13 = 1 - a;
          var _e7 = o * u + l * d + c * p + h * m,
            _n7 = _e7 >= 0 ? 1 : -1,
            _i4 = 1 - _e7 * _e7;
          if (_i4 > Number.EPSILON) {
            var _r3 = Math.sqrt(_i4),
              _s2 = Math.atan2(_r3, _e7 * _n7);
            _t13 = Math.sin(_t13 * _s2) / _r3, a = Math.sin(a * _s2) / _r3;
          }
          var _r4 = a * _n7;
          if (o = o * _t13 + u * _r4, l = l * _t13 + d * _r4, c = c * _t13 + p * _r4, h = h * _t13 + m * _r4, _t13 === 1 - a) {
            var _t14 = 1 / Math.sqrt(o * o + l * l + c * c + h * h);
            o *= _t14, l *= _t14, c *= _t14, h *= _t14;
          }
        }
        t[e] = o, t[e + 1] = l, t[e + 2] = c, t[e + 3] = h;
      }
    }, {
      key: "multiplyQuaternionsFlat",
      value: function multiplyQuaternionsFlat(t, e, n, i, r, s) {
        var a = n[i],
          o = n[i + 1],
          l = n[i + 2],
          c = n[i + 3],
          h = r[s],
          u = r[s + 1],
          d = r[s + 2],
          p = r[s + 3];
        return t[e] = a * p + c * h + o * d - l * u, t[e + 1] = o * p + c * u + l * h - a * d, t[e + 2] = l * p + c * d + a * u - o * h, t[e + 3] = c * p - a * h - o * u - l * d, t;
      }
    }]);
    return Be;
  }(Symbol.iterator);
  var ze = /*#__PURE__*/function (_Symbol$iterator4) {
    function ze() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      _classCallCheck(this, ze);
      ze.prototype.isVector3 = !0, this.x = t, this.y = e, this.z = n;
    }
    _createClass(ze, [{
      key: "set",
      value: function set(t, e, n) {
        return void 0 === n && (n = this.z), this.x = t, this.y = e, this.z = n, this;
      }
    }, {
      key: "setScalar",
      value: function setScalar(t) {
        return this.x = t, this.y = t, this.z = t, this;
      }
    }, {
      key: "setX",
      value: function setX(t) {
        return this.x = t, this;
      }
    }, {
      key: "setY",
      value: function setY(t) {
        return this.y = t, this;
      }
    }, {
      key: "setZ",
      value: function setZ(t) {
        return this.z = t, this;
      }
    }, {
      key: "setComponent",
      value: function setComponent(t, e) {
        switch (t) {
          case 0:
            this.x = e;
            break;
          case 1:
            this.y = e;
            break;
          case 2:
            this.z = e;
            break;
          default:
            throw new Error("index is out of range: " + t);
        }
        return this;
      }
    }, {
      key: "getComponent",
      value: function getComponent(t) {
        switch (t) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          default:
            throw new Error("index is out of range: " + t);
        }
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor(this.x, this.y, this.z);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.x = t.x, this.y = t.y, this.z = t.z, this;
      }
    }, {
      key: "add",
      value: function add(t) {
        return this.x += t.x, this.y += t.y, this.z += t.z, this;
      }
    }, {
      key: "addScalar",
      value: function addScalar(t) {
        return this.x += t, this.y += t, this.z += t, this;
      }
    }, {
      key: "addVectors",
      value: function addVectors(t, e) {
        return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this;
      }
    }, {
      key: "addScaledVector",
      value: function addScaledVector(t, e) {
        return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this;
      }
    }, {
      key: "sub",
      value: function sub(t) {
        return this.x -= t.x, this.y -= t.y, this.z -= t.z, this;
      }
    }, {
      key: "subScalar",
      value: function subScalar(t) {
        return this.x -= t, this.y -= t, this.z -= t, this;
      }
    }, {
      key: "subVectors",
      value: function subVectors(t, e) {
        return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        return this.x *= t.x, this.y *= t.y, this.z *= t.z, this;
      }
    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(t) {
        return this.x *= t, this.y *= t, this.z *= t, this;
      }
    }, {
      key: "multiplyVectors",
      value: function multiplyVectors(t, e) {
        return this.x = t.x * e.x, this.y = t.y * e.y, this.z = t.z * e.z, this;
      }
    }, {
      key: "applyEuler",
      value: function applyEuler(t) {
        return this.applyQuaternion(Ge.setFromEuler(t));
      }
    }, {
      key: "applyAxisAngle",
      value: function applyAxisAngle(t, e) {
        return this.applyQuaternion(Ge.setFromAxisAngle(t, e));
      }
    }, {
      key: "applyMatrix3",
      value: function applyMatrix3(t) {
        var e = this.x,
          n = this.y,
          i = this.z,
          r = t.elements;
        return this.x = r[0] * e + r[3] * n + r[6] * i, this.y = r[1] * e + r[4] * n + r[7] * i, this.z = r[2] * e + r[5] * n + r[8] * i, this;
      }
    }, {
      key: "applyNormalMatrix",
      value: function applyNormalMatrix(t) {
        return this.applyMatrix3(t).normalize();
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        var e = this.x,
          n = this.y,
          i = this.z,
          r = t.elements,
          s = 1 / (r[3] * e + r[7] * n + r[11] * i + r[15]);
        return this.x = (r[0] * e + r[4] * n + r[8] * i + r[12]) * s, this.y = (r[1] * e + r[5] * n + r[9] * i + r[13]) * s, this.z = (r[2] * e + r[6] * n + r[10] * i + r[14]) * s, this;
      }
    }, {
      key: "applyQuaternion",
      value: function applyQuaternion(t) {
        var e = this.x,
          n = this.y,
          i = this.z,
          r = t.x,
          s = t.y,
          a = t.z,
          o = t.w,
          l = o * e + s * i - a * n,
          c = o * n + a * e - r * i,
          h = o * i + r * n - s * e,
          u = -r * e - s * n - a * i;
        return this.x = l * o + u * -r + c * -a - h * -s, this.y = c * o + u * -s + h * -r - l * -a, this.z = h * o + u * -a + l * -s - c * -r, this;
      }
    }, {
      key: "project",
      value: function project(t) {
        return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix);
      }
    }, {
      key: "unproject",
      value: function unproject(t) {
        return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld);
      }
    }, {
      key: "transformDirection",
      value: function transformDirection(t) {
        var e = this.x,
          n = this.y,
          i = this.z,
          r = t.elements;
        return this.x = r[0] * e + r[4] * n + r[8] * i, this.y = r[1] * e + r[5] * n + r[9] * i, this.z = r[2] * e + r[6] * n + r[10] * i, this.normalize();
      }
    }, {
      key: "divide",
      value: function divide(t) {
        return this.x /= t.x, this.y /= t.y, this.z /= t.z, this;
      }
    }, {
      key: "divideScalar",
      value: function divideScalar(t) {
        return this.multiplyScalar(1 / t);
      }
    }, {
      key: "min",
      value: function min(t) {
        return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this;
      }
    }, {
      key: "max",
      value: function max(t) {
        return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this;
      }
    }, {
      key: "clamp",
      value: function clamp(t, e) {
        return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this;
      }
    }, {
      key: "clampScalar",
      value: function clampScalar(t, e) {
        return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this;
      }
    }, {
      key: "clampLength",
      value: function clampLength(t, e) {
        var n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
      }
    }, {
      key: "floor",
      value: function floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
      }
    }, {
      key: "ceil",
      value: function ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
      }
    }, {
      key: "round",
      value: function round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
      }
    }, {
      key: "roundToZero",
      value: function roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
      }
    }, {
      key: "dot",
      value: function dot(t) {
        return this.x * t.x + this.y * t.y + this.z * t.z;
      }
    }, {
      key: "lengthSq",
      value: function lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      }
    }, {
      key: "length",
      value: function length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      }
    }, {
      key: "manhattanLength",
      value: function manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return this.divideScalar(this.length() || 1);
      }
    }, {
      key: "setLength",
      value: function setLength(t) {
        return this.normalize().multiplyScalar(t);
      }
    }, {
      key: "lerp",
      value: function lerp(t, e) {
        return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this;
      }
    }, {
      key: "lerpVectors",
      value: function lerpVectors(t, e, n) {
        return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this;
      }
    }, {
      key: "cross",
      value: function cross(t) {
        return this.crossVectors(this, t);
      }
    }, {
      key: "crossVectors",
      value: function crossVectors(t, e) {
        var n = t.x,
          i = t.y,
          r = t.z,
          s = e.x,
          a = e.y,
          o = e.z;
        return this.x = i * o - r * a, this.y = r * s - n * o, this.z = n * a - i * s, this;
      }
    }, {
      key: "projectOnVector",
      value: function projectOnVector(t) {
        var e = t.lengthSq();
        if (0 === e) return this.set(0, 0, 0);
        var n = t.dot(this) / e;
        return this.copy(t).multiplyScalar(n);
      }
    }, {
      key: "projectOnPlane",
      value: function projectOnPlane(t) {
        return He.copy(this).projectOnVector(t), this.sub(He);
      }
    }, {
      key: "reflect",
      value: function reflect(t) {
        return this.sub(He.copy(t).multiplyScalar(2 * this.dot(t)));
      }
    }, {
      key: "angleTo",
      value: function angleTo(t) {
        var e = Math.sqrt(this.lengthSq() * t.lengthSq());
        if (0 === e) return Math.PI / 2;
        var n = this.dot(t) / e;
        return Math.acos(te(n, -1, 1));
      }
    }, {
      key: "distanceTo",
      value: function distanceTo(t) {
        return Math.sqrt(this.distanceToSquared(t));
      }
    }, {
      key: "distanceToSquared",
      value: function distanceToSquared(t) {
        var e = this.x - t.x,
          n = this.y - t.y,
          i = this.z - t.z;
        return e * e + n * n + i * i;
      }
    }, {
      key: "manhattanDistanceTo",
      value: function manhattanDistanceTo(t) {
        return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z);
      }
    }, {
      key: "setFromSpherical",
      value: function setFromSpherical(t) {
        return this.setFromSphericalCoords(t.radius, t.phi, t.theta);
      }
    }, {
      key: "setFromSphericalCoords",
      value: function setFromSphericalCoords(t, e, n) {
        var i = Math.sin(e) * t;
        return this.x = i * Math.sin(n), this.y = Math.cos(e) * t, this.z = i * Math.cos(n), this;
      }
    }, {
      key: "setFromCylindrical",
      value: function setFromCylindrical(t) {
        return this.setFromCylindricalCoords(t.radius, t.theta, t.y);
      }
    }, {
      key: "setFromCylindricalCoords",
      value: function setFromCylindricalCoords(t, e, n) {
        return this.x = t * Math.sin(e), this.y = n, this.z = t * Math.cos(e), this;
      }
    }, {
      key: "setFromMatrixPosition",
      value: function setFromMatrixPosition(t) {
        var e = t.elements;
        return this.x = e[12], this.y = e[13], this.z = e[14], this;
      }
    }, {
      key: "setFromMatrixScale",
      value: function setFromMatrixScale(t) {
        var e = this.setFromMatrixColumn(t, 0).length(),
          n = this.setFromMatrixColumn(t, 1).length(),
          i = this.setFromMatrixColumn(t, 2).length();
        return this.x = e, this.y = n, this.z = i, this;
      }
    }, {
      key: "setFromMatrixColumn",
      value: function setFromMatrixColumn(t, e) {
        return this.fromArray(t.elements, 4 * e);
      }
    }, {
      key: "setFromMatrix3Column",
      value: function setFromMatrix3Column(t, e) {
        return this.fromArray(t.elements, 3 * e);
      }
    }, {
      key: "setFromEuler",
      value: function setFromEuler(t) {
        return this.x = t._x, this.y = t._y, this.z = t._z, this;
      }
    }, {
      key: "setFromColor",
      value: function setFromColor(t) {
        return this.x = t.r, this.y = t.g, this.z = t.b, this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.x === this.x && t.y === this.y && t.z === this.z;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t;
      }
    }, {
      key: "fromBufferAttribute",
      value: function fromBufferAttribute(t, e) {
        return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this;
      }
    }, {
      key: "random",
      value: function random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
      }
    }, {
      key: "randomDirection",
      value: function randomDirection() {
        var t = 2 * (Math.random() - .5),
          e = Math.random() * Math.PI * 2,
          n = Math.sqrt(1 - Math.pow(t, 2));
        return this.x = n * Math.cos(e), this.y = n * Math.sin(e), this.z = t, this;
      }
    }, {
      key: _Symbol$iterator4,
      value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
        return _regeneratorRuntime().wrap(function value$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.x;
            case 2:
              _context4.next = 4;
              return this.y;
            case 4:
              _context4.next = 6;
              return this.z;
            case 6:
            case "end":
              return _context4.stop();
          }
        }, value, this);
      })
    }]);
    return ze;
  }(Symbol.iterator);
  var He = new ze(),
    Ge = new Be();
  var Ve = /*#__PURE__*/function () {
    function Ve() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze(1 / 0, 1 / 0, 1 / 0);
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze(-1 / 0, -1 / 0, -1 / 0);
      _classCallCheck(this, Ve);
      this.isBox3 = !0, this.min = t, this.max = e;
    }
    _createClass(Ve, [{
      key: "set",
      value: function set(t, e) {
        return this.min.copy(t), this.max.copy(e), this;
      }
    }, {
      key: "setFromArray",
      value: function setFromArray(t) {
        this.makeEmpty();
        for (var _e8 = 0, _n8 = t.length; _e8 < _n8; _e8 += 3) this.expandByPoint(We.fromArray(t, _e8));
        return this;
      }
    }, {
      key: "setFromBufferAttribute",
      value: function setFromBufferAttribute(t) {
        this.makeEmpty();
        for (var _e9 = 0, _n9 = t.count; _e9 < _n9; _e9++) this.expandByPoint(We.fromBufferAttribute(t, _e9));
        return this;
      }
    }, {
      key: "setFromPoints",
      value: function setFromPoints(t) {
        this.makeEmpty();
        for (var _e10 = 0, _n10 = t.length; _e10 < _n10; _e10++) this.expandByPoint(t[_e10]);
        return this;
      }
    }, {
      key: "setFromCenterAndSize",
      value: function setFromCenterAndSize(t, e) {
        var n = We.copy(e).multiplyScalar(.5);
        return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
      }
    }, {
      key: "setFromObject",
      value: function setFromObject(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        return this.makeEmpty(), this.expandByObject(t, e);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.min.copy(t.min), this.max.copy(t.max), this;
      }
    }, {
      key: "makeEmpty",
      value: function makeEmpty() {
        return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
      }
    }, {
      key: "getCenter",
      value: function getCenter(t) {
        return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5);
      }
    }, {
      key: "getSize",
      value: function getSize(t) {
        return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min);
      }
    }, {
      key: "expandByPoint",
      value: function expandByPoint(t) {
        return this.min.min(t), this.max.max(t), this;
      }
    }, {
      key: "expandByVector",
      value: function expandByVector(t) {
        return this.min.sub(t), this.max.add(t), this;
      }
    }, {
      key: "expandByScalar",
      value: function expandByScalar(t) {
        return this.min.addScalar(-t), this.max.addScalar(t), this;
      }
    }, {
      key: "expandByObject",
      value: function expandByObject(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        if (t.updateWorldMatrix(!1, !1), void 0 !== t.boundingBox) null === t.boundingBox && t.computeBoundingBox(), Xe.copy(t.boundingBox), Xe.applyMatrix4(t.matrixWorld), this.union(Xe);else {
          var _n11 = t.geometry;
          if (void 0 !== _n11) if (e && void 0 !== _n11.attributes && void 0 !== _n11.attributes.position) {
            var _e11 = _n11.attributes.position;
            for (var _n12 = 0, _i5 = _e11.count; _n12 < _i5; _n12++) We.fromBufferAttribute(_e11, _n12).applyMatrix4(t.matrixWorld), this.expandByPoint(We);
          } else null === _n11.boundingBox && _n11.computeBoundingBox(), Xe.copy(_n11.boundingBox), Xe.applyMatrix4(t.matrixWorld), this.union(Xe);
        }
        var n = t.children;
        for (var _t15 = 0, _i6 = n.length; _t15 < _i6; _t15++) this.expandByObject(n[_t15], e);
        return this;
      }
    }, {
      key: "containsPoint",
      value: function containsPoint(t) {
        return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z);
      }
    }, {
      key: "containsBox",
      value: function containsBox(t) {
        return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z;
      }
    }, {
      key: "getParameter",
      value: function getParameter(t, e) {
        return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z));
      }
    }, {
      key: "intersectsBox",
      value: function intersectsBox(t) {
        return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z);
      }
    }, {
      key: "intersectsSphere",
      value: function intersectsSphere(t) {
        return this.clampPoint(t.center, We), We.distanceToSquared(t.center) <= t.radius * t.radius;
      }
    }, {
      key: "intersectsPlane",
      value: function intersectsPlane(t) {
        var e, n;
        return t.normal.x > 0 ? (e = t.normal.x * this.min.x, n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x, n = t.normal.x * this.min.x), t.normal.y > 0 ? (e += t.normal.y * this.min.y, n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y, n += t.normal.y * this.min.y), t.normal.z > 0 ? (e += t.normal.z * this.min.z, n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z, n += t.normal.z * this.min.z), e <= -t.constant && n >= -t.constant;
      }
    }, {
      key: "intersectsTriangle",
      value: function intersectsTriangle(t) {
        if (this.isEmpty()) return !1;
        this.getCenter($e), Qe.subVectors(this.max, $e), je.subVectors(t.a, $e), qe.subVectors(t.b, $e), Ye.subVectors(t.c, $e), Ze.subVectors(qe, je), Je.subVectors(Ye, qe), Ke.subVectors(je, Ye);
        var e = [0, -Ze.z, Ze.y, 0, -Je.z, Je.y, 0, -Ke.z, Ke.y, Ze.z, 0, -Ze.x, Je.z, 0, -Je.x, Ke.z, 0, -Ke.x, -Ze.y, Ze.x, 0, -Je.y, Je.x, 0, -Ke.y, Ke.x, 0];
        return !!nn(e, je, qe, Ye, Qe) && (e = [1, 0, 0, 0, 1, 0, 0, 0, 1], !!nn(e, je, qe, Ye, Qe) && (tn.crossVectors(Ze, Je), e = [tn.x, tn.y, tn.z], nn(e, je, qe, Ye, Qe)));
      }
    }, {
      key: "clampPoint",
      value: function clampPoint(t, e) {
        return e.copy(t).clamp(this.min, this.max);
      }
    }, {
      key: "distanceToPoint",
      value: function distanceToPoint(t) {
        return this.clampPoint(t, We).distanceTo(t);
      }
    }, {
      key: "getBoundingSphere",
      value: function getBoundingSphere(t) {
        return this.isEmpty() ? t.makeEmpty() : (this.getCenter(t.center), t.radius = .5 * this.getSize(We).length()), t;
      }
    }, {
      key: "intersect",
      value: function intersect(t) {
        return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
      }
    }, {
      key: "union",
      value: function union(t) {
        return this.min.min(t.min), this.max.max(t.max), this;
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        return this.isEmpty() || (ke[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t), ke[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t), ke[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t), ke[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t), ke[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t), ke[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t), ke[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t), ke[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t), this.setFromPoints(ke)), this;
      }
    }, {
      key: "translate",
      value: function translate(t) {
        return this.min.add(t), this.max.add(t), this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.min.equals(this.min) && t.max.equals(this.max);
      }
    }]);
    return Ve;
  }();
  var ke = [new ze(), new ze(), new ze(), new ze(), new ze(), new ze(), new ze(), new ze()],
    We = new ze(),
    Xe = new Ve(),
    je = new ze(),
    qe = new ze(),
    Ye = new ze(),
    Ze = new ze(),
    Je = new ze(),
    Ke = new ze(),
    $e = new ze(),
    Qe = new ze(),
    tn = new ze(),
    en = new ze();
  function nn(t, e, n, i, r) {
    for (var _s3 = 0, _a2 = t.length - 3; _s3 <= _a2; _s3 += 3) {
      en.fromArray(t, _s3);
      var _a3 = r.x * Math.abs(en.x) + r.y * Math.abs(en.y) + r.z * Math.abs(en.z),
        _o3 = e.dot(en),
        _l2 = n.dot(en),
        _c2 = i.dot(en);
      if (Math.max(-Math.max(_o3, _l2, _c2), Math.min(_o3, _l2, _c2)) > _a3) return !1;
    }
    return !0;
  }
  var rn = new Ve(),
    sn = new ze(),
    an = new ze();
  var on = /*#__PURE__*/function () {
    function on() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      _classCallCheck(this, on);
      this.center = t, this.radius = e;
    }
    _createClass(on, [{
      key: "set",
      value: function set(t, e) {
        return this.center.copy(t), this.radius = e, this;
      }
    }, {
      key: "setFromPoints",
      value: function setFromPoints(t, e) {
        var n = this.center;
        void 0 !== e ? n.copy(e) : rn.setFromPoints(t).getCenter(n);
        var i = 0;
        for (var _e12 = 0, _r5 = t.length; _e12 < _r5; _e12++) i = Math.max(i, n.distanceToSquared(t[_e12]));
        return this.radius = Math.sqrt(i), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.center.copy(t.center), this.radius = t.radius, this;
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return this.radius < 0;
      }
    }, {
      key: "makeEmpty",
      value: function makeEmpty() {
        return this.center.set(0, 0, 0), this.radius = -1, this;
      }
    }, {
      key: "containsPoint",
      value: function containsPoint(t) {
        return t.distanceToSquared(this.center) <= this.radius * this.radius;
      }
    }, {
      key: "distanceToPoint",
      value: function distanceToPoint(t) {
        return t.distanceTo(this.center) - this.radius;
      }
    }, {
      key: "intersectsSphere",
      value: function intersectsSphere(t) {
        var e = this.radius + t.radius;
        return t.center.distanceToSquared(this.center) <= e * e;
      }
    }, {
      key: "intersectsBox",
      value: function intersectsBox(t) {
        return t.intersectsSphere(this);
      }
    }, {
      key: "intersectsPlane",
      value: function intersectsPlane(t) {
        return Math.abs(t.distanceToPoint(this.center)) <= this.radius;
      }
    }, {
      key: "clampPoint",
      value: function clampPoint(t, e) {
        var n = this.center.distanceToSquared(t);
        return e.copy(t), n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e;
      }
    }, {
      key: "getBoundingBox",
      value: function getBoundingBox(t) {
        return this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t);
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        return this.center.applyMatrix4(t), this.radius = this.radius * t.getMaxScaleOnAxis(), this;
      }
    }, {
      key: "translate",
      value: function translate(t) {
        return this.center.add(t), this;
      }
    }, {
      key: "expandByPoint",
      value: function expandByPoint(t) {
        if (this.isEmpty()) return this.center.copy(t), this.radius = 0, this;
        sn.subVectors(t, this.center);
        var e = sn.lengthSq();
        if (e > this.radius * this.radius) {
          var _t16 = Math.sqrt(e),
            _n13 = .5 * (_t16 - this.radius);
          this.center.addScaledVector(sn, _n13 / _t16), this.radius += _n13;
        }
        return this;
      }
    }, {
      key: "union",
      value: function union(t) {
        return t.isEmpty() ? this : this.isEmpty() ? (this.copy(t), this) : (!0 === this.center.equals(t.center) ? this.radius = Math.max(this.radius, t.radius) : (an.subVectors(t.center, this.center).setLength(t.radius), this.expandByPoint(sn.copy(t.center).add(an)), this.expandByPoint(sn.copy(t.center).sub(an))), this);
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.center.equals(this.center) && t.radius === this.radius;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return on;
  }();
  var ln = new ze(),
    cn = new ze(),
    hn = new ze(),
    un = new ze(),
    dn = new ze(),
    pn = new ze(),
    mn = new ze();
  var fn = /*#__PURE__*/function () {
    function fn() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze(0, 0, -1);
      _classCallCheck(this, fn);
      this.origin = t, this.direction = e;
    }
    _createClass(fn, [{
      key: "set",
      value: function set(t, e) {
        return this.origin.copy(t), this.direction.copy(e), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.origin.copy(t.origin), this.direction.copy(t.direction), this;
      }
    }, {
      key: "at",
      value: function at(t, e) {
        return e.copy(this.origin).addScaledVector(this.direction, t);
      }
    }, {
      key: "lookAt",
      value: function lookAt(t) {
        return this.direction.copy(t).sub(this.origin).normalize(), this;
      }
    }, {
      key: "recast",
      value: function recast(t) {
        return this.origin.copy(this.at(t, ln)), this;
      }
    }, {
      key: "closestPointToPoint",
      value: function closestPointToPoint(t, e) {
        e.subVectors(t, this.origin);
        var n = e.dot(this.direction);
        return n < 0 ? e.copy(this.origin) : e.copy(this.origin).addScaledVector(this.direction, n);
      }
    }, {
      key: "distanceToPoint",
      value: function distanceToPoint(t) {
        return Math.sqrt(this.distanceSqToPoint(t));
      }
    }, {
      key: "distanceSqToPoint",
      value: function distanceSqToPoint(t) {
        var e = ln.subVectors(t, this.origin).dot(this.direction);
        return e < 0 ? this.origin.distanceToSquared(t) : (ln.copy(this.origin).addScaledVector(this.direction, e), ln.distanceToSquared(t));
      }
    }, {
      key: "distanceSqToSegment",
      value: function distanceSqToSegment(t, e, n, i) {
        cn.copy(t).add(e).multiplyScalar(.5), hn.copy(e).sub(t).normalize(), un.copy(this.origin).sub(cn);
        var r = .5 * t.distanceTo(e),
          s = -this.direction.dot(hn),
          a = un.dot(this.direction),
          o = -un.dot(hn),
          l = un.lengthSq(),
          c = Math.abs(1 - s * s);
        var h, u, d, p;
        if (c > 0) {
          if (h = s * o - a, u = s * a - o, p = r * c, h >= 0) {
            if (u >= -p) {
              if (u <= p) {
                var _t17 = 1 / c;
                h *= _t17, u *= _t17, d = h * (h + s * u + 2 * a) + u * (s * h + u + 2 * o) + l;
              } else u = r, h = Math.max(0, -(s * u + a)), d = -h * h + u * (u + 2 * o) + l;
            } else u = -r, h = Math.max(0, -(s * u + a)), d = -h * h + u * (u + 2 * o) + l;
          } else u <= -p ? (h = Math.max(0, -(-s * r + a)), u = h > 0 ? -r : Math.min(Math.max(-r, -o), r), d = -h * h + u * (u + 2 * o) + l) : u <= p ? (h = 0, u = Math.min(Math.max(-r, -o), r), d = u * (u + 2 * o) + l) : (h = Math.max(0, -(s * r + a)), u = h > 0 ? r : Math.min(Math.max(-r, -o), r), d = -h * h + u * (u + 2 * o) + l);
        } else u = s > 0 ? -r : r, h = Math.max(0, -(s * u + a)), d = -h * h + u * (u + 2 * o) + l;
        return n && n.copy(this.origin).addScaledVector(this.direction, h), i && i.copy(cn).addScaledVector(hn, u), d;
      }
    }, {
      key: "intersectSphere",
      value: function intersectSphere(t, e) {
        ln.subVectors(t.center, this.origin);
        var n = ln.dot(this.direction),
          i = ln.dot(ln) - n * n,
          r = t.radius * t.radius;
        if (i > r) return null;
        var s = Math.sqrt(r - i),
          a = n - s,
          o = n + s;
        return o < 0 ? null : a < 0 ? this.at(o, e) : this.at(a, e);
      }
    }, {
      key: "intersectsSphere",
      value: function intersectsSphere(t) {
        return this.distanceSqToPoint(t.center) <= t.radius * t.radius;
      }
    }, {
      key: "distanceToPlane",
      value: function distanceToPlane(t) {
        var e = t.normal.dot(this.direction);
        if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null;
        var n = -(this.origin.dot(t.normal) + t.constant) / e;
        return n >= 0 ? n : null;
      }
    }, {
      key: "intersectPlane",
      value: function intersectPlane(t, e) {
        var n = this.distanceToPlane(t);
        return null === n ? null : this.at(n, e);
      }
    }, {
      key: "intersectsPlane",
      value: function intersectsPlane(t) {
        var e = t.distanceToPoint(this.origin);
        if (0 === e) return !0;
        return t.normal.dot(this.direction) * e < 0;
      }
    }, {
      key: "intersectBox",
      value: function intersectBox(t, e) {
        var n, i, r, s, a, o;
        var l = 1 / this.direction.x,
          c = 1 / this.direction.y,
          h = 1 / this.direction.z,
          u = this.origin;
        return l >= 0 ? (n = (t.min.x - u.x) * l, i = (t.max.x - u.x) * l) : (n = (t.max.x - u.x) * l, i = (t.min.x - u.x) * l), c >= 0 ? (r = (t.min.y - u.y) * c, s = (t.max.y - u.y) * c) : (r = (t.max.y - u.y) * c, s = (t.min.y - u.y) * c), n > s || r > i ? null : ((r > n || isNaN(n)) && (n = r), (s < i || isNaN(i)) && (i = s), h >= 0 ? (a = (t.min.z - u.z) * h, o = (t.max.z - u.z) * h) : (a = (t.max.z - u.z) * h, o = (t.min.z - u.z) * h), n > o || a > i ? null : ((a > n || n != n) && (n = a), (o < i || i != i) && (i = o), i < 0 ? null : this.at(n >= 0 ? n : i, e)));
      }
    }, {
      key: "intersectsBox",
      value: function intersectsBox(t) {
        return null !== this.intersectBox(t, ln);
      }
    }, {
      key: "intersectTriangle",
      value: function intersectTriangle(t, e, n, i, r) {
        dn.subVectors(e, t), pn.subVectors(n, t), mn.crossVectors(dn, pn);
        var s,
          a = this.direction.dot(mn);
        if (a > 0) {
          if (i) return null;
          s = 1;
        } else {
          if (!(a < 0)) return null;
          s = -1, a = -a;
        }
        un.subVectors(this.origin, t);
        var o = s * this.direction.dot(pn.crossVectors(un, pn));
        if (o < 0) return null;
        var l = s * this.direction.dot(dn.cross(un));
        if (l < 0) return null;
        if (o + l > a) return null;
        var c = -s * un.dot(mn);
        return c < 0 ? null : this.at(c / a, r);
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.origin.equals(this.origin) && t.direction.equals(this.direction);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return fn;
  }();
  var gn = /*#__PURE__*/function () {
    function gn(t, e, n, i, r, s, a, o, l, c, h, u, d, p, m, f) {
      _classCallCheck(this, gn);
      gn.prototype.isMatrix4 = !0, this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], void 0 !== t && this.set(t, e, n, i, r, s, a, o, l, c, h, u, d, p, m, f);
    }
    _createClass(gn, [{
      key: "set",
      value: function set(t, e, n, i, r, s, a, o, l, c, h, u, d, p, m, f) {
        var g = this.elements;
        return g[0] = t, g[4] = e, g[8] = n, g[12] = i, g[1] = r, g[5] = s, g[9] = a, g[13] = o, g[2] = l, g[6] = c, g[10] = h, g[14] = u, g[3] = d, g[7] = p, g[11] = m, g[15] = f, this;
      }
    }, {
      key: "identity",
      value: function identity() {
        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new gn().fromArray(this.elements);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        var e = this.elements,
          n = t.elements;
        return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], e[9] = n[9], e[10] = n[10], e[11] = n[11], e[12] = n[12], e[13] = n[13], e[14] = n[14], e[15] = n[15], this;
      }
    }, {
      key: "copyPosition",
      value: function copyPosition(t) {
        var e = this.elements,
          n = t.elements;
        return e[12] = n[12], e[13] = n[13], e[14] = n[14], this;
      }
    }, {
      key: "setFromMatrix3",
      value: function setFromMatrix3(t) {
        var e = t.elements;
        return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "extractBasis",
      value: function extractBasis(t, e, n) {
        return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
      }
    }, {
      key: "makeBasis",
      value: function makeBasis(t, e, n) {
        return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "extractRotation",
      value: function extractRotation(t) {
        var e = this.elements,
          n = t.elements,
          i = 1 / _n.setFromMatrixColumn(t, 0).length(),
          r = 1 / _n.setFromMatrixColumn(t, 1).length(),
          s = 1 / _n.setFromMatrixColumn(t, 2).length();
        return e[0] = n[0] * i, e[1] = n[1] * i, e[2] = n[2] * i, e[3] = 0, e[4] = n[4] * r, e[5] = n[5] * r, e[6] = n[6] * r, e[7] = 0, e[8] = n[8] * s, e[9] = n[9] * s, e[10] = n[10] * s, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
      }
    }, {
      key: "makeRotationFromEuler",
      value: function makeRotationFromEuler(t) {
        var e = this.elements,
          n = t.x,
          i = t.y,
          r = t.z,
          s = Math.cos(n),
          a = Math.sin(n),
          o = Math.cos(i),
          l = Math.sin(i),
          c = Math.cos(r),
          h = Math.sin(r);
        if ("XYZ" === t.order) {
          var _t18 = s * c,
            _n14 = s * h,
            _i7 = a * c,
            _r6 = a * h;
          e[0] = o * c, e[4] = -o * h, e[8] = l, e[1] = _n14 + _i7 * l, e[5] = _t18 - _r6 * l, e[9] = -a * o, e[2] = _r6 - _t18 * l, e[6] = _i7 + _n14 * l, e[10] = s * o;
        } else if ("YXZ" === t.order) {
          var _t19 = o * c,
            _n15 = o * h,
            _i8 = l * c,
            _r7 = l * h;
          e[0] = _t19 + _r7 * a, e[4] = _i8 * a - _n15, e[8] = s * l, e[1] = s * h, e[5] = s * c, e[9] = -a, e[2] = _n15 * a - _i8, e[6] = _r7 + _t19 * a, e[10] = s * o;
        } else if ("ZXY" === t.order) {
          var _t20 = o * c,
            _n16 = o * h,
            _i9 = l * c,
            _r8 = l * h;
          e[0] = _t20 - _r8 * a, e[4] = -s * h, e[8] = _i9 + _n16 * a, e[1] = _n16 + _i9 * a, e[5] = s * c, e[9] = _r8 - _t20 * a, e[2] = -s * l, e[6] = a, e[10] = s * o;
        } else if ("ZYX" === t.order) {
          var _t21 = s * c,
            _n17 = s * h,
            _i10 = a * c,
            _r9 = a * h;
          e[0] = o * c, e[4] = _i10 * l - _n17, e[8] = _t21 * l + _r9, e[1] = o * h, e[5] = _r9 * l + _t21, e[9] = _n17 * l - _i10, e[2] = -l, e[6] = a * o, e[10] = s * o;
        } else if ("YZX" === t.order) {
          var _t22 = s * o,
            _n18 = s * l,
            _i11 = a * o,
            _r10 = a * l;
          e[0] = o * c, e[4] = _r10 - _t22 * h, e[8] = _i11 * h + _n18, e[1] = h, e[5] = s * c, e[9] = -a * c, e[2] = -l * c, e[6] = _n18 * h + _i11, e[10] = _t22 - _r10 * h;
        } else if ("XZY" === t.order) {
          var _t23 = s * o,
            _n19 = s * l,
            _i12 = a * o,
            _r11 = a * l;
          e[0] = o * c, e[4] = -h, e[8] = l * c, e[1] = _t23 * h + _r11, e[5] = s * c, e[9] = _n19 * h - _i12, e[2] = _i12 * h - _n19, e[6] = a * c, e[10] = _r11 * h + _t23;
        }
        return e[3] = 0, e[7] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
      }
    }, {
      key: "makeRotationFromQuaternion",
      value: function makeRotationFromQuaternion(t) {
        return this.compose(yn, t, xn);
      }
    }, {
      key: "lookAt",
      value: function lookAt(t, e, n) {
        var i = this.elements;
        return bn.subVectors(t, e), 0 === bn.lengthSq() && (bn.z = 1), bn.normalize(), Mn.crossVectors(n, bn), 0 === Mn.lengthSq() && (1 === Math.abs(n.z) ? bn.x += 1e-4 : bn.z += 1e-4, bn.normalize(), Mn.crossVectors(n, bn)), Mn.normalize(), Sn.crossVectors(bn, Mn), i[0] = Mn.x, i[4] = Sn.x, i[8] = bn.x, i[1] = Mn.y, i[5] = Sn.y, i[9] = bn.y, i[2] = Mn.z, i[6] = Sn.z, i[10] = bn.z, this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        return this.multiplyMatrices(this, t);
      }
    }, {
      key: "premultiply",
      value: function premultiply(t) {
        return this.multiplyMatrices(t, this);
      }
    }, {
      key: "multiplyMatrices",
      value: function multiplyMatrices(t, e) {
        var n = t.elements,
          i = e.elements,
          r = this.elements,
          s = n[0],
          a = n[4],
          o = n[8],
          l = n[12],
          c = n[1],
          h = n[5],
          u = n[9],
          d = n[13],
          p = n[2],
          m = n[6],
          f = n[10],
          g = n[14],
          _ = n[3],
          v = n[7],
          y = n[11],
          x = n[15],
          M = i[0],
          S = i[4],
          b = i[8],
          T = i[12],
          E = i[1],
          w = i[5],
          A = i[9],
          R = i[13],
          C = i[2],
          L = i[6],
          P = i[10],
          I = i[14],
          U = i[3],
          D = i[7],
          N = i[11],
          O = i[15];
        return r[0] = s * M + a * E + o * C + l * U, r[4] = s * S + a * w + o * L + l * D, r[8] = s * b + a * A + o * P + l * N, r[12] = s * T + a * R + o * I + l * O, r[1] = c * M + h * E + u * C + d * U, r[5] = c * S + h * w + u * L + d * D, r[9] = c * b + h * A + u * P + d * N, r[13] = c * T + h * R + u * I + d * O, r[2] = p * M + m * E + f * C + g * U, r[6] = p * S + m * w + f * L + g * D, r[10] = p * b + m * A + f * P + g * N, r[14] = p * T + m * R + f * I + g * O, r[3] = _ * M + v * E + y * C + x * U, r[7] = _ * S + v * w + y * L + x * D, r[11] = _ * b + v * A + y * P + x * N, r[15] = _ * T + v * R + y * I + x * O, this;
      }
    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(t) {
        var e = this.elements;
        return e[0] *= t, e[4] *= t, e[8] *= t, e[12] *= t, e[1] *= t, e[5] *= t, e[9] *= t, e[13] *= t, e[2] *= t, e[6] *= t, e[10] *= t, e[14] *= t, e[3] *= t, e[7] *= t, e[11] *= t, e[15] *= t, this;
      }
    }, {
      key: "determinant",
      value: function determinant() {
        var t = this.elements,
          e = t[0],
          n = t[4],
          i = t[8],
          r = t[12],
          s = t[1],
          a = t[5],
          o = t[9],
          l = t[13],
          c = t[2],
          h = t[6],
          u = t[10],
          d = t[14];
        return t[3] * (+r * o * h - i * l * h - r * a * u + n * l * u + i * a * d - n * o * d) + t[7] * (+e * o * d - e * l * u + r * s * u - i * s * d + i * l * c - r * o * c) + t[11] * (+e * l * h - e * a * d - r * s * h + n * s * d + r * a * c - n * l * c) + t[15] * (-i * a * c - e * o * h + e * a * u + i * s * h - n * s * u + n * o * c);
      }
    }, {
      key: "transpose",
      value: function transpose() {
        var t = this.elements;
        var e;
        return e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], t[8] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[7], t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this;
      }
    }, {
      key: "setPosition",
      value: function setPosition(t, e, n) {
        var i = this.elements;
        return t.isVector3 ? (i[12] = t.x, i[13] = t.y, i[14] = t.z) : (i[12] = t, i[13] = e, i[14] = n), this;
      }
    }, {
      key: "invert",
      value: function invert() {
        var t = this.elements,
          e = t[0],
          n = t[1],
          i = t[2],
          r = t[3],
          s = t[4],
          a = t[5],
          o = t[6],
          l = t[7],
          c = t[8],
          h = t[9],
          u = t[10],
          d = t[11],
          p = t[12],
          m = t[13],
          f = t[14],
          g = t[15],
          _ = h * f * l - m * u * l + m * o * d - a * f * d - h * o * g + a * u * g,
          v = p * u * l - c * f * l - p * o * d + s * f * d + c * o * g - s * u * g,
          y = c * m * l - p * h * l + p * a * d - s * m * d - c * a * g + s * h * g,
          x = p * h * o - c * m * o - p * a * u + s * m * u + c * a * f - s * h * f,
          M = e * _ + n * v + i * y + r * x;
        if (0 === M) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var S = 1 / M;
        return t[0] = _ * S, t[1] = (m * u * r - h * f * r - m * i * d + n * f * d + h * i * g - n * u * g) * S, t[2] = (a * f * r - m * o * r + m * i * l - n * f * l - a * i * g + n * o * g) * S, t[3] = (h * o * r - a * u * r - h * i * l + n * u * l + a * i * d - n * o * d) * S, t[4] = v * S, t[5] = (c * f * r - p * u * r + p * i * d - e * f * d - c * i * g + e * u * g) * S, t[6] = (p * o * r - s * f * r - p * i * l + e * f * l + s * i * g - e * o * g) * S, t[7] = (s * u * r - c * o * r + c * i * l - e * u * l - s * i * d + e * o * d) * S, t[8] = y * S, t[9] = (p * h * r - c * m * r - p * n * d + e * m * d + c * n * g - e * h * g) * S, t[10] = (s * m * r - p * a * r + p * n * l - e * m * l - s * n * g + e * a * g) * S, t[11] = (c * a * r - s * h * r - c * n * l + e * h * l + s * n * d - e * a * d) * S, t[12] = x * S, t[13] = (c * m * i - p * h * i + p * n * u - e * m * u - c * n * f + e * h * f) * S, t[14] = (p * a * i - s * m * i - p * n * o + e * m * o + s * n * f - e * a * f) * S, t[15] = (s * h * i - c * a * i + c * n * o - e * h * o - s * n * u + e * a * u) * S, this;
      }
    }, {
      key: "scale",
      value: function scale(t) {
        var e = this.elements,
          n = t.x,
          i = t.y,
          r = t.z;
        return e[0] *= n, e[4] *= i, e[8] *= r, e[1] *= n, e[5] *= i, e[9] *= r, e[2] *= n, e[6] *= i, e[10] *= r, e[3] *= n, e[7] *= i, e[11] *= r, this;
      }
    }, {
      key: "getMaxScaleOnAxis",
      value: function getMaxScaleOnAxis() {
        var t = this.elements,
          e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
          n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
          i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
        return Math.sqrt(Math.max(e, n, i));
      }
    }, {
      key: "makeTranslation",
      value: function makeTranslation(t, e, n) {
        return t.isVector3 ? this.set(1, 0, 0, t.x, 0, 1, 0, t.y, 0, 0, 1, t.z, 0, 0, 0, 1) : this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this;
      }
    }, {
      key: "makeRotationX",
      value: function makeRotationX(t) {
        var e = Math.cos(t),
          n = Math.sin(t);
        return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "makeRotationY",
      value: function makeRotationY(t) {
        var e = Math.cos(t),
          n = Math.sin(t);
        return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "makeRotationZ",
      value: function makeRotationZ(t) {
        var e = Math.cos(t),
          n = Math.sin(t);
        return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "makeRotationAxis",
      value: function makeRotationAxis(t, e) {
        var n = Math.cos(e),
          i = Math.sin(e),
          r = 1 - n,
          s = t.x,
          a = t.y,
          o = t.z,
          l = r * s,
          c = r * a;
        return this.set(l * s + n, l * a - i * o, l * o + i * a, 0, l * a + i * o, c * a + n, c * o - i * s, 0, l * o - i * a, c * o + i * s, r * o * o + n, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "makeScale",
      value: function makeScale(t, e, n) {
        return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "makeShear",
      value: function makeShear(t, e, n, i, r, s) {
        return this.set(1, n, r, 0, t, 1, s, 0, e, i, 1, 0, 0, 0, 0, 1), this;
      }
    }, {
      key: "compose",
      value: function compose(t, e, n) {
        var i = this.elements,
          r = e._x,
          s = e._y,
          a = e._z,
          o = e._w,
          l = r + r,
          c = s + s,
          h = a + a,
          u = r * l,
          d = r * c,
          p = r * h,
          m = s * c,
          f = s * h,
          g = a * h,
          _ = o * l,
          v = o * c,
          y = o * h,
          x = n.x,
          M = n.y,
          S = n.z;
        return i[0] = (1 - (m + g)) * x, i[1] = (d + y) * x, i[2] = (p - v) * x, i[3] = 0, i[4] = (d - y) * M, i[5] = (1 - (u + g)) * M, i[6] = (f + _) * M, i[7] = 0, i[8] = (p + v) * S, i[9] = (f - _) * S, i[10] = (1 - (u + m)) * S, i[11] = 0, i[12] = t.x, i[13] = t.y, i[14] = t.z, i[15] = 1, this;
      }
    }, {
      key: "decompose",
      value: function decompose(t, e, n) {
        var i = this.elements;
        var r = _n.set(i[0], i[1], i[2]).length();
        var s = _n.set(i[4], i[5], i[6]).length(),
          a = _n.set(i[8], i[9], i[10]).length();
        this.determinant() < 0 && (r = -r), t.x = i[12], t.y = i[13], t.z = i[14], vn.copy(this);
        var o = 1 / r,
          l = 1 / s,
          c = 1 / a;
        return vn.elements[0] *= o, vn.elements[1] *= o, vn.elements[2] *= o, vn.elements[4] *= l, vn.elements[5] *= l, vn.elements[6] *= l, vn.elements[8] *= c, vn.elements[9] *= c, vn.elements[10] *= c, e.setFromRotationMatrix(vn), n.x = r, n.y = s, n.z = a, this;
      }
    }, {
      key: "makePerspective",
      value: function makePerspective(t, e, n, i, r, s) {
        var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2e3;
        var o = this.elements,
          l = 2 * r / (e - t),
          c = 2 * r / (n - i),
          h = (e + t) / (e - t),
          u = (n + i) / (n - i);
        var d, p;
        if (a === jt) d = -(s + r) / (s - r), p = -2 * s * r / (s - r);else {
          if (a !== qt) throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + a);
          d = -s / (s - r), p = -s * r / (s - r);
        }
        return o[0] = l, o[4] = 0, o[8] = h, o[12] = 0, o[1] = 0, o[5] = c, o[9] = u, o[13] = 0, o[2] = 0, o[6] = 0, o[10] = d, o[14] = p, o[3] = 0, o[7] = 0, o[11] = -1, o[15] = 0, this;
      }
    }, {
      key: "makeOrthographic",
      value: function makeOrthographic(t, e, n, i, r, s) {
        var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2e3;
        var o = this.elements,
          l = 1 / (e - t),
          c = 1 / (n - i),
          h = 1 / (s - r),
          u = (e + t) * l,
          d = (n + i) * c;
        var p, m;
        if (a === jt) p = (s + r) * h, m = -2 * h;else {
          if (a !== qt) throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + a);
          p = r * h, m = -1 * h;
        }
        return o[0] = 2 * l, o[4] = 0, o[8] = 0, o[12] = -u, o[1] = 0, o[5] = 2 * c, o[9] = 0, o[13] = -d, o[2] = 0, o[6] = 0, o[10] = m, o[14] = -p, o[3] = 0, o[7] = 0, o[11] = 0, o[15] = 1, this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        var e = this.elements,
          n = t.elements;
        for (var _t24 = 0; _t24 < 16; _t24++) if (e[_t24] !== n[_t24]) return !1;
        return !0;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        for (var _n20 = 0; _n20 < 16; _n20++) this.elements[_n20] = t[_n20 + e];
        return this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = this.elements;
        return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t[e + 9] = n[9], t[e + 10] = n[10], t[e + 11] = n[11], t[e + 12] = n[12], t[e + 13] = n[13], t[e + 14] = n[14], t[e + 15] = n[15], t;
      }
    }]);
    return gn;
  }();
  var _n = new ze(),
    vn = new gn(),
    yn = new ze(0, 0, 0),
    xn = new ze(1, 1, 1),
    Mn = new ze(),
    Sn = new ze(),
    bn = new ze(),
    Tn = new gn(),
    En = new Be();
  var wn = /*#__PURE__*/function (_Symbol$iterator5) {
    function wn() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : wn.DEFAULT_ORDER;
      _classCallCheck(this, wn);
      this.isEuler = !0, this._x = t, this._y = e, this._z = n, this._order = i;
    }
    _createClass(wn, [{
      key: "x",
      get: function get() {
        return this._x;
      },
      set: function set(t) {
        this._x = t, this._onChangeCallback();
      }
    }, {
      key: "y",
      get: function get() {
        return this._y;
      },
      set: function set(t) {
        this._y = t, this._onChangeCallback();
      }
    }, {
      key: "z",
      get: function get() {
        return this._z;
      },
      set: function set(t) {
        this._z = t, this._onChangeCallback();
      }
    }, {
      key: "order",
      get: function get() {
        return this._order;
      },
      set: function set(t) {
        this._order = t, this._onChangeCallback();
      }
    }, {
      key: "set",
      value: function set(t, e, n) {
        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._order;
        return this._x = t, this._y = e, this._z = n, this._order = i, this._onChangeCallback(), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this._x = t._x, this._y = t._y, this._z = t._z, this._order = t._order, this._onChangeCallback(), this;
      }
    }, {
      key: "setFromRotationMatrix",
      value: function setFromRotationMatrix(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
        var i = t.elements,
          r = i[0],
          s = i[4],
          a = i[8],
          o = i[1],
          l = i[5],
          c = i[9],
          h = i[2],
          u = i[6],
          d = i[10];
        switch (e) {
          case "XYZ":
            this._y = Math.asin(te(a, -1, 1)), Math.abs(a) < .9999999 ? (this._x = Math.atan2(-c, d), this._z = Math.atan2(-s, r)) : (this._x = Math.atan2(u, l), this._z = 0);
            break;
          case "YXZ":
            this._x = Math.asin(-te(c, -1, 1)), Math.abs(c) < .9999999 ? (this._y = Math.atan2(a, d), this._z = Math.atan2(o, l)) : (this._y = Math.atan2(-h, r), this._z = 0);
            break;
          case "ZXY":
            this._x = Math.asin(te(u, -1, 1)), Math.abs(u) < .9999999 ? (this._y = Math.atan2(-h, d), this._z = Math.atan2(-s, l)) : (this._y = 0, this._z = Math.atan2(o, r));
            break;
          case "ZYX":
            this._y = Math.asin(-te(h, -1, 1)), Math.abs(h) < .9999999 ? (this._x = Math.atan2(u, d), this._z = Math.atan2(o, r)) : (this._x = 0, this._z = Math.atan2(-s, l));
            break;
          case "YZX":
            this._z = Math.asin(te(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(-c, l), this._y = Math.atan2(-h, r)) : (this._x = 0, this._y = Math.atan2(a, d));
            break;
          case "XZY":
            this._z = Math.asin(-te(s, -1, 1)), Math.abs(s) < .9999999 ? (this._x = Math.atan2(u, l), this._y = Math.atan2(a, r)) : (this._x = Math.atan2(-c, d), this._y = 0);
            break;
          default:
            console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e);
        }
        return this._order = e, !0 === n && this._onChangeCallback(), this;
      }
    }, {
      key: "setFromQuaternion",
      value: function setFromQuaternion(t, e, n) {
        return Tn.makeRotationFromQuaternion(t), this.setFromRotationMatrix(Tn, e, n);
      }
    }, {
      key: "setFromVector3",
      value: function setFromVector3(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;
        return this.set(t.x, t.y, t.z, e);
      }
    }, {
      key: "reorder",
      value: function reorder(t) {
        return En.setFromEuler(this), this.setFromQuaternion(En, t);
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        return this._x = t[0], this._y = t[1], this._z = t[2], void 0 !== t[3] && (this._order = t[3]), this._onChangeCallback(), this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._order, t;
      }
    }, {
      key: "_onChange",
      value: function _onChange(t) {
        return this._onChangeCallback = t, this;
      }
    }, {
      key: "_onChangeCallback",
      value: function _onChangeCallback() {}
    }, {
      key: _Symbol$iterator5,
      value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
        return _regeneratorRuntime().wrap(function value$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this._x;
            case 2:
              _context5.next = 4;
              return this._y;
            case 4:
              _context5.next = 6;
              return this._z;
            case 6:
              _context5.next = 8;
              return this._order;
            case 8:
            case "end":
              return _context5.stop();
          }
        }, value, this);
      })
    }]);
    return wn;
  }(Symbol.iterator);
  wn.DEFAULT_ORDER = "XYZ";
  var An = /*#__PURE__*/function () {
    function An() {
      _classCallCheck(this, An);
      this.mask = 1;
    }
    _createClass(An, [{
      key: "set",
      value: function set(t) {
        this.mask = (1 << t | 0) >>> 0;
      }
    }, {
      key: "enable",
      value: function enable(t) {
        this.mask |= 1 << t | 0;
      }
    }, {
      key: "enableAll",
      value: function enableAll() {
        this.mask = -1;
      }
    }, {
      key: "toggle",
      value: function toggle(t) {
        this.mask ^= 1 << t | 0;
      }
    }, {
      key: "disable",
      value: function disable(t) {
        this.mask &= ~(1 << t | 0);
      }
    }, {
      key: "disableAll",
      value: function disableAll() {
        this.mask = 0;
      }
    }, {
      key: "test",
      value: function test(t) {
        return 0 != (this.mask & t.mask);
      }
    }, {
      key: "isEnabled",
      value: function isEnabled(t) {
        return 0 != (this.mask & (1 << t | 0));
      }
    }]);
    return An;
  }();
  var Rn = 0;
  var Cn = new ze(),
    Ln = new Be(),
    Pn = new gn(),
    In = new ze(),
    Un = new ze(),
    Dn = new ze(),
    Nn = new Be(),
    On = new ze(1, 0, 0),
    Fn = new ze(0, 1, 0),
    Bn = new ze(0, 0, 1),
    zn = {
      type: "added"
    },
    Hn = {
      type: "removed"
    };
  var Gn = /*#__PURE__*/function (_Yt3) {
    _inherits(Gn, _Yt3);
    var _super6 = _createSuper(Gn);
    function Gn() {
      var _this6;
      _classCallCheck(this, Gn);
      _this6 = _super6.call(this), _this6.isObject3D = !0, Object.defineProperty(_assertThisInitialized(_this6), "id", {
        value: Rn++
      }), _this6.uuid = Qt(), _this6.name = "", _this6.type = "Object3D", _this6.parent = null, _this6.children = [], _this6.up = Gn.DEFAULT_UP.clone();
      var t = new ze(),
        e = new wn(),
        n = new Be(),
        i = new ze(1, 1, 1);
      e._onChange(function () {
        n.setFromEuler(e, !1);
      }), n._onChange(function () {
        e.setFromQuaternion(n, void 0, !1);
      }), Object.defineProperties(_assertThisInitialized(_this6), {
        position: {
          configurable: !0,
          enumerable: !0,
          value: t
        },
        rotation: {
          configurable: !0,
          enumerable: !0,
          value: e
        },
        quaternion: {
          configurable: !0,
          enumerable: !0,
          value: n
        },
        scale: {
          configurable: !0,
          enumerable: !0,
          value: i
        },
        modelViewMatrix: {
          value: new gn()
        },
        normalMatrix: {
          value: new he()
        }
      }), _this6.matrix = new gn(), _this6.matrixWorld = new gn(), _this6.matrixAutoUpdate = Gn.DEFAULT_MATRIX_AUTO_UPDATE, _this6.matrixWorldNeedsUpdate = !1, _this6.matrixWorldAutoUpdate = Gn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, _this6.layers = new An(), _this6.visible = !0, _this6.castShadow = !1, _this6.receiveShadow = !1, _this6.frustumCulled = !0, _this6.renderOrder = 0, _this6.animations = [], _this6.userData = {};
      return _this6;
    }
    _createClass(Gn, [{
      key: "onBeforeRender",
      value: function onBeforeRender() {}
    }, {
      key: "onAfterRender",
      value: function onAfterRender() {}
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale);
      }
    }, {
      key: "applyQuaternion",
      value: function applyQuaternion(t) {
        return this.quaternion.premultiply(t), this;
      }
    }, {
      key: "setRotationFromAxisAngle",
      value: function setRotationFromAxisAngle(t, e) {
        this.quaternion.setFromAxisAngle(t, e);
      }
    }, {
      key: "setRotationFromEuler",
      value: function setRotationFromEuler(t) {
        this.quaternion.setFromEuler(t, !0);
      }
    }, {
      key: "setRotationFromMatrix",
      value: function setRotationFromMatrix(t) {
        this.quaternion.setFromRotationMatrix(t);
      }
    }, {
      key: "setRotationFromQuaternion",
      value: function setRotationFromQuaternion(t) {
        this.quaternion.copy(t);
      }
    }, {
      key: "rotateOnAxis",
      value: function rotateOnAxis(t, e) {
        return Ln.setFromAxisAngle(t, e), this.quaternion.multiply(Ln), this;
      }
    }, {
      key: "rotateOnWorldAxis",
      value: function rotateOnWorldAxis(t, e) {
        return Ln.setFromAxisAngle(t, e), this.quaternion.premultiply(Ln), this;
      }
    }, {
      key: "rotateX",
      value: function rotateX(t) {
        return this.rotateOnAxis(On, t);
      }
    }, {
      key: "rotateY",
      value: function rotateY(t) {
        return this.rotateOnAxis(Fn, t);
      }
    }, {
      key: "rotateZ",
      value: function rotateZ(t) {
        return this.rotateOnAxis(Bn, t);
      }
    }, {
      key: "translateOnAxis",
      value: function translateOnAxis(t, e) {
        return Cn.copy(t).applyQuaternion(this.quaternion), this.position.add(Cn.multiplyScalar(e)), this;
      }
    }, {
      key: "translateX",
      value: function translateX(t) {
        return this.translateOnAxis(On, t);
      }
    }, {
      key: "translateY",
      value: function translateY(t) {
        return this.translateOnAxis(Fn, t);
      }
    }, {
      key: "translateZ",
      value: function translateZ(t) {
        return this.translateOnAxis(Bn, t);
      }
    }, {
      key: "localToWorld",
      value: function localToWorld(t) {
        return this.updateWorldMatrix(!0, !1), t.applyMatrix4(this.matrixWorld);
      }
    }, {
      key: "worldToLocal",
      value: function worldToLocal(t) {
        return this.updateWorldMatrix(!0, !1), t.applyMatrix4(Pn.copy(this.matrixWorld).invert());
      }
    }, {
      key: "lookAt",
      value: function lookAt(t, e, n) {
        t.isVector3 ? In.copy(t) : In.set(t, e, n);
        var i = this.parent;
        this.updateWorldMatrix(!0, !1), Un.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Pn.lookAt(Un, In, this.up) : Pn.lookAt(In, Un, this.up), this.quaternion.setFromRotationMatrix(Pn), i && (Pn.extractRotation(i.matrixWorld), Ln.setFromRotationMatrix(Pn), this.quaternion.premultiply(Ln.invert()));
      }
    }, {
      key: "add",
      value: function add(t) {
        if (arguments.length > 1) {
          for (var _t25 = 0; _t25 < arguments.length; _t25++) this.add(arguments[_t25]);
          return this;
        }
        return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this) : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t), t.parent = this, this.children.push(t), t.dispatchEvent(zn)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t), this);
      }
    }, {
      key: "remove",
      value: function remove(t) {
        if (arguments.length > 1) {
          for (var _t26 = 0; _t26 < arguments.length; _t26++) this.remove(arguments[_t26]);
          return this;
        }
        var e = this.children.indexOf(t);
        return -1 !== e && (t.parent = null, this.children.splice(e, 1), t.dispatchEvent(Hn)), this;
      }
    }, {
      key: "removeFromParent",
      value: function removeFromParent() {
        var t = this.parent;
        return null !== t && t.remove(this), this;
      }
    }, {
      key: "clear",
      value: function clear() {
        return this.remove.apply(this, _toConsumableArray(this.children));
      }
    }, {
      key: "attach",
      value: function attach(t) {
        return this.updateWorldMatrix(!0, !1), Pn.copy(this.matrixWorld).invert(), null !== t.parent && (t.parent.updateWorldMatrix(!0, !1), Pn.multiply(t.parent.matrixWorld)), t.applyMatrix4(Pn), this.add(t), t.updateWorldMatrix(!1, !0), this;
      }
    }, {
      key: "getObjectById",
      value: function getObjectById(t) {
        return this.getObjectByProperty("id", t);
      }
    }, {
      key: "getObjectByName",
      value: function getObjectByName(t) {
        return this.getObjectByProperty("name", t);
      }
    }, {
      key: "getObjectByProperty",
      value: function getObjectByProperty(t, e) {
        if (this[t] === e) return this;
        for (var _n21 = 0, _i13 = this.children.length; _n21 < _i13; _n21++) {
          var _i14 = this.children[_n21].getObjectByProperty(t, e);
          if (void 0 !== _i14) return _i14;
        }
      }
    }, {
      key: "getObjectsByProperty",
      value: function getObjectsByProperty(t, e) {
        var n = [];
        this[t] === e && n.push(this);
        for (var _i15 = 0, _r12 = this.children.length; _i15 < _r12; _i15++) {
          var _r13 = this.children[_i15].getObjectsByProperty(t, e);
          _r13.length > 0 && (n = n.concat(_r13));
        }
        return n;
      }
    }, {
      key: "getWorldPosition",
      value: function getWorldPosition(t) {
        return this.updateWorldMatrix(!0, !1), t.setFromMatrixPosition(this.matrixWorld);
      }
    }, {
      key: "getWorldQuaternion",
      value: function getWorldQuaternion(t) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Un, t, Dn), t;
      }
    }, {
      key: "getWorldScale",
      value: function getWorldScale(t) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Un, Nn, t), t;
      }
    }, {
      key: "getWorldDirection",
      value: function getWorldDirection(t) {
        this.updateWorldMatrix(!0, !1);
        var e = this.matrixWorld.elements;
        return t.set(e[8], e[9], e[10]).normalize();
      }
    }, {
      key: "raycast",
      value: function raycast() {}
    }, {
      key: "traverse",
      value: function traverse(t) {
        t(this);
        var e = this.children;
        for (var _n22 = 0, _i16 = e.length; _n22 < _i16; _n22++) e[_n22].traverse(t);
      }
    }, {
      key: "traverseVisible",
      value: function traverseVisible(t) {
        if (!1 === this.visible) return;
        t(this);
        var e = this.children;
        for (var _n23 = 0, _i17 = e.length; _n23 < _i17; _n23++) e[_n23].traverseVisible(t);
      }
    }, {
      key: "traverseAncestors",
      value: function traverseAncestors(t) {
        var e = this.parent;
        null !== e && (t(e), e.traverseAncestors(t));
      }
    }, {
      key: "updateMatrix",
      value: function updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
      }
    }, {
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, t = !0);
        var e = this.children;
        for (var _n24 = 0, _i18 = e.length; _n24 < _i18; _n24++) {
          var _i19 = e[_n24];
          !0 !== _i19.matrixWorldAutoUpdate && !0 !== t || _i19.updateMatrixWorld(t);
        }
      }
    }, {
      key: "updateWorldMatrix",
      value: function updateWorldMatrix(t, e) {
        var n = this.parent;
        if (!0 === t && null !== n && !0 === n.matrixWorldAutoUpdate && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), !0 === e) {
          var _t27 = this.children;
          for (var _e13 = 0, _n25 = _t27.length; _e13 < _n25; _e13++) {
            var _n26 = _t27[_e13];
            !0 === _n26.matrixWorldAutoUpdate && _n26.updateWorldMatrix(!1, !0);
          }
        }
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = void 0 === t || "string" == typeof t,
          n = {};
        e && (t = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        }, n.metadata = {
          version: 4.6,
          type: "Object",
          generator: "Object3D.toJSON"
        });
        var i = {};
        function r(e, n) {
          return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid;
        }
        if (i.uuid = this.uuid, i.type = this.type, "" !== this.name && (i.name = this.name), !0 === this.castShadow && (i.castShadow = !0), !0 === this.receiveShadow && (i.receiveShadow = !0), !1 === this.visible && (i.visible = !1), !1 === this.frustumCulled && (i.frustumCulled = !1), 0 !== this.renderOrder && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), i.up = this.up.toArray(), !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), null !== this.instanceColor && (i.instanceColor = this.instanceColor.toJSON())), this.isScene) this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(t).uuid)), this.environment && this.environment.isTexture && !0 !== this.environment.isRenderTargetTexture && (i.environment = this.environment.toJSON(t).uuid);else if (this.isMesh || this.isLine || this.isPoints) {
          i.geometry = r(t.geometries, this.geometry);
          var _e14 = this.geometry.parameters;
          if (void 0 !== _e14 && void 0 !== _e14.shapes) {
            var _n27 = _e14.shapes;
            if (Array.isArray(_n27)) for (var _e15 = 0, _i20 = _n27.length; _e15 < _i20; _e15++) {
              var _i21 = _n27[_e15];
              r(t.shapes, _i21);
            } else r(t.shapes, _n27);
          }
        }
        if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), void 0 !== this.skeleton && (r(t.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), void 0 !== this.material) if (Array.isArray(this.material)) {
          var _e16 = [];
          for (var _n28 = 0, _i22 = this.material.length; _n28 < _i22; _n28++) _e16.push(r(t.materials, this.material[_n28]));
          i.material = _e16;
        } else i.material = r(t.materials, this.material);
        if (this.children.length > 0) {
          i.children = [];
          for (var _e17 = 0; _e17 < this.children.length; _e17++) i.children.push(this.children[_e17].toJSON(t).object);
        }
        if (this.animations.length > 0) {
          i.animations = [];
          for (var _e18 = 0; _e18 < this.animations.length; _e18++) {
            var _n29 = this.animations[_e18];
            i.animations.push(r(t.animations, _n29));
          }
        }
        if (e) {
          var _e19 = s(t.geometries),
            _i23 = s(t.materials),
            _r14 = s(t.textures),
            _a4 = s(t.images),
            _o4 = s(t.shapes),
            _l3 = s(t.skeletons),
            _c3 = s(t.animations),
            _h2 = s(t.nodes);
          _e19.length > 0 && (n.geometries = _e19), _i23.length > 0 && (n.materials = _i23), _r14.length > 0 && (n.textures = _r14), _a4.length > 0 && (n.images = _a4), _o4.length > 0 && (n.shapes = _o4), _l3.length > 0 && (n.skeletons = _l3), _c3.length > 0 && (n.animations = _c3), _h2.length > 0 && (n.nodes = _h2);
        }
        return n.object = i, n;
        function s(t) {
          var e = [];
          for (var _n30 in t) {
            var _i24 = t[_n30];
            delete _i24.metadata, e.push(_i24);
          }
          return e;
        }
      }
    }, {
      key: "clone",
      value: function clone(t) {
        return new this.constructor().copy(this, t);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        if (this.name = t.name, this.up.copy(t.up), this.position.copy(t.position), this.rotation.order = t.rotation.order, this.quaternion.copy(t.quaternion), this.scale.copy(t.scale), this.matrix.copy(t.matrix), this.matrixWorld.copy(t.matrixWorld), this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = t.matrixWorldAutoUpdate, this.layers.mask = t.layers.mask, this.visible = t.visible, this.castShadow = t.castShadow, this.receiveShadow = t.receiveShadow, this.frustumCulled = t.frustumCulled, this.renderOrder = t.renderOrder, this.animations = t.animations.slice(), this.userData = JSON.parse(JSON.stringify(t.userData)), !0 === e) for (var _e20 = 0; _e20 < t.children.length; _e20++) {
          var _n31 = t.children[_e20];
          this.add(_n31.clone());
        }
        return this;
      }
    }]);
    return Gn;
  }(Yt);
  Gn.DEFAULT_UP = new ze(0, 1, 0), Gn.DEFAULT_MATRIX_AUTO_UPDATE = !0, Gn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
  var Vn = new ze(),
    kn = new ze(),
    Wn = new ze(),
    Xn = new ze(),
    jn = new ze(),
    qn = new ze(),
    Yn = new ze(),
    Zn = new ze(),
    Jn = new ze(),
    Kn = new ze();
  var $n = !1;
  var Qn = /*#__PURE__*/function () {
    function Qn() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ze();
      _classCallCheck(this, Qn);
      this.a = t, this.b = e, this.c = n;
    }
    _createClass(Qn, [{
      key: "set",
      value: function set(t, e, n) {
        return this.a.copy(t), this.b.copy(e), this.c.copy(n), this;
      }
    }, {
      key: "setFromPointsAndIndices",
      value: function setFromPointsAndIndices(t, e, n, i) {
        return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[i]), this;
      }
    }, {
      key: "setFromAttributeAndIndices",
      value: function setFromAttributeAndIndices(t, e, n, i) {
        return this.a.fromBufferAttribute(t, e), this.b.fromBufferAttribute(t, n), this.c.fromBufferAttribute(t, i), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this;
      }
    }, {
      key: "getArea",
      value: function getArea() {
        return Vn.subVectors(this.c, this.b), kn.subVectors(this.a, this.b), .5 * Vn.cross(kn).length();
      }
    }, {
      key: "getMidpoint",
      value: function getMidpoint(t) {
        return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
      }
    }, {
      key: "getNormal",
      value: function getNormal(t) {
        return Qn.getNormal(this.a, this.b, this.c, t);
      }
    }, {
      key: "getPlane",
      value: function getPlane(t) {
        return t.setFromCoplanarPoints(this.a, this.b, this.c);
      }
    }, {
      key: "getBarycoord",
      value: function getBarycoord(t, e) {
        return Qn.getBarycoord(t, this.a, this.b, this.c, e);
      }
    }, {
      key: "getUV",
      value: function getUV(t, e, n, i, r) {
        return !1 === $n && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), $n = !0), Qn.getInterpolation(t, this.a, this.b, this.c, e, n, i, r);
      }
    }, {
      key: "getInterpolation",
      value: function getInterpolation(t, e, n, i, r) {
        return Qn.getInterpolation(t, this.a, this.b, this.c, e, n, i, r);
      }
    }, {
      key: "containsPoint",
      value: function containsPoint(t) {
        return Qn.containsPoint(t, this.a, this.b, this.c);
      }
    }, {
      key: "isFrontFacing",
      value: function isFrontFacing(t) {
        return Qn.isFrontFacing(this.a, this.b, this.c, t);
      }
    }, {
      key: "intersectsBox",
      value: function intersectsBox(t) {
        return t.intersectsTriangle(this);
      }
    }, {
      key: "closestPointToPoint",
      value: function closestPointToPoint(t, e) {
        var n = this.a,
          i = this.b,
          r = this.c;
        var s, a;
        jn.subVectors(i, n), qn.subVectors(r, n), Zn.subVectors(t, n);
        var o = jn.dot(Zn),
          l = qn.dot(Zn);
        if (o <= 0 && l <= 0) return e.copy(n);
        Jn.subVectors(t, i);
        var c = jn.dot(Jn),
          h = qn.dot(Jn);
        if (c >= 0 && h <= c) return e.copy(i);
        var u = o * h - c * l;
        if (u <= 0 && o >= 0 && c <= 0) return s = o / (o - c), e.copy(n).addScaledVector(jn, s);
        Kn.subVectors(t, r);
        var d = jn.dot(Kn),
          p = qn.dot(Kn);
        if (p >= 0 && d <= p) return e.copy(r);
        var m = d * l - o * p;
        if (m <= 0 && l >= 0 && p <= 0) return a = l / (l - p), e.copy(n).addScaledVector(qn, a);
        var f = c * p - d * h;
        if (f <= 0 && h - c >= 0 && d - p >= 0) return Yn.subVectors(r, i), a = (h - c) / (h - c + (d - p)), e.copy(i).addScaledVector(Yn, a);
        var g = 1 / (f + m + u);
        return s = m * g, a = u * g, e.copy(n).addScaledVector(jn, s).addScaledVector(qn, a);
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c);
      }
    }], [{
      key: "getNormal",
      value: function getNormal(t, e, n, i) {
        i.subVectors(n, e), Vn.subVectors(t, e), i.cross(Vn);
        var r = i.lengthSq();
        return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0);
      }
    }, {
      key: "getBarycoord",
      value: function getBarycoord(t, e, n, i, r) {
        Vn.subVectors(i, e), kn.subVectors(n, e), Wn.subVectors(t, e);
        var s = Vn.dot(Vn),
          a = Vn.dot(kn),
          o = Vn.dot(Wn),
          l = kn.dot(kn),
          c = kn.dot(Wn),
          h = s * l - a * a;
        if (0 === h) return r.set(-2, -1, -1);
        var u = 1 / h,
          d = (l * o - a * c) * u,
          p = (s * c - a * o) * u;
        return r.set(1 - d - p, p, d);
      }
    }, {
      key: "containsPoint",
      value: function containsPoint(t, e, n, i) {
        return this.getBarycoord(t, e, n, i, Xn), Xn.x >= 0 && Xn.y >= 0 && Xn.x + Xn.y <= 1;
      }
    }, {
      key: "getUV",
      value: function getUV(t, e, n, i, r, s, a, o) {
        return !1 === $n && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), $n = !0), this.getInterpolation(t, e, n, i, r, s, a, o);
      }
    }, {
      key: "getInterpolation",
      value: function getInterpolation(t, e, n, i, r, s, a, o) {
        return this.getBarycoord(t, e, n, i, Xn), o.setScalar(0), o.addScaledVector(r, Xn.x), o.addScaledVector(s, Xn.y), o.addScaledVector(a, Xn.z), o;
      }
    }, {
      key: "isFrontFacing",
      value: function isFrontFacing(t, e, n, i) {
        return Vn.subVectors(n, e), kn.subVectors(t, e), Vn.cross(kn).dot(i) < 0;
      }
    }]);
    return Qn;
  }();
  var ti = 0;
  var ei = /*#__PURE__*/function (_Yt4) {
    _inherits(ei, _Yt4);
    var _super7 = _createSuper(ei);
    function ei() {
      var _this7;
      _classCallCheck(this, ei);
      _this7 = _super7.call(this), _this7.isMaterial = !0, Object.defineProperty(_assertThisInitialized(_this7), "id", {
        value: ti++
      }), _this7.uuid = Qt(), _this7.name = "", _this7.type = "Material", _this7.blending = 1, _this7.side = s, _this7.vertexColors = !1, _this7.opacity = 1, _this7.transparent = !1, _this7.alphaHash = !1, _this7.blendSrc = 204, _this7.blendDst = 205, _this7.blendEquation = o, _this7.blendSrcAlpha = null, _this7.blendDstAlpha = null, _this7.blendEquationAlpha = null, _this7.depthFunc = 3, _this7.depthTest = !0, _this7.depthWrite = !0, _this7.stencilWriteMask = 255, _this7.stencilFunc = 519, _this7.stencilRef = 0, _this7.stencilFuncMask = 255, _this7.stencilFail = Vt, _this7.stencilZFail = Vt, _this7.stencilZPass = Vt, _this7.stencilWrite = !1, _this7.clippingPlanes = null, _this7.clipIntersection = !1, _this7.clipShadows = !1, _this7.shadowSide = null, _this7.colorWrite = !0, _this7.precision = null, _this7.polygonOffset = !1, _this7.polygonOffsetFactor = 0, _this7.polygonOffsetUnits = 0, _this7.dithering = !1, _this7.alphaToCoverage = !1, _this7.premultipliedAlpha = !1, _this7.forceSinglePass = !1, _this7.visible = !0, _this7.toneMapped = !0, _this7.userData = {}, _this7.version = 0, _this7._alphaTest = 0;
      return _this7;
    }
    _createClass(ei, [{
      key: "alphaTest",
      get: function get() {
        return this._alphaTest;
      },
      set: function set(t) {
        this._alphaTest > 0 != t > 0 && this.version++, this._alphaTest = t;
      }
    }, {
      key: "onBuild",
      value: function onBuild() {}
    }, {
      key: "onBeforeRender",
      value: function onBeforeRender() {}
    }, {
      key: "onBeforeCompile",
      value: function onBeforeCompile() {}
    }, {
      key: "customProgramCacheKey",
      value: function customProgramCacheKey() {
        return this.onBeforeCompile.toString();
      }
    }, {
      key: "setValues",
      value: function setValues(t) {
        if (void 0 !== t) for (var _e21 in t) {
          var _n32 = t[_e21];
          if (void 0 === _n32) {
            console.warn("THREE.Material: parameter '".concat(_e21, "' has value of undefined."));
            continue;
          }
          var _i25 = this[_e21];
          void 0 !== _i25 ? _i25 && _i25.isColor ? _i25.set(_n32) : _i25 && _i25.isVector3 && _n32 && _n32.isVector3 ? _i25.copy(_n32) : this[_e21] = _n32 : console.warn("THREE.Material: '".concat(_e21, "' is not a property of THREE.").concat(this.type, "."));
        }
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = void 0 === t || "string" == typeof t;
        e && (t = {
          textures: {},
          images: {}
        });
        var n = {
          metadata: {
            version: 4.6,
            type: "Material",
            generator: "Material.toJSON"
          }
        };
        function i(t) {
          var e = [];
          for (var _n33 in t) {
            var _i26 = t[_n33];
            delete _i26.metadata, e.push(_i26);
          }
          return e;
        }
        if (n.uuid = this.uuid, n.type = this.type, "" !== this.name && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), void 0 !== this.roughness && (n.roughness = this.roughness), void 0 !== this.metalness && (n.metalness = this.metalness), void 0 !== this.sheen && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), void 0 !== this.sheenRoughness && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), void 0 !== this.specularIntensity && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), void 0 !== this.shininess && (n.shininess = this.shininess), void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat), void 0 !== this.clearcoatRoughness && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), void 0 !== this.iridescence && (n.iridescence = this.iridescence), void 0 !== this.iridescenceIOR && (n.iridescenceIOR = this.iridescenceIOR), void 0 !== this.iridescenceThicknessRange && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(t).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(t).uuid), void 0 !== this.anisotropy && (n.anisotropy = this.anisotropy), void 0 !== this.anisotropyRotation && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(t).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(t).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(t).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid, void 0 !== this.combine && (n.combine = this.combine)), void 0 !== this.envMapIntensity && (n.envMapIntensity = this.envMapIntensity), void 0 !== this.reflectivity && (n.reflectivity = this.reflectivity), void 0 !== this.refractionRatio && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid), void 0 !== this.transmission && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(t).uuid), void 0 !== this.thickness && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(t).uuid), void 0 !== this.attenuationDistance && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), void 0 !== this.attenuationColor && (n.attenuationColor = this.attenuationColor.getHex()), void 0 !== this.size && (n.size = this.size), null !== this.shadowSide && (n.shadowSide = this.shadowSide), void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation), 1 !== this.blending && (n.blending = this.blending), this.side !== s && (n.side = this.side), !0 === this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), !0 === this.transparent && (n.transparent = !0), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, void 0 !== this.rotation && 0 !== this.rotation && (n.rotation = this.rotation), !0 === this.polygonOffset && (n.polygonOffset = !0), 0 !== this.polygonOffsetFactor && (n.polygonOffsetFactor = this.polygonOffsetFactor), 0 !== this.polygonOffsetUnits && (n.polygonOffsetUnits = this.polygonOffsetUnits), void 0 !== this.linewidth && 1 !== this.linewidth && (n.linewidth = this.linewidth), void 0 !== this.dashSize && (n.dashSize = this.dashSize), void 0 !== this.gapSize && (n.gapSize = this.gapSize), void 0 !== this.scale && (n.scale = this.scale), !0 === this.dithering && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), !0 === this.alphaHash && (n.alphaHash = !0), !0 === this.alphaToCoverage && (n.alphaToCoverage = !0), !0 === this.premultipliedAlpha && (n.premultipliedAlpha = !0), !0 === this.forceSinglePass && (n.forceSinglePass = !0), !0 === this.wireframe && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap), "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin), !0 === this.flatShading && (n.flatShading = !0), !1 === this.visible && (n.visible = !1), !1 === this.toneMapped && (n.toneMapped = !1), !1 === this.fog && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData), e) {
          var _e22 = i(t.textures),
            _r15 = i(t.images);
          _e22.length > 0 && (n.textures = _e22), _r15.length > 0 && (n.images = _r15);
        }
        return n;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        this.name = t.name, this.blending = t.blending, this.side = t.side, this.vertexColors = t.vertexColors, this.opacity = t.opacity, this.transparent = t.transparent, this.blendSrc = t.blendSrc, this.blendDst = t.blendDst, this.blendEquation = t.blendEquation, this.blendSrcAlpha = t.blendSrcAlpha, this.blendDstAlpha = t.blendDstAlpha, this.blendEquationAlpha = t.blendEquationAlpha, this.depthFunc = t.depthFunc, this.depthTest = t.depthTest, this.depthWrite = t.depthWrite, this.stencilWriteMask = t.stencilWriteMask, this.stencilFunc = t.stencilFunc, this.stencilRef = t.stencilRef, this.stencilFuncMask = t.stencilFuncMask, this.stencilFail = t.stencilFail, this.stencilZFail = t.stencilZFail, this.stencilZPass = t.stencilZPass, this.stencilWrite = t.stencilWrite;
        var e = t.clippingPlanes;
        var n = null;
        if (null !== e) {
          var _t28 = e.length;
          n = new Array(_t28);
          for (var _i27 = 0; _i27 !== _t28; ++_i27) n[_i27] = e[_i27].clone();
        }
        return this.clippingPlanes = n, this.clipIntersection = t.clipIntersection, this.clipShadows = t.clipShadows, this.shadowSide = t.shadowSide, this.colorWrite = t.colorWrite, this.precision = t.precision, this.polygonOffset = t.polygonOffset, this.polygonOffsetFactor = t.polygonOffsetFactor, this.polygonOffsetUnits = t.polygonOffsetUnits, this.dithering = t.dithering, this.alphaTest = t.alphaTest, this.alphaHash = t.alphaHash, this.alphaToCoverage = t.alphaToCoverage, this.premultipliedAlpha = t.premultipliedAlpha, this.forceSinglePass = t.forceSinglePass, this.visible = t.visible, this.toneMapped = t.toneMapped, this.userData = JSON.parse(JSON.stringify(t.userData)), this;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    }, {
      key: "needsUpdate",
      set: function set(t) {
        !0 === t && this.version++;
      }
    }]);
    return ei;
  }(Yt);
  var ni = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    },
    ii = {
      h: 0,
      s: 0,
      l: 0
    },
    ri = {
      h: 0,
      s: 0,
      l: 0
    };
  function si(t, e, n) {
    return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < .5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t;
  }
  var ai = /*#__PURE__*/function (_Symbol$iterator6) {
    function ai(t, e, n) {
      _classCallCheck(this, ai);
      return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(t, e, n);
    }
    _createClass(ai, [{
      key: "set",
      value: function set(t, e, n) {
        if (void 0 === e && void 0 === n) {
          var _e23 = t;
          _e23 && _e23.isColor ? this.copy(_e23) : "number" == typeof _e23 ? this.setHex(_e23) : "string" == typeof _e23 && this.setStyle(_e23);
        } else this.setRGB(t, e, n);
        return this;
      }
    }, {
      key: "setScalar",
      value: function setScalar(t) {
        return this.r = t, this.g = t, this.b = t, this;
      }
    }, {
      key: "setHex",
      value: function setHex(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Dt;
        return t = Math.floor(t), this.r = (t >> 16 & 255) / 255, this.g = (t >> 8 & 255) / 255, this.b = (255 & t) / 255, be.toWorkingColorSpace(this, e), this;
      }
    }, {
      key: "setRGB",
      value: function setRGB(t, e, n) {
        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : be.workingColorSpace;
        return this.r = t, this.g = e, this.b = n, be.toWorkingColorSpace(this, i), this;
      }
    }, {
      key: "setHSL",
      value: function setHSL(t, e, n) {
        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : be.workingColorSpace;
        if (t = ee(t, 1), e = te(e, 0, 1), n = te(n, 0, 1), 0 === e) this.r = this.g = this.b = n;else {
          var _i28 = n <= .5 ? n * (1 + e) : n + e - n * e,
            _r16 = 2 * n - _i28;
          this.r = si(_r16, _i28, t + 1 / 3), this.g = si(_r16, _i28, t), this.b = si(_r16, _i28, t - 1 / 3);
        }
        return be.toWorkingColorSpace(this, i), this;
      }
    }, {
      key: "setStyle",
      value: function setStyle(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Dt;
        function n(e) {
          void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.");
        }
        var i;
        if (i = /^(\w+)\(([^\)]*)\)/.exec(t)) {
          var _r17;
          var _s4 = i[1],
            _a5 = i[2];
          switch (_s4) {
            case "rgb":
            case "rgba":
              if (_r17 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_a5)) return n(_r17[4]), this.setRGB(Math.min(255, parseInt(_r17[1], 10)) / 255, Math.min(255, parseInt(_r17[2], 10)) / 255, Math.min(255, parseInt(_r17[3], 10)) / 255, e);
              if (_r17 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_a5)) return n(_r17[4]), this.setRGB(Math.min(100, parseInt(_r17[1], 10)) / 100, Math.min(100, parseInt(_r17[2], 10)) / 100, Math.min(100, parseInt(_r17[3], 10)) / 100, e);
              break;
            case "hsl":
            case "hsla":
              if (_r17 = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_a5)) return n(_r17[4]), this.setHSL(parseFloat(_r17[1]) / 360, parseFloat(_r17[2]) / 100, parseFloat(_r17[3]) / 100, e);
              break;
            default:
              console.warn("THREE.Color: Unknown color model " + t);
          }
        } else if (i = /^\#([A-Fa-f\d]+)$/.exec(t)) {
          var _n34 = i[1],
            _r18 = _n34.length;
          if (3 === _r18) return this.setRGB(parseInt(_n34.charAt(0), 16) / 15, parseInt(_n34.charAt(1), 16) / 15, parseInt(_n34.charAt(2), 16) / 15, e);
          if (6 === _r18) return this.setHex(parseInt(_n34, 16), e);
          console.warn("THREE.Color: Invalid hex color " + t);
        } else if (t && t.length > 0) return this.setColorName(t, e);
        return this;
      }
    }, {
      key: "setColorName",
      value: function setColorName(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Dt;
        var n = ni[t.toLowerCase()];
        return void 0 !== n ? this.setHex(n, e) : console.warn("THREE.Color: Unknown color " + t), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor(this.r, this.g, this.b);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.r = t.r, this.g = t.g, this.b = t.b, this;
      }
    }, {
      key: "copySRGBToLinear",
      value: function copySRGBToLinear(t) {
        return this.r = Te(t.r), this.g = Te(t.g), this.b = Te(t.b), this;
      }
    }, {
      key: "copyLinearToSRGB",
      value: function copyLinearToSRGB(t) {
        return this.r = Ee(t.r), this.g = Ee(t.g), this.b = Ee(t.b), this;
      }
    }, {
      key: "convertSRGBToLinear",
      value: function convertSRGBToLinear() {
        return this.copySRGBToLinear(this), this;
      }
    }, {
      key: "convertLinearToSRGB",
      value: function convertLinearToSRGB() {
        return this.copyLinearToSRGB(this), this;
      }
    }, {
      key: "getHex",
      value: function getHex() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Dt;
        return be.fromWorkingColorSpace(oi.copy(this), t), 65536 * Math.round(te(255 * oi.r, 0, 255)) + 256 * Math.round(te(255 * oi.g, 0, 255)) + Math.round(te(255 * oi.b, 0, 255));
      }
    }, {
      key: "getHexString",
      value: function getHexString() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Dt;
        return ("000000" + this.getHex(t).toString(16)).slice(-6);
      }
    }, {
      key: "getHSL",
      value: function getHSL(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : be.workingColorSpace;
        be.fromWorkingColorSpace(oi.copy(this), e);
        var n = oi.r,
          i = oi.g,
          r = oi.b,
          s = Math.max(n, i, r),
          a = Math.min(n, i, r);
        var o, l;
        var c = (a + s) / 2;
        if (a === s) o = 0, l = 0;else {
          var _t29 = s - a;
          switch (l = c <= .5 ? _t29 / (s + a) : _t29 / (2 - s - a), s) {
            case n:
              o = (i - r) / _t29 + (i < r ? 6 : 0);
              break;
            case i:
              o = (r - n) / _t29 + 2;
              break;
            case r:
              o = (n - i) / _t29 + 4;
          }
          o /= 6;
        }
        return t.h = o, t.s = l, t.l = c, t;
      }
    }, {
      key: "getRGB",
      value: function getRGB(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : be.workingColorSpace;
        return be.fromWorkingColorSpace(oi.copy(this), e), t.r = oi.r, t.g = oi.g, t.b = oi.b, t;
      }
    }, {
      key: "getStyle",
      value: function getStyle() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Dt;
        be.fromWorkingColorSpace(oi.copy(this), t);
        var e = oi.r,
          n = oi.g,
          i = oi.b;
        return t !== Dt ? "color(".concat(t, " ").concat(e.toFixed(3), " ").concat(n.toFixed(3), " ").concat(i.toFixed(3), ")") : "rgb(".concat(Math.round(255 * e), ",").concat(Math.round(255 * n), ",").concat(Math.round(255 * i), ")");
      }
    }, {
      key: "offsetHSL",
      value: function offsetHSL(t, e, n) {
        return this.getHSL(ii), this.setHSL(ii.h + t, ii.s + e, ii.l + n);
      }
    }, {
      key: "add",
      value: function add(t) {
        return this.r += t.r, this.g += t.g, this.b += t.b, this;
      }
    }, {
      key: "addColors",
      value: function addColors(t, e) {
        return this.r = t.r + e.r, this.g = t.g + e.g, this.b = t.b + e.b, this;
      }
    }, {
      key: "addScalar",
      value: function addScalar(t) {
        return this.r += t, this.g += t, this.b += t, this;
      }
    }, {
      key: "sub",
      value: function sub(t) {
        return this.r = Math.max(0, this.r - t.r), this.g = Math.max(0, this.g - t.g), this.b = Math.max(0, this.b - t.b), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        return this.r *= t.r, this.g *= t.g, this.b *= t.b, this;
      }
    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(t) {
        return this.r *= t, this.g *= t, this.b *= t, this;
      }
    }, {
      key: "lerp",
      value: function lerp(t, e) {
        return this.r += (t.r - this.r) * e, this.g += (t.g - this.g) * e, this.b += (t.b - this.b) * e, this;
      }
    }, {
      key: "lerpColors",
      value: function lerpColors(t, e, n) {
        return this.r = t.r + (e.r - t.r) * n, this.g = t.g + (e.g - t.g) * n, this.b = t.b + (e.b - t.b) * n, this;
      }
    }, {
      key: "lerpHSL",
      value: function lerpHSL(t, e) {
        this.getHSL(ii), t.getHSL(ri);
        var n = ne(ii.h, ri.h, e),
          i = ne(ii.s, ri.s, e),
          r = ne(ii.l, ri.l, e);
        return this.setHSL(n, i, r), this;
      }
    }, {
      key: "setFromVector3",
      value: function setFromVector3(t) {
        return this.r = t.x, this.g = t.y, this.b = t.z, this;
      }
    }, {
      key: "applyMatrix3",
      value: function applyMatrix3(t) {
        var e = this.r,
          n = this.g,
          i = this.b,
          r = t.elements;
        return this.r = r[0] * e + r[3] * n + r[6] * i, this.g = r[1] * e + r[4] * n + r[7] * i, this.b = r[2] * e + r[5] * n + r[8] * i, this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.r === this.r && t.g === this.g && t.b === this.b;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.r = t[e], this.g = t[e + 1], this.b = t[e + 2], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this.r, t[e + 1] = this.g, t[e + 2] = this.b, t;
      }
    }, {
      key: "fromBufferAttribute",
      value: function fromBufferAttribute(t, e) {
        return this.r = t.getX(e), this.g = t.getY(e), this.b = t.getZ(e), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.getHex();
      }
    }, {
      key: _Symbol$iterator6,
      value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
        return _regeneratorRuntime().wrap(function value$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.r;
            case 2:
              _context6.next = 4;
              return this.g;
            case 4:
              _context6.next = 6;
              return this.b;
            case 6:
            case "end":
              return _context6.stop();
          }
        }, value, this);
      })
    }]);
    return ai;
  }(Symbol.iterator);
  var oi = new ai();
  ai.NAMES = ni;
  var li = /*#__PURE__*/function (_ei) {
    _inherits(li, _ei);
    var _super8 = _createSuper(li);
    function li(t) {
      var _this8;
      _classCallCheck(this, li);
      _this8 = _super8.call(this), _this8.isMeshBasicMaterial = !0, _this8.type = "MeshBasicMaterial", _this8.color = new ai(16777215), _this8.map = null, _this8.lightMap = null, _this8.lightMapIntensity = 1, _this8.aoMap = null, _this8.aoMapIntensity = 1, _this8.specularMap = null, _this8.alphaMap = null, _this8.envMap = null, _this8.combine = l, _this8.reflectivity = 1, _this8.refractionRatio = .98, _this8.wireframe = !1, _this8.wireframeLinewidth = 1, _this8.wireframeLinecap = "round", _this8.wireframeLinejoin = "round", _this8.fog = !0, _this8.setValues(t);
      return _this8;
    }
    _createClass(li, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(li.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this;
      }
    }]);
    return li;
  }(ei);
  var ci = hi();
  function hi() {
    var t = new ArrayBuffer(4),
      e = new Float32Array(t),
      n = new Uint32Array(t),
      i = new Uint32Array(512),
      r = new Uint32Array(512);
    for (var _t30 = 0; _t30 < 256; ++_t30) {
      var _e24 = _t30 - 127;
      _e24 < -27 ? (i[_t30] = 0, i[256 | _t30] = 32768, r[_t30] = 24, r[256 | _t30] = 24) : _e24 < -14 ? (i[_t30] = 1024 >> -_e24 - 14, i[256 | _t30] = 1024 >> -_e24 - 14 | 32768, r[_t30] = -_e24 - 1, r[256 | _t30] = -_e24 - 1) : _e24 <= 15 ? (i[_t30] = _e24 + 15 << 10, i[256 | _t30] = _e24 + 15 << 10 | 32768, r[_t30] = 13, r[256 | _t30] = 13) : _e24 < 128 ? (i[_t30] = 31744, i[256 | _t30] = 64512, r[_t30] = 24, r[256 | _t30] = 24) : (i[_t30] = 31744, i[256 | _t30] = 64512, r[_t30] = 13, r[256 | _t30] = 13);
    }
    var s = new Uint32Array(2048),
      a = new Uint32Array(64),
      o = new Uint32Array(64);
    for (var _t31 = 1; _t31 < 1024; ++_t31) {
      var _e25 = _t31 << 13,
        _n35 = 0;
      for (; 0 == (8388608 & _e25);) _e25 <<= 1, _n35 -= 8388608;
      _e25 &= -8388609, _n35 += 947912704, s[_t31] = _e25 | _n35;
    }
    for (var _t32 = 1024; _t32 < 2048; ++_t32) s[_t32] = 939524096 + (_t32 - 1024 << 13);
    for (var _t33 = 1; _t33 < 31; ++_t33) a[_t33] = _t33 << 23;
    a[31] = 1199570944, a[32] = 2147483648;
    for (var _t34 = 33; _t34 < 63; ++_t34) a[_t34] = 2147483648 + (_t34 - 32 << 23);
    a[63] = 3347054592;
    for (var _t35 = 1; _t35 < 64; ++_t35) 32 !== _t35 && (o[_t35] = 1024);
    return {
      floatView: e,
      uint32View: n,
      baseTable: i,
      shiftTable: r,
      mantissaTable: s,
      exponentTable: a,
      offsetTable: o
    };
  }
  function ui(t) {
    Math.abs(t) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), t = te(t, -65504, 65504), ci.floatView[0] = t;
    var e = ci.uint32View[0],
      n = e >> 23 & 511;
    return ci.baseTable[n] + ((8388607 & e) >> ci.shiftTable[n]);
  }
  function di(t) {
    var e = t >> 10;
    return ci.uint32View[0] = ci.mantissaTable[ci.offsetTable[e] + (1023 & t)] + ci.exponentTable[e], ci.floatView[0];
  }
  var pi = {
      toHalfFloat: ui,
      fromHalfFloat: di
    },
    mi = new ze(),
    fi = new ce();
  var gi = /*#__PURE__*/function () {
    function gi(t, e) {
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
      _classCallCheck(this, gi);
      if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      this.isBufferAttribute = !0, this.name = "", this.array = t, this.itemSize = e, this.count = void 0 !== t ? t.length / e : 0, this.normalized = n, this.usage = kt, this.updateRange = {
        offset: 0,
        count: -1
      }, this.gpuType = O, this.version = 0;
    }
    _createClass(gi, [{
      key: "onUploadCallback",
      value: function onUploadCallback() {}
    }, {
      key: "needsUpdate",
      set: function set(t) {
        !0 === t && this.version++;
      }
    }, {
      key: "setUsage",
      value: function setUsage(t) {
        return this.usage = t, this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.name = t.name, this.array = new t.array.constructor(t.array), this.itemSize = t.itemSize, this.count = t.count, this.normalized = t.normalized, this.usage = t.usage, this.gpuType = t.gpuType, this;
      }
    }, {
      key: "copyAt",
      value: function copyAt(t, e, n) {
        t *= this.itemSize, n *= e.itemSize;
        for (var _i29 = 0, _r19 = this.itemSize; _i29 < _r19; _i29++) this.array[t + _i29] = e.array[n + _i29];
        return this;
      }
    }, {
      key: "copyArray",
      value: function copyArray(t) {
        return this.array.set(t), this;
      }
    }, {
      key: "applyMatrix3",
      value: function applyMatrix3(t) {
        if (2 === this.itemSize) for (var _e26 = 0, _n36 = this.count; _e26 < _n36; _e26++) fi.fromBufferAttribute(this, _e26), fi.applyMatrix3(t), this.setXY(_e26, fi.x, fi.y);else if (3 === this.itemSize) for (var _e27 = 0, _n37 = this.count; _e27 < _n37; _e27++) mi.fromBufferAttribute(this, _e27), mi.applyMatrix3(t), this.setXYZ(_e27, mi.x, mi.y, mi.z);
        return this;
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        for (var _e28 = 0, _n38 = this.count; _e28 < _n38; _e28++) mi.fromBufferAttribute(this, _e28), mi.applyMatrix4(t), this.setXYZ(_e28, mi.x, mi.y, mi.z);
        return this;
      }
    }, {
      key: "applyNormalMatrix",
      value: function applyNormalMatrix(t) {
        for (var _e29 = 0, _n39 = this.count; _e29 < _n39; _e29++) mi.fromBufferAttribute(this, _e29), mi.applyNormalMatrix(t), this.setXYZ(_e29, mi.x, mi.y, mi.z);
        return this;
      }
    }, {
      key: "transformDirection",
      value: function transformDirection(t) {
        for (var _e30 = 0, _n40 = this.count; _e30 < _n40; _e30++) mi.fromBufferAttribute(this, _e30), mi.transformDirection(t), this.setXYZ(_e30, mi.x, mi.y, mi.z);
        return this;
      }
    }, {
      key: "set",
      value: function set(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.array.set(t, e), this;
      }
    }, {
      key: "getComponent",
      value: function getComponent(t, e) {
        var n = this.array[t * this.itemSize + e];
        return this.normalized && (n = ae(n, this.array)), n;
      }
    }, {
      key: "setComponent",
      value: function setComponent(t, e, n) {
        return this.normalized && (n = oe(n, this.array)), this.array[t * this.itemSize + e] = n, this;
      }
    }, {
      key: "getX",
      value: function getX(t) {
        var e = this.array[t * this.itemSize];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setX",
      value: function setX(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize] = e, this;
      }
    }, {
      key: "getY",
      value: function getY(t) {
        var e = this.array[t * this.itemSize + 1];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setY",
      value: function setY(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize + 1] = e, this;
      }
    }, {
      key: "getZ",
      value: function getZ(t) {
        var e = this.array[t * this.itemSize + 2];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setZ",
      value: function setZ(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize + 2] = e, this;
      }
    }, {
      key: "getW",
      value: function getW(t) {
        var e = this.array[t * this.itemSize + 3];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setW",
      value: function setW(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize + 3] = e, this;
      }
    }, {
      key: "setXY",
      value: function setXY(t, e, n) {
        return t *= this.itemSize, this.normalized && (e = oe(e, this.array), n = oe(n, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this;
      }
    }, {
      key: "setXYZ",
      value: function setXYZ(t, e, n, i) {
        return t *= this.itemSize, this.normalized && (e = oe(e, this.array), n = oe(n, this.array), i = oe(i, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this;
      }
    }, {
      key: "setXYZW",
      value: function setXYZW(t, e, n, i, r) {
        return t *= this.itemSize, this.normalized && (e = oe(e, this.array), n = oe(n, this.array), i = oe(i, this.array), r = oe(r, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this.array[t + 3] = r, this;
      }
    }, {
      key: "onUpload",
      value: function onUpload(t) {
        return this.onUploadCallback = t, this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: Array.from(this.array),
          normalized: this.normalized
        };
        return "" !== this.name && (t.name = this.name), this.usage !== kt && (t.usage = this.usage), 0 === this.updateRange.offset && -1 === this.updateRange.count || (t.updateRange = this.updateRange), t;
      }
    }]);
    return gi;
  }();
  var _i = /*#__PURE__*/function (_gi) {
    _inherits(_i, _gi);
    var _super9 = _createSuper(_i);
    function _i(t, e, n) {
      _classCallCheck(this, _i);
      return _super9.call(this, new Uint16Array(t), e, n);
    }
    return _createClass(_i);
  }(gi);
  var vi = /*#__PURE__*/function (_gi2) {
    _inherits(vi, _gi2);
    var _super10 = _createSuper(vi);
    function vi(t, e, n) {
      _classCallCheck(this, vi);
      return _super10.call(this, new Uint32Array(t), e, n);
    }
    return _createClass(vi);
  }(gi);
  var yi = /*#__PURE__*/function (_gi3) {
    _inherits(yi, _gi3);
    var _super11 = _createSuper(yi);
    function yi(t, e, n) {
      _classCallCheck(this, yi);
      return _super11.call(this, new Float32Array(t), e, n);
    }
    return _createClass(yi);
  }(gi);
  var xi = 0;
  var Mi = new gn(),
    Si = new Gn(),
    bi = new ze(),
    Ti = new Ve(),
    Ei = new Ve(),
    wi = new ze();
  var Ai = /*#__PURE__*/function (_Yt5) {
    _inherits(Ai, _Yt5);
    var _super12 = _createSuper(Ai);
    function Ai() {
      var _this9;
      _classCallCheck(this, Ai);
      _this9 = _super12.call(this), _this9.isBufferGeometry = !0, Object.defineProperty(_assertThisInitialized(_this9), "id", {
        value: xi++
      }), _this9.uuid = Qt(), _this9.name = "", _this9.type = "BufferGeometry", _this9.index = null, _this9.attributes = {}, _this9.morphAttributes = {}, _this9.morphTargetsRelative = !1, _this9.groups = [], _this9.boundingBox = null, _this9.boundingSphere = null, _this9.drawRange = {
        start: 0,
        count: 1 / 0
      }, _this9.userData = {};
      return _this9;
    }
    _createClass(Ai, [{
      key: "getIndex",
      value: function getIndex() {
        return this.index;
      }
    }, {
      key: "setIndex",
      value: function setIndex(t) {
        return Array.isArray(t) ? this.index = new (de(t) ? vi : _i)(t, 1) : this.index = t, this;
      }
    }, {
      key: "getAttribute",
      value: function getAttribute(t) {
        return this.attributes[t];
      }
    }, {
      key: "setAttribute",
      value: function setAttribute(t, e) {
        return this.attributes[t] = e, this;
      }
    }, {
      key: "deleteAttribute",
      value: function deleteAttribute(t) {
        return delete this.attributes[t], this;
      }
    }, {
      key: "hasAttribute",
      value: function hasAttribute(t) {
        return void 0 !== this.attributes[t];
      }
    }, {
      key: "addGroup",
      value: function addGroup(t, e) {
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        this.groups.push({
          start: t,
          count: e,
          materialIndex: n
        });
      }
    }, {
      key: "clearGroups",
      value: function clearGroups() {
        this.groups = [];
      }
    }, {
      key: "setDrawRange",
      value: function setDrawRange(t, e) {
        this.drawRange.start = t, this.drawRange.count = e;
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        var e = this.attributes.position;
        void 0 !== e && (e.applyMatrix4(t), e.needsUpdate = !0);
        var n = this.attributes.normal;
        if (void 0 !== n) {
          var _e31 = new he().getNormalMatrix(t);
          n.applyNormalMatrix(_e31), n.needsUpdate = !0;
        }
        var i = this.attributes.tangent;
        return void 0 !== i && (i.transformDirection(t), i.needsUpdate = !0), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this;
      }
    }, {
      key: "applyQuaternion",
      value: function applyQuaternion(t) {
        return Mi.makeRotationFromQuaternion(t), this.applyMatrix4(Mi), this;
      }
    }, {
      key: "rotateX",
      value: function rotateX(t) {
        return Mi.makeRotationX(t), this.applyMatrix4(Mi), this;
      }
    }, {
      key: "rotateY",
      value: function rotateY(t) {
        return Mi.makeRotationY(t), this.applyMatrix4(Mi), this;
      }
    }, {
      key: "rotateZ",
      value: function rotateZ(t) {
        return Mi.makeRotationZ(t), this.applyMatrix4(Mi), this;
      }
    }, {
      key: "translate",
      value: function translate(t, e, n) {
        return Mi.makeTranslation(t, e, n), this.applyMatrix4(Mi), this;
      }
    }, {
      key: "scale",
      value: function scale(t, e, n) {
        return Mi.makeScale(t, e, n), this.applyMatrix4(Mi), this;
      }
    }, {
      key: "lookAt",
      value: function lookAt(t) {
        return Si.lookAt(t), Si.updateMatrix(), this.applyMatrix4(Si.matrix), this;
      }
    }, {
      key: "center",
      value: function center() {
        return this.computeBoundingBox(), this.boundingBox.getCenter(bi).negate(), this.translate(bi.x, bi.y, bi.z), this;
      }
    }, {
      key: "setFromPoints",
      value: function setFromPoints(t) {
        var e = [];
        for (var _n41 = 0, _i30 = t.length; _n41 < _i30; _n41++) {
          var _i31 = t[_n41];
          e.push(_i31.x, _i31.y, _i31.z || 0);
        }
        return this.setAttribute("position", new yi(e, 3)), this;
      }
    }, {
      key: "computeBoundingBox",
      value: function computeBoundingBox() {
        null === this.boundingBox && (this.boundingBox = new Ve());
        var t = this.attributes.position,
          e = this.morphAttributes.position;
        if (t && t.isGLBufferAttribute) return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), void this.boundingBox.set(new ze(-1 / 0, -1 / 0, -1 / 0), new ze(1 / 0, 1 / 0, 1 / 0));
        if (void 0 !== t) {
          if (this.boundingBox.setFromBufferAttribute(t), e) for (var _t36 = 0, _n42 = e.length; _t36 < _n42; _t36++) {
            var _n43 = e[_t36];
            Ti.setFromBufferAttribute(_n43), this.morphTargetsRelative ? (wi.addVectors(this.boundingBox.min, Ti.min), this.boundingBox.expandByPoint(wi), wi.addVectors(this.boundingBox.max, Ti.max), this.boundingBox.expandByPoint(wi)) : (this.boundingBox.expandByPoint(Ti.min), this.boundingBox.expandByPoint(Ti.max));
          }
        } else this.boundingBox.makeEmpty();
        (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }, {
      key: "computeBoundingSphere",
      value: function computeBoundingSphere() {
        null === this.boundingSphere && (this.boundingSphere = new on());
        var t = this.attributes.position,
          e = this.morphAttributes.position;
        if (t && t.isGLBufferAttribute) return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), void this.boundingSphere.set(new ze(), 1 / 0);
        if (t) {
          var _n44 = this.boundingSphere.center;
          if (Ti.setFromBufferAttribute(t), e) for (var _t37 = 0, _n45 = e.length; _t37 < _n45; _t37++) {
            var _n46 = e[_t37];
            Ei.setFromBufferAttribute(_n46), this.morphTargetsRelative ? (wi.addVectors(Ti.min, Ei.min), Ti.expandByPoint(wi), wi.addVectors(Ti.max, Ei.max), Ti.expandByPoint(wi)) : (Ti.expandByPoint(Ei.min), Ti.expandByPoint(Ei.max));
          }
          Ti.getCenter(_n44);
          var _i32 = 0;
          for (var _e32 = 0, _r20 = t.count; _e32 < _r20; _e32++) wi.fromBufferAttribute(t, _e32), _i32 = Math.max(_i32, _n44.distanceToSquared(wi));
          if (e) for (var _r21 = 0, _s5 = e.length; _r21 < _s5; _r21++) {
            var _s6 = e[_r21],
              _a6 = this.morphTargetsRelative;
            for (var _e33 = 0, _r22 = _s6.count; _e33 < _r22; _e33++) wi.fromBufferAttribute(_s6, _e33), _a6 && (bi.fromBufferAttribute(t, _e33), wi.add(bi)), _i32 = Math.max(_i32, _n44.distanceToSquared(wi));
          }
          this.boundingSphere.radius = Math.sqrt(_i32), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }, {
      key: "computeTangents",
      value: function computeTangents() {
        var t = this.index,
          e = this.attributes;
        if (null === t || void 0 === e.position || void 0 === e.normal || void 0 === e.uv) return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        var n = t.array,
          i = e.position.array,
          r = e.normal.array,
          s = e.uv.array,
          a = i.length / 3;
        !1 === this.hasAttribute("tangent") && this.setAttribute("tangent", new gi(new Float32Array(4 * a), 4));
        var o = this.getAttribute("tangent").array,
          l = [],
          c = [];
        for (var _t38 = 0; _t38 < a; _t38++) l[_t38] = new ze(), c[_t38] = new ze();
        var h = new ze(),
          u = new ze(),
          d = new ze(),
          p = new ce(),
          m = new ce(),
          f = new ce(),
          g = new ze(),
          _ = new ze();
        function v(t, e, n) {
          h.fromArray(i, 3 * t), u.fromArray(i, 3 * e), d.fromArray(i, 3 * n), p.fromArray(s, 2 * t), m.fromArray(s, 2 * e), f.fromArray(s, 2 * n), u.sub(h), d.sub(h), m.sub(p), f.sub(p);
          var r = 1 / (m.x * f.y - f.x * m.y);
          isFinite(r) && (g.copy(u).multiplyScalar(f.y).addScaledVector(d, -m.y).multiplyScalar(r), _.copy(d).multiplyScalar(m.x).addScaledVector(u, -f.x).multiplyScalar(r), l[t].add(g), l[e].add(g), l[n].add(g), c[t].add(_), c[e].add(_), c[n].add(_));
        }
        var y = this.groups;
        0 === y.length && (y = [{
          start: 0,
          count: n.length
        }]);
        for (var _t39 = 0, _e34 = y.length; _t39 < _e34; ++_t39) {
          var _e35 = y[_t39],
            _i33 = _e35.start;
          for (var _t40 = _i33, _r23 = _i33 + _e35.count; _t40 < _r23; _t40 += 3) v(n[_t40 + 0], n[_t40 + 1], n[_t40 + 2]);
        }
        var x = new ze(),
          M = new ze(),
          S = new ze(),
          b = new ze();
        function T(t) {
          S.fromArray(r, 3 * t), b.copy(S);
          var e = l[t];
          x.copy(e), x.sub(S.multiplyScalar(S.dot(e))).normalize(), M.crossVectors(b, e);
          var n = M.dot(c[t]) < 0 ? -1 : 1;
          o[4 * t] = x.x, o[4 * t + 1] = x.y, o[4 * t + 2] = x.z, o[4 * t + 3] = n;
        }
        for (var _t41 = 0, _e36 = y.length; _t41 < _e36; ++_t41) {
          var _e37 = y[_t41],
            _i34 = _e37.start;
          for (var _t42 = _i34, _r24 = _i34 + _e37.count; _t42 < _r24; _t42 += 3) T(n[_t42 + 0]), T(n[_t42 + 1]), T(n[_t42 + 2]);
        }
      }
    }, {
      key: "computeVertexNormals",
      value: function computeVertexNormals() {
        var t = this.index,
          e = this.getAttribute("position");
        if (void 0 !== e) {
          var _n47 = this.getAttribute("normal");
          if (void 0 === _n47) _n47 = new gi(new Float32Array(3 * e.count), 3), this.setAttribute("normal", _n47);else for (var _t43 = 0, _e38 = _n47.count; _t43 < _e38; _t43++) _n47.setXYZ(_t43, 0, 0, 0);
          var _i35 = new ze(),
            _r25 = new ze(),
            _s7 = new ze(),
            _a7 = new ze(),
            _o5 = new ze(),
            _l4 = new ze(),
            _c4 = new ze(),
            _h3 = new ze();
          if (t) for (var _u2 = 0, _d = t.count; _u2 < _d; _u2 += 3) {
            var _d2 = t.getX(_u2 + 0),
              _p = t.getX(_u2 + 1),
              _m = t.getX(_u2 + 2);
            _i35.fromBufferAttribute(e, _d2), _r25.fromBufferAttribute(e, _p), _s7.fromBufferAttribute(e, _m), _c4.subVectors(_s7, _r25), _h3.subVectors(_i35, _r25), _c4.cross(_h3), _a7.fromBufferAttribute(_n47, _d2), _o5.fromBufferAttribute(_n47, _p), _l4.fromBufferAttribute(_n47, _m), _a7.add(_c4), _o5.add(_c4), _l4.add(_c4), _n47.setXYZ(_d2, _a7.x, _a7.y, _a7.z), _n47.setXYZ(_p, _o5.x, _o5.y, _o5.z), _n47.setXYZ(_m, _l4.x, _l4.y, _l4.z);
          } else for (var _t44 = 0, _a8 = e.count; _t44 < _a8; _t44 += 3) _i35.fromBufferAttribute(e, _t44 + 0), _r25.fromBufferAttribute(e, _t44 + 1), _s7.fromBufferAttribute(e, _t44 + 2), _c4.subVectors(_s7, _r25), _h3.subVectors(_i35, _r25), _c4.cross(_h3), _n47.setXYZ(_t44 + 0, _c4.x, _c4.y, _c4.z), _n47.setXYZ(_t44 + 1, _c4.x, _c4.y, _c4.z), _n47.setXYZ(_t44 + 2, _c4.x, _c4.y, _c4.z);
          this.normalizeNormals(), _n47.needsUpdate = !0;
        }
      }
    }, {
      key: "normalizeNormals",
      value: function normalizeNormals() {
        var t = this.attributes.normal;
        for (var _e39 = 0, _n48 = t.count; _e39 < _n48; _e39++) wi.fromBufferAttribute(t, _e39), wi.normalize(), t.setXYZ(_e39, wi.x, wi.y, wi.z);
      }
    }, {
      key: "toNonIndexed",
      value: function toNonIndexed() {
        function t(t, e) {
          var n = t.array,
            i = t.itemSize,
            r = t.normalized,
            s = new n.constructor(e.length * i);
          var a = 0,
            o = 0;
          for (var _r26 = 0, _l5 = e.length; _r26 < _l5; _r26++) {
            a = t.isInterleavedBufferAttribute ? e[_r26] * t.data.stride + t.offset : e[_r26] * i;
            for (var _t45 = 0; _t45 < i; _t45++) s[o++] = n[a++];
          }
          return new gi(s, i, r);
        }
        if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
        var e = new Ai(),
          n = this.index.array,
          i = this.attributes;
        for (var _r27 in i) {
          var _s8 = t(i[_r27], n);
          e.setAttribute(_r27, _s8);
        }
        var r = this.morphAttributes;
        for (var _i36 in r) {
          var _s9 = [],
            _a9 = r[_i36];
          for (var _e40 = 0, _i37 = _a9.length; _e40 < _i37; _e40++) {
            var _i38 = t(_a9[_e40], n);
            _s9.push(_i38);
          }
          e.morphAttributes[_i36] = _s9;
        }
        e.morphTargetsRelative = this.morphTargetsRelative;
        var s = this.groups;
        for (var _t46 = 0, _n49 = s.length; _t46 < _n49; _t46++) {
          var _n50 = s[_t46];
          e.addGroup(_n50.start, _n50.count, _n50.materialIndex);
        }
        return e;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = {
          metadata: {
            version: 4.6,
            type: "BufferGeometry",
            generator: "BufferGeometry.toJSON"
          }
        };
        if (t.uuid = this.uuid, t.type = this.type, "" !== this.name && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), void 0 !== this.parameters) {
          var _e41 = this.parameters;
          for (var _n51 in _e41) void 0 !== _e41[_n51] && (t[_n51] = _e41[_n51]);
          return t;
        }
        t.data = {
          attributes: {}
        };
        var e = this.index;
        null !== e && (t.data.index = {
          type: e.array.constructor.name,
          array: Array.prototype.slice.call(e.array)
        });
        var n = this.attributes;
        for (var _e42 in n) {
          var _i39 = n[_e42];
          t.data.attributes[_e42] = _i39.toJSON(t.data);
        }
        var i = {};
        var r = !1;
        for (var _e43 in this.morphAttributes) {
          var _n52 = this.morphAttributes[_e43],
            _s10 = [];
          for (var _e44 = 0, _i40 = _n52.length; _e44 < _i40; _e44++) {
            var _i41 = _n52[_e44];
            _s10.push(_i41.toJSON(t.data));
          }
          _s10.length > 0 && (i[_e43] = _s10, r = !0);
        }
        r && (t.data.morphAttributes = i, t.data.morphTargetsRelative = this.morphTargetsRelative);
        var s = this.groups;
        s.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(s)));
        var a = this.boundingSphere;
        return null !== a && (t.data.boundingSphere = {
          center: a.center.toArray(),
          radius: a.radius
        }), t;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
        var e = {};
        this.name = t.name;
        var n = t.index;
        null !== n && this.setIndex(n.clone(e));
        var i = t.attributes;
        for (var _t47 in i) {
          var _n53 = i[_t47];
          this.setAttribute(_t47, _n53.clone(e));
        }
        var r = t.morphAttributes;
        for (var _t48 in r) {
          var _n54 = [],
            _i42 = r[_t48];
          for (var _t49 = 0, _r28 = _i42.length; _t49 < _r28; _t49++) _n54.push(_i42[_t49].clone(e));
          this.morphAttributes[_t48] = _n54;
        }
        this.morphTargetsRelative = t.morphTargetsRelative;
        var s = t.groups;
        for (var _t50 = 0, _e45 = s.length; _t50 < _e45; _t50++) {
          var _e46 = s[_t50];
          this.addGroup(_e46.start, _e46.count, _e46.materialIndex);
        }
        var a = t.boundingBox;
        null !== a && (this.boundingBox = a.clone());
        var o = t.boundingSphere;
        return null !== o && (this.boundingSphere = o.clone()), this.drawRange.start = t.drawRange.start, this.drawRange.count = t.drawRange.count, this.userData = t.userData, this;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    }]);
    return Ai;
  }(Yt);
  var Ri = new gn(),
    Ci = new fn(),
    Li = new on(),
    Pi = new ze(),
    Ii = new ze(),
    Ui = new ze(),
    Di = new ze(),
    Ni = new ze(),
    Oi = new ze(),
    Fi = new ce(),
    Bi = new ce(),
    zi = new ce(),
    Hi = new ze(),
    Gi = new ze(),
    Vi = new ze(),
    ki = new ze(),
    Wi = new ze();
  var Xi = /*#__PURE__*/function (_Gn) {
    _inherits(Xi, _Gn);
    var _super13 = _createSuper(Xi);
    function Xi() {
      var _this10;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ai();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new li();
      _classCallCheck(this, Xi);
      _this10 = _super13.call(this), _this10.isMesh = !0, _this10.type = "Mesh", _this10.geometry = t, _this10.material = e, _this10.updateMorphTargets();
      return _this10;
    }
    _createClass(Xi, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Xi.prototype), "copy", this).call(this, t, e), void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()), void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
      }
    }, {
      key: "updateMorphTargets",
      value: function updateMorphTargets() {
        var t = this.geometry.morphAttributes,
          e = Object.keys(t);
        if (e.length > 0) {
          var _n55 = t[e[0]];
          if (void 0 !== _n55) {
            this.morphTargetInfluences = [], this.morphTargetDictionary = {};
            for (var _t51 = 0, _e47 = _n55.length; _t51 < _e47; _t51++) {
              var _e48 = _n55[_t51].name || String(_t51);
              this.morphTargetInfluences.push(0), this.morphTargetDictionary[_e48] = _t51;
            }
          }
        }
      }
    }, {
      key: "getVertexPosition",
      value: function getVertexPosition(t, e) {
        var n = this.geometry,
          i = n.attributes.position,
          r = n.morphAttributes.position,
          s = n.morphTargetsRelative;
        e.fromBufferAttribute(i, t);
        var a = this.morphTargetInfluences;
        if (r && a) {
          Oi.set(0, 0, 0);
          for (var _n56 = 0, _i43 = r.length; _n56 < _i43; _n56++) {
            var _i44 = a[_n56],
              _o6 = r[_n56];
            0 !== _i44 && (Ni.fromBufferAttribute(_o6, t), s ? Oi.addScaledVector(Ni, _i44) : Oi.addScaledVector(Ni.sub(e), _i44));
          }
          e.add(Oi);
        }
        return e;
      }
    }, {
      key: "raycast",
      value: function raycast(t, e) {
        var n = this.geometry,
          i = this.material,
          r = this.matrixWorld;
        if (void 0 !== i) {
          if (null === n.boundingSphere && n.computeBoundingSphere(), Li.copy(n.boundingSphere), Li.applyMatrix4(r), Ci.copy(t.ray).recast(t.near), !1 === Li.containsPoint(Ci.origin)) {
            if (null === Ci.intersectSphere(Li, Pi)) return;
            if (Ci.origin.distanceToSquared(Pi) > Math.pow(t.far - t.near, 2)) return;
          }
          Ri.copy(r).invert(), Ci.copy(t.ray).applyMatrix4(Ri), null !== n.boundingBox && !1 === Ci.intersectsBox(n.boundingBox) || this._computeIntersections(t, e, Ci);
        }
      }
    }, {
      key: "_computeIntersections",
      value: function _computeIntersections(t, e, n) {
        var i;
        var r = this.geometry,
          s = this.material,
          a = r.index,
          o = r.attributes.position,
          l = r.attributes.uv,
          c = r.attributes.uv1,
          h = r.attributes.normal,
          u = r.groups,
          d = r.drawRange;
        if (null !== a) {
          if (Array.isArray(s)) for (var _r29 = 0, _o7 = u.length; _r29 < _o7; _r29++) {
            var _o8 = u[_r29],
              _p2 = s[_o8.materialIndex];
            for (var _r30 = Math.max(_o8.start, d.start), _s11 = Math.min(a.count, Math.min(_o8.start + _o8.count, d.start + d.count)); _r30 < _s11; _r30 += 3) {
              i = ji(this, _p2, t, n, l, c, h, a.getX(_r30), a.getX(_r30 + 1), a.getX(_r30 + 2)), i && (i.faceIndex = Math.floor(_r30 / 3), i.face.materialIndex = _o8.materialIndex, e.push(i));
            }
          } else {
            for (var _r31 = Math.max(0, d.start), _o9 = Math.min(a.count, d.start + d.count); _r31 < _o9; _r31 += 3) {
              i = ji(this, s, t, n, l, c, h, a.getX(_r31), a.getX(_r31 + 1), a.getX(_r31 + 2)), i && (i.faceIndex = Math.floor(_r31 / 3), e.push(i));
            }
          }
        } else if (void 0 !== o) if (Array.isArray(s)) for (var _r32 = 0, _a10 = u.length; _r32 < _a10; _r32++) {
          var _a11 = u[_r32],
            _p3 = s[_a11.materialIndex];
          for (var _r33 = Math.max(_a11.start, d.start), _s12 = Math.min(o.count, Math.min(_a11.start + _a11.count, d.start + d.count)); _r33 < _s12; _r33 += 3) {
            i = ji(this, _p3, t, n, l, c, h, _r33, _r33 + 1, _r33 + 2), i && (i.faceIndex = Math.floor(_r33 / 3), i.face.materialIndex = _a11.materialIndex, e.push(i));
          }
        } else {
          for (var _r34 = Math.max(0, d.start), _a12 = Math.min(o.count, d.start + d.count); _r34 < _a12; _r34 += 3) {
            i = ji(this, s, t, n, l, c, h, _r34, _r34 + 1, _r34 + 2), i && (i.faceIndex = Math.floor(_r34 / 3), e.push(i));
          }
        }
      }
    }]);
    return Xi;
  }(Gn);
  function ji(t, e, n, i, r, o, l, c, h, u) {
    t.getVertexPosition(c, Ii), t.getVertexPosition(h, Ui), t.getVertexPosition(u, Di);
    var d = function (t, e, n, i, r, o, l, c) {
      var h;
      if (h = e.side === a ? i.intersectTriangle(l, o, r, !0, c) : i.intersectTriangle(r, o, l, e.side === s, c), null === h) return null;
      Wi.copy(c), Wi.applyMatrix4(t.matrixWorld);
      var u = n.ray.origin.distanceTo(Wi);
      return u < n.near || u > n.far ? null : {
        distance: u,
        point: Wi.clone(),
        object: t
      };
    }(t, e, n, i, Ii, Ui, Di, ki);
    if (d) {
      r && (Fi.fromBufferAttribute(r, c), Bi.fromBufferAttribute(r, h), zi.fromBufferAttribute(r, u), d.uv = Qn.getInterpolation(ki, Ii, Ui, Di, Fi, Bi, zi, new ce())), o && (Fi.fromBufferAttribute(o, c), Bi.fromBufferAttribute(o, h), zi.fromBufferAttribute(o, u), d.uv1 = Qn.getInterpolation(ki, Ii, Ui, Di, Fi, Bi, zi, new ce()), d.uv2 = d.uv1), l && (Hi.fromBufferAttribute(l, c), Gi.fromBufferAttribute(l, h), Vi.fromBufferAttribute(l, u), d.normal = Qn.getInterpolation(ki, Ii, Ui, Di, Hi, Gi, Vi, new ze()), d.normal.dot(i.direction) > 0 && d.normal.multiplyScalar(-1));
      var _t52 = {
        a: c,
        b: h,
        c: u,
        normal: new ze(),
        materialIndex: 0
      };
      Qn.getNormal(Ii, Ui, Di, _t52.normal), d.face = _t52;
    }
    return d;
  }
  var qi = /*#__PURE__*/function (_Ai) {
    _inherits(qi, _Ai);
    var _super14 = _createSuper(qi);
    function qi() {
      var _this11;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      _classCallCheck(this, qi);
      _this11 = _super14.call(this), _this11.type = "BoxGeometry", _this11.parameters = {
        width: t,
        height: e,
        depth: n,
        widthSegments: i,
        heightSegments: r,
        depthSegments: s
      };
      var a = _assertThisInitialized(_this11);
      i = Math.floor(i), r = Math.floor(r), s = Math.floor(s);
      var o = [],
        l = [],
        c = [],
        h = [];
      var u = 0,
        d = 0;
      function p(t, e, n, i, r, s, p, m, f, g, _) {
        var v = s / f,
          y = p / g,
          x = s / 2,
          M = p / 2,
          S = m / 2,
          b = f + 1,
          T = g + 1;
        var E = 0,
          w = 0;
        var A = new ze();
        for (var _s13 = 0; _s13 < T; _s13++) {
          var _a13 = _s13 * y - M;
          for (var _o10 = 0; _o10 < b; _o10++) {
            var _u3 = _o10 * v - x;
            A[t] = _u3 * i, A[e] = _a13 * r, A[n] = S, l.push(A.x, A.y, A.z), A[t] = 0, A[e] = 0, A[n] = m > 0 ? 1 : -1, c.push(A.x, A.y, A.z), h.push(_o10 / f), h.push(1 - _s13 / g), E += 1;
          }
        }
        for (var _t53 = 0; _t53 < g; _t53++) for (var _e49 = 0; _e49 < f; _e49++) {
          var _n57 = u + _e49 + b * _t53,
            _i45 = u + _e49 + b * (_t53 + 1),
            _r35 = u + (_e49 + 1) + b * (_t53 + 1),
            _s14 = u + (_e49 + 1) + b * _t53;
          o.push(_n57, _i45, _s14), o.push(_i45, _r35, _s14), w += 6;
        }
        a.addGroup(d, w, _), d += w, u += E;
      }
      p("z", "y", "x", -1, -1, n, e, t, s, r, 0), p("z", "y", "x", 1, -1, n, e, -t, s, r, 1), p("x", "z", "y", 1, 1, t, n, e, i, s, 2), p("x", "z", "y", 1, -1, t, n, -e, i, s, 3), p("x", "y", "z", 1, -1, t, e, n, i, r, 4), p("x", "y", "z", -1, -1, t, e, -n, i, r, 5), _this11.setIndex(o), _this11.setAttribute("position", new yi(l, 3)), _this11.setAttribute("normal", new yi(c, 3)), _this11.setAttribute("uv", new yi(h, 2));
      return _this11;
    }
    _createClass(qi, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(qi.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new qi(t.width, t.height, t.depth, t.widthSegments, t.heightSegments, t.depthSegments);
      }
    }]);
    return qi;
  }(Ai);
  function Yi(t) {
    var e = {};
    for (var _n58 in t) {
      e[_n58] = {};
      for (var _i46 in t[_n58]) {
        var _r36 = t[_n58][_i46];
        _r36 && (_r36.isColor || _r36.isMatrix3 || _r36.isMatrix4 || _r36.isVector2 || _r36.isVector3 || _r36.isVector4 || _r36.isTexture || _r36.isQuaternion) ? _r36.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[_n58][_i46] = null) : e[_n58][_i46] = _r36.clone() : Array.isArray(_r36) ? e[_n58][_i46] = _r36.slice() : e[_n58][_i46] = _r36;
      }
    }
    return e;
  }
  function Zi(t) {
    var e = {};
    for (var _n59 = 0; _n59 < t.length; _n59++) {
      var _i47 = Yi(t[_n59]);
      for (var _t54 in _i47) e[_t54] = _i47[_t54];
    }
    return e;
  }
  function Ji(t) {
    return null === t.getRenderTarget() ? t.outputColorSpace : be.workingColorSpace;
  }
  var Ki = {
    clone: Yi,
    merge: Zi
  };
  var $i = /*#__PURE__*/function (_ei2) {
    _inherits($i, _ei2);
    var _super15 = _createSuper($i);
    function $i(t) {
      var _this12;
      _classCallCheck(this, $i);
      _this12 = _super15.call(this), _this12.isShaderMaterial = !0, _this12.type = "ShaderMaterial", _this12.defines = {}, _this12.uniforms = {}, _this12.uniformsGroups = [], _this12.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", _this12.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}", _this12.linewidth = 1, _this12.wireframe = !1, _this12.wireframeLinewidth = 1, _this12.fog = !1, _this12.lights = !1, _this12.clipping = !1, _this12.forceSinglePass = !0, _this12.extensions = {
        derivatives: !1,
        fragDepth: !1,
        drawBuffers: !1,
        shaderTextureLOD: !1
      }, _this12.defaultAttributeValues = {
        color: [1, 1, 1],
        uv: [0, 0],
        uv1: [0, 0]
      }, _this12.index0AttributeName = void 0, _this12.uniformsNeedUpdate = !1, _this12.glslVersion = null, void 0 !== t && _this12.setValues(t);
      return _this12;
    }
    _createClass($i, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf($i.prototype), "copy", this).call(this, t), this.fragmentShader = t.fragmentShader, this.vertexShader = t.vertexShader, this.uniforms = Yi(t.uniforms), this.uniformsGroups = function (t) {
          var e = [];
          for (var _n60 = 0; _n60 < t.length; _n60++) e.push(t[_n60].clone());
          return e;
        }(t.uniformsGroups), this.defines = Object.assign({}, t.defines), this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.fog = t.fog, this.lights = t.lights, this.clipping = t.clipping, this.extensions = Object.assign({}, t.extensions), this.glslVersion = t.glslVersion, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf($i.prototype), "toJSON", this).call(this, t);
        e.glslVersion = this.glslVersion, e.uniforms = {};
        for (var _n61 in this.uniforms) {
          var _i48 = this.uniforms[_n61].value;
          _i48 && _i48.isTexture ? e.uniforms[_n61] = {
            type: "t",
            value: _i48.toJSON(t).uuid
          } : _i48 && _i48.isColor ? e.uniforms[_n61] = {
            type: "c",
            value: _i48.getHex()
          } : _i48 && _i48.isVector2 ? e.uniforms[_n61] = {
            type: "v2",
            value: _i48.toArray()
          } : _i48 && _i48.isVector3 ? e.uniforms[_n61] = {
            type: "v3",
            value: _i48.toArray()
          } : _i48 && _i48.isVector4 ? e.uniforms[_n61] = {
            type: "v4",
            value: _i48.toArray()
          } : _i48 && _i48.isMatrix3 ? e.uniforms[_n61] = {
            type: "m3",
            value: _i48.toArray()
          } : _i48 && _i48.isMatrix4 ? e.uniforms[_n61] = {
            type: "m4",
            value: _i48.toArray()
          } : e.uniforms[_n61] = {
            value: _i48
          };
        }
        Object.keys(this.defines).length > 0 && (e.defines = this.defines), e.vertexShader = this.vertexShader, e.fragmentShader = this.fragmentShader, e.lights = this.lights, e.clipping = this.clipping;
        var n = {};
        for (var _t55 in this.extensions) !0 === this.extensions[_t55] && (n[_t55] = !0);
        return Object.keys(n).length > 0 && (e.extensions = n), e;
      }
    }]);
    return $i;
  }(ei);
  var Qi = /*#__PURE__*/function (_Gn2) {
    _inherits(Qi, _Gn2);
    var _super16 = _createSuper(Qi);
    function Qi() {
      var _this13;
      _classCallCheck(this, Qi);
      _this13 = _super16.call(this), _this13.isCamera = !0, _this13.type = "Camera", _this13.matrixWorldInverse = new gn(), _this13.projectionMatrix = new gn(), _this13.projectionMatrixInverse = new gn(), _this13.coordinateSystem = jt;
      return _this13;
    }
    _createClass(Qi, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Qi.prototype), "copy", this).call(this, t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this.coordinateSystem = t.coordinateSystem, this;
      }
    }, {
      key: "getWorldDirection",
      value: function getWorldDirection(t) {
        return _get(_getPrototypeOf(Qi.prototype), "getWorldDirection", this).call(this, t).negate();
      }
    }, {
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        _get(_getPrototypeOf(Qi.prototype), "updateMatrixWorld", this).call(this, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
      }
    }, {
      key: "updateWorldMatrix",
      value: function updateWorldMatrix(t, e) {
        _get(_getPrototypeOf(Qi.prototype), "updateWorldMatrix", this).call(this, t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return Qi;
  }(Gn);
  var tr = /*#__PURE__*/function (_Qi) {
    _inherits(tr, _Qi);
    var _super17 = _createSuper(tr);
    function tr() {
      var _this14;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2e3;
      _classCallCheck(this, tr);
      _this14 = _super17.call(this), _this14.isPerspectiveCamera = !0, _this14.type = "PerspectiveCamera", _this14.fov = t, _this14.zoom = 1, _this14.near = n, _this14.far = i, _this14.focus = 10, _this14.aspect = e, _this14.view = null, _this14.filmGauge = 35, _this14.filmOffset = 0, _this14.updateProjectionMatrix();
      return _this14;
    }
    _createClass(tr, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(tr.prototype), "copy", this).call(this, t, e), this.fov = t.fov, this.zoom = t.zoom, this.near = t.near, this.far = t.far, this.focus = t.focus, this.aspect = t.aspect, this.view = null === t.view ? null : Object.assign({}, t.view), this.filmGauge = t.filmGauge, this.filmOffset = t.filmOffset, this;
      }
    }, {
      key: "setFocalLength",
      value: function setFocalLength(t) {
        var e = .5 * this.getFilmHeight() / t;
        this.fov = 2 * $t * Math.atan(e), this.updateProjectionMatrix();
      }
    }, {
      key: "getFocalLength",
      value: function getFocalLength() {
        var t = Math.tan(.5 * Kt * this.fov);
        return .5 * this.getFilmHeight() / t;
      }
    }, {
      key: "getEffectiveFOV",
      value: function getEffectiveFOV() {
        return 2 * $t * Math.atan(Math.tan(.5 * Kt * this.fov) / this.zoom);
      }
    }, {
      key: "getFilmWidth",
      value: function getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
      }
    }, {
      key: "getFilmHeight",
      value: function getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
      }
    }, {
      key: "setViewOffset",
      value: function setViewOffset(t, e, n, i, r, s) {
        this.aspect = t / e, null === this.view && (this.view = {
          enabled: !0,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = s, this.updateProjectionMatrix();
      }
    }, {
      key: "clearViewOffset",
      value: function clearViewOffset() {
        null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
      }
    }, {
      key: "updateProjectionMatrix",
      value: function updateProjectionMatrix() {
        var t = this.near;
        var e = t * Math.tan(.5 * Kt * this.fov) / this.zoom,
          n = 2 * e,
          i = this.aspect * n,
          r = -.5 * i;
        var s = this.view;
        if (null !== this.view && this.view.enabled) {
          var _t56 = s.fullWidth,
            _a14 = s.fullHeight;
          r += s.offsetX * i / _t56, e -= s.offsetY * n / _a14, i *= s.width / _t56, n *= s.height / _a14;
        }
        var a = this.filmOffset;
        0 !== a && (r += t * a / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, e, e - n, t, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(tr.prototype), "toJSON", this).call(this, t);
        return e.object.fov = this.fov, e.object.zoom = this.zoom, e.object.near = this.near, e.object.far = this.far, e.object.focus = this.focus, e.object.aspect = this.aspect, null !== this.view && (e.object.view = Object.assign({}, this.view)), e.object.filmGauge = this.filmGauge, e.object.filmOffset = this.filmOffset, e;
      }
    }]);
    return tr;
  }(Qi);
  var er = -90;
  var nr = /*#__PURE__*/function (_Gn3) {
    _inherits(nr, _Gn3);
    var _super18 = _createSuper(nr);
    function nr(t, e, n) {
      var _this15;
      _classCallCheck(this, nr);
      _this15 = _super18.call(this), _this15.type = "CubeCamera", _this15.renderTarget = n, _this15.coordinateSystem = null, _this15.activeMipmapLevel = 0;
      var i = new tr(er, 1, t, e);
      i.layers = _this15.layers, _this15.add(i);
      var r = new tr(er, 1, t, e);
      r.layers = _this15.layers, _this15.add(r);
      var s = new tr(er, 1, t, e);
      s.layers = _this15.layers, _this15.add(s);
      var a = new tr(er, 1, t, e);
      a.layers = _this15.layers, _this15.add(a);
      var o = new tr(er, 1, t, e);
      o.layers = _this15.layers, _this15.add(o);
      var l = new tr(er, 1, t, e);
      l.layers = _this15.layers, _this15.add(l);
      return _this15;
    }
    _createClass(nr, [{
      key: "updateCoordinateSystem",
      value: function updateCoordinateSystem() {
        var t = this.coordinateSystem,
          e = this.children.concat(),
          _e50 = _slicedToArray(e, 6),
          n = _e50[0],
          i = _e50[1],
          r = _e50[2],
          s = _e50[3],
          a = _e50[4],
          o = _e50[5];
        var _iterator = _createForOfIteratorHelper(e),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _t57 = _step.value;
            this.remove(_t57);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        if (t === jt) n.up.set(0, 1, 0), n.lookAt(1, 0, 0), i.up.set(0, 1, 0), i.lookAt(-1, 0, 0), r.up.set(0, 0, -1), r.lookAt(0, 1, 0), s.up.set(0, 0, 1), s.lookAt(0, -1, 0), a.up.set(0, 1, 0), a.lookAt(0, 0, 1), o.up.set(0, 1, 0), o.lookAt(0, 0, -1);else {
          if (t !== qt) throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + t);
          n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), i.up.set(0, -1, 0), i.lookAt(1, 0, 0), r.up.set(0, 0, 1), r.lookAt(0, 1, 0), s.up.set(0, 0, -1), s.lookAt(0, -1, 0), a.up.set(0, -1, 0), a.lookAt(0, 0, 1), o.up.set(0, -1, 0), o.lookAt(0, 0, -1);
        }
        var _iterator2 = _createForOfIteratorHelper(e),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _t58 = _step2.value;
            this.add(_t58), _t58.updateMatrixWorld();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }, {
      key: "update",
      value: function update(t, e) {
        null === this.parent && this.updateMatrixWorld();
        var n = this.renderTarget,
          i = this.activeMipmapLevel;
        this.coordinateSystem !== t.coordinateSystem && (this.coordinateSystem = t.coordinateSystem, this.updateCoordinateSystem());
        var _this$children = _slicedToArray(this.children, 6),
          r = _this$children[0],
          s = _this$children[1],
          a = _this$children[2],
          o = _this$children[3],
          l = _this$children[4],
          c = _this$children[5],
          h = t.getRenderTarget(),
          u = t.getActiveCubeFace(),
          d = t.getActiveMipmapLevel(),
          p = t.xr.enabled;
        t.xr.enabled = !1;
        var m = n.texture.generateMipmaps;
        n.texture.generateMipmaps = !1, t.setRenderTarget(n, 0, i), t.render(e, r), t.setRenderTarget(n, 1, i), t.render(e, s), t.setRenderTarget(n, 2, i), t.render(e, a), t.setRenderTarget(n, 3, i), t.render(e, o), t.setRenderTarget(n, 4, i), t.render(e, l), n.texture.generateMipmaps = m, t.setRenderTarget(n, 5, i), t.render(e, c), t.setRenderTarget(h, u, d), t.xr.enabled = p, n.texture.needsPMREMUpdate = !0;
      }
    }]);
    return nr;
  }(Gn);
  var ir = /*#__PURE__*/function (_Ie3) {
    _inherits(ir, _Ie3);
    var _super19 = _createSuper(ir);
    function ir(t, e, n, i, r, s, a, o, l, c) {
      var _this16;
      _classCallCheck(this, ir);
      _this16 = _super19.call(this, t = void 0 !== t ? t : [], e = void 0 !== e ? e : v, n, i, r, s, a, o, l, c), _this16.isCubeTexture = !0, _this16.flipY = !1;
      return _this16;
    }
    _createClass(ir, [{
      key: "images",
      get: function get() {
        return this.image;
      },
      set: function set(t) {
        this.image = t;
      }
    }]);
    return ir;
  }(Ie);
  var rr = /*#__PURE__*/function (_Ne) {
    _inherits(rr, _Ne);
    var _super20 = _createSuper(rr);
    function rr() {
      var _this17;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, rr);
      _this17 = _super20.call(this, t, t, e), _this17.isWebGLCubeRenderTarget = !0;
      var n = {
          width: t,
          height: t,
          depth: 1
        },
        i = [n, n, n, n, n, n];
      void 0 !== e.encoding && (ve("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."), e.colorSpace = e.encoding === It ? Dt : Ut), _this17.texture = new ir(i, e.mapping, e.wrapS, e.wrapT, e.magFilter, e.minFilter, e.format, e.type, e.anisotropy, e.colorSpace), _this17.texture.isRenderTargetTexture = !0, _this17.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps, _this17.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : C;
      return _this17;
    }
    _createClass(rr, [{
      key: "fromEquirectangularTexture",
      value: function fromEquirectangularTexture(t, e) {
        this.texture.type = e.type, this.texture.colorSpace = e.colorSpace, this.texture.generateMipmaps = e.generateMipmaps, this.texture.minFilter = e.minFilter, this.texture.magFilter = e.magFilter;
        var n = {
            uniforms: {
              tEquirect: {
                value: null
              }
            },
            vertexShader: "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
            fragmentShader: "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"
          },
          i = new qi(5, 5, 5),
          r = new $i({
            name: "CubemapFromEquirect",
            uniforms: Yi(n.uniforms),
            vertexShader: n.vertexShader,
            fragmentShader: n.fragmentShader,
            side: a,
            blending: 0
          });
        r.uniforms.tEquirect.value = e;
        var s = new Xi(i, r),
          o = e.minFilter;
        e.minFilter === P && (e.minFilter = C);
        return new nr(1, 10, this).update(t, s), e.minFilter = o, s.geometry.dispose(), s.material.dispose(), this;
      }
    }, {
      key: "clear",
      value: function clear(t, e, n, i) {
        var r = t.getRenderTarget();
        for (var _r37 = 0; _r37 < 6; _r37++) t.setRenderTarget(this, _r37), t.clear(e, n, i);
        t.setRenderTarget(r);
      }
    }]);
    return rr;
  }(Ne);
  var sr = new ze(),
    ar = new ze(),
    or = new he();
  var lr = /*#__PURE__*/function () {
    function lr() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze(1, 0, 0);
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _classCallCheck(this, lr);
      this.isPlane = !0, this.normal = t, this.constant = e;
    }
    _createClass(lr, [{
      key: "set",
      value: function set(t, e) {
        return this.normal.copy(t), this.constant = e, this;
      }
    }, {
      key: "setComponents",
      value: function setComponents(t, e, n, i) {
        return this.normal.set(t, e, n), this.constant = i, this;
      }
    }, {
      key: "setFromNormalAndCoplanarPoint",
      value: function setFromNormalAndCoplanarPoint(t, e) {
        return this.normal.copy(t), this.constant = -e.dot(this.normal), this;
      }
    }, {
      key: "setFromCoplanarPoints",
      value: function setFromCoplanarPoints(t, e, n) {
        var i = sr.subVectors(n, e).cross(ar.subVectors(t, e)).normalize();
        return this.setFromNormalAndCoplanarPoint(i, t), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.normal.copy(t.normal), this.constant = t.constant, this;
      }
    }, {
      key: "normalize",
      value: function normalize() {
        var t = 1 / this.normal.length();
        return this.normal.multiplyScalar(t), this.constant *= t, this;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this.constant *= -1, this.normal.negate(), this;
      }
    }, {
      key: "distanceToPoint",
      value: function distanceToPoint(t) {
        return this.normal.dot(t) + this.constant;
      }
    }, {
      key: "distanceToSphere",
      value: function distanceToSphere(t) {
        return this.distanceToPoint(t.center) - t.radius;
      }
    }, {
      key: "projectPoint",
      value: function projectPoint(t, e) {
        return e.copy(t).addScaledVector(this.normal, -this.distanceToPoint(t));
      }
    }, {
      key: "intersectLine",
      value: function intersectLine(t, e) {
        var n = t.delta(sr),
          i = this.normal.dot(n);
        if (0 === i) return 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : null;
        var r = -(t.start.dot(this.normal) + this.constant) / i;
        return r < 0 || r > 1 ? null : e.copy(t.start).addScaledVector(n, r);
      }
    }, {
      key: "intersectsLine",
      value: function intersectsLine(t) {
        var e = this.distanceToPoint(t.start),
          n = this.distanceToPoint(t.end);
        return e < 0 && n > 0 || n < 0 && e > 0;
      }
    }, {
      key: "intersectsBox",
      value: function intersectsBox(t) {
        return t.intersectsPlane(this);
      }
    }, {
      key: "intersectsSphere",
      value: function intersectsSphere(t) {
        return t.intersectsPlane(this);
      }
    }, {
      key: "coplanarPoint",
      value: function coplanarPoint(t) {
        return t.copy(this.normal).multiplyScalar(-this.constant);
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t, e) {
        var n = e || or.getNormalMatrix(t),
          i = this.coplanarPoint(sr).applyMatrix4(t),
          r = this.normal.applyMatrix3(n).normalize();
        return this.constant = -i.dot(r), this;
      }
    }, {
      key: "translate",
      value: function translate(t) {
        return this.constant -= t.dot(this.normal), this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.normal.equals(this.normal) && t.constant === this.constant;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return lr;
  }();
  var cr = new on(),
    hr = new ze();
  var ur = /*#__PURE__*/function () {
    function ur() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new lr();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new lr();
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new lr();
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new lr();
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new lr();
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new lr();
      _classCallCheck(this, ur);
      this.planes = [t, e, n, i, r, s];
    }
    _createClass(ur, [{
      key: "set",
      value: function set(t, e, n, i, r, s) {
        var a = this.planes;
        return a[0].copy(t), a[1].copy(e), a[2].copy(n), a[3].copy(i), a[4].copy(r), a[5].copy(s), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        var e = this.planes;
        for (var _n62 = 0; _n62 < 6; _n62++) e[_n62].copy(t.planes[_n62]);
        return this;
      }
    }, {
      key: "setFromProjectionMatrix",
      value: function setFromProjectionMatrix(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2e3;
        var n = this.planes,
          i = t.elements,
          r = i[0],
          s = i[1],
          a = i[2],
          o = i[3],
          l = i[4],
          c = i[5],
          h = i[6],
          u = i[7],
          d = i[8],
          p = i[9],
          m = i[10],
          f = i[11],
          g = i[12],
          _ = i[13],
          v = i[14],
          y = i[15];
        if (n[0].setComponents(o - r, u - l, f - d, y - g).normalize(), n[1].setComponents(o + r, u + l, f + d, y + g).normalize(), n[2].setComponents(o + s, u + c, f + p, y + _).normalize(), n[3].setComponents(o - s, u - c, f - p, y - _).normalize(), n[4].setComponents(o - a, u - h, f - m, y - v).normalize(), e === jt) n[5].setComponents(o + a, u + h, f + m, y + v).normalize();else {
          if (e !== qt) throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + e);
          n[5].setComponents(a, h, m, v).normalize();
        }
        return this;
      }
    }, {
      key: "intersectsObject",
      value: function intersectsObject(t) {
        if (void 0 !== t.boundingSphere) null === t.boundingSphere && t.computeBoundingSphere(), cr.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else {
          var _e51 = t.geometry;
          null === _e51.boundingSphere && _e51.computeBoundingSphere(), cr.copy(_e51.boundingSphere).applyMatrix4(t.matrixWorld);
        }
        return this.intersectsSphere(cr);
      }
    }, {
      key: "intersectsSprite",
      value: function intersectsSprite(t) {
        return cr.center.set(0, 0, 0), cr.radius = .7071067811865476, cr.applyMatrix4(t.matrixWorld), this.intersectsSphere(cr);
      }
    }, {
      key: "intersectsSphere",
      value: function intersectsSphere(t) {
        var e = this.planes,
          n = t.center,
          i = -t.radius;
        for (var _t59 = 0; _t59 < 6; _t59++) {
          if (e[_t59].distanceToPoint(n) < i) return !1;
        }
        return !0;
      }
    }, {
      key: "intersectsBox",
      value: function intersectsBox(t) {
        var e = this.planes;
        for (var _n63 = 0; _n63 < 6; _n63++) {
          var _i49 = e[_n63];
          if (hr.x = _i49.normal.x > 0 ? t.max.x : t.min.x, hr.y = _i49.normal.y > 0 ? t.max.y : t.min.y, hr.z = _i49.normal.z > 0 ? t.max.z : t.min.z, _i49.distanceToPoint(hr) < 0) return !1;
        }
        return !0;
      }
    }, {
      key: "containsPoint",
      value: function containsPoint(t) {
        var e = this.planes;
        for (var _n64 = 0; _n64 < 6; _n64++) if (e[_n64].distanceToPoint(t) < 0) return !1;
        return !0;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return ur;
  }();
  function dr() {
    var t = null,
      e = !1,
      n = null,
      i = null;
    function r(e, s) {
      n(e, s), i = t.requestAnimationFrame(r);
    }
    return {
      start: function start() {
        !0 !== e && null !== n && (i = t.requestAnimationFrame(r), e = !0);
      },
      stop: function stop() {
        t.cancelAnimationFrame(i), e = !1;
      },
      setAnimationLoop: function setAnimationLoop(t) {
        n = t;
      },
      setContext: function setContext(e) {
        t = e;
      }
    };
  }
  function pr(t, e) {
    var n = e.isWebGL2,
      i = new WeakMap();
    return {
      get: function get(t) {
        return t.isInterleavedBufferAttribute && (t = t.data), i.get(t);
      },
      remove: function remove(e) {
        e.isInterleavedBufferAttribute && (e = e.data);
        var n = i.get(e);
        n && (t.deleteBuffer(n.buffer), i.delete(e));
      },
      update: function update(e, r) {
        if (e.isGLBufferAttribute) {
          var _t60 = i.get(e);
          return void ((!_t60 || _t60.version < e.version) && i.set(e, {
            buffer: e.buffer,
            type: e.type,
            bytesPerElement: e.elementSize,
            version: e.version
          }));
        }
        e.isInterleavedBufferAttribute && (e = e.data);
        var s = i.get(e);
        void 0 === s ? i.set(e, function (e, i) {
          var r = e.array,
            s = e.usage,
            a = t.createBuffer();
          var o;
          if (t.bindBuffer(i, a), t.bufferData(i, r, s), e.onUploadCallback(), r instanceof Float32Array) o = t.FLOAT;else if (r instanceof Uint16Array) {
            if (e.isFloat16BufferAttribute) {
              if (!n) throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
              o = t.HALF_FLOAT;
            } else o = t.UNSIGNED_SHORT;
          } else if (r instanceof Int16Array) o = t.SHORT;else if (r instanceof Uint32Array) o = t.UNSIGNED_INT;else if (r instanceof Int32Array) o = t.INT;else if (r instanceof Int8Array) o = t.BYTE;else if (r instanceof Uint8Array) o = t.UNSIGNED_BYTE;else {
            if (!(r instanceof Uint8ClampedArray)) throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + r);
            o = t.UNSIGNED_BYTE;
          }
          return {
            buffer: a,
            type: o,
            bytesPerElement: r.BYTES_PER_ELEMENT,
            version: e.version
          };
        }(e, r)) : s.version < e.version && (!function (e, i, r) {
          var s = i.array,
            a = i.updateRange;
          t.bindBuffer(r, e), -1 === a.count ? t.bufferSubData(r, 0, s) : (n ? t.bufferSubData(r, a.offset * s.BYTES_PER_ELEMENT, s, a.offset, a.count) : t.bufferSubData(r, a.offset * s.BYTES_PER_ELEMENT, s.subarray(a.offset, a.offset + a.count)), a.count = -1), i.onUploadCallback();
        }(s.buffer, e, r), s.version = e.version);
      }
    };
  }
  var mr = /*#__PURE__*/function (_Ai2) {
    _inherits(mr, _Ai2);
    var _super21 = _createSuper(mr);
    function mr() {
      var _this18;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      _classCallCheck(this, mr);
      _this18 = _super21.call(this), _this18.type = "PlaneGeometry", _this18.parameters = {
        width: t,
        height: e,
        widthSegments: n,
        heightSegments: i
      };
      var r = t / 2,
        s = e / 2,
        a = Math.floor(n),
        o = Math.floor(i),
        l = a + 1,
        c = o + 1,
        h = t / a,
        u = e / o,
        d = [],
        p = [],
        m = [],
        f = [];
      for (var _t61 = 0; _t61 < c; _t61++) {
        var _e52 = _t61 * u - s;
        for (var _n65 = 0; _n65 < l; _n65++) {
          var _i50 = _n65 * h - r;
          p.push(_i50, -_e52, 0), m.push(0, 0, 1), f.push(_n65 / a), f.push(1 - _t61 / o);
        }
      }
      for (var _t62 = 0; _t62 < o; _t62++) for (var _e53 = 0; _e53 < a; _e53++) {
        var _n66 = _e53 + l * _t62,
          _i51 = _e53 + l * (_t62 + 1),
          _r38 = _e53 + 1 + l * (_t62 + 1),
          _s15 = _e53 + 1 + l * _t62;
        d.push(_n66, _i51, _s15), d.push(_i51, _r38, _s15);
      }
      _this18.setIndex(d), _this18.setAttribute("position", new yi(p, 3)), _this18.setAttribute("normal", new yi(m, 3)), _this18.setAttribute("uv", new yi(f, 2));
      return _this18;
    }
    _createClass(mr, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(mr.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new mr(t.width, t.height, t.widthSegments, t.heightSegments);
      }
    }]);
    return mr;
  }(Ai);
  var fr = {
      alphahash_fragment: "#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",
      alphahash_pars_fragment: "#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",
      alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",
      alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
      alphatest_fragment: "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",
      alphatest_pars_fragment: "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",
      aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",
      aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
      begin_vertex: "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",
      beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
      bsdfs: "float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",
      iridescence_fragment: "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",
      bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
      clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
      clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
      clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
      clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
      color_fragment: "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",
      color_pars_fragment: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",
      color_pars_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",
      color_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",
      common: "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",
      cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
      defaultnormal_vertex: "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
      displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
      displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",
      emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
      emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
      colorspace_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
      colorspace_pars_fragment: "\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",
      envmap_fragment: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
      envmap_common_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
      envmap_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
      envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
      envmap_physical_pars_fragment: "#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",
      envmap_vertex: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
      fog_vertex: "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",
      fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",
      fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
      fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
      gradientmap_pars_fragment: "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",
      lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",
      lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
      lights_lambert_fragment: "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",
      lights_lambert_pars_fragment: "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",
      lights_pars_begin: "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",
      lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
      lights_toon_pars_fragment: "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",
      lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
      lights_phong_pars_fragment: "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",
      lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tanisotropyV /= material.anisotropy;\n\tmaterial.anisotropy = saturate( material.anisotropy );\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif",
      lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
      lights_fragment_begin: "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal;\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
      lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",
      lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",
      logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
      logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
      logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
      logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
      map_fragment: "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",
      map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
      map_particle_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
      map_particle_pars_fragment: "#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
      metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
      metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
      morphcolor_vertex: "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",
      morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",
      morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",
      morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",
      normal_fragment_begin: "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",
      normal_fragment_maps: "#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",
      normal_pars_fragment: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
      normal_pars_vertex: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
      normal_vertex: "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",
      normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",
      clearcoat_normal_fragment_begin: "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",
      clearcoat_normal_fragment_maps: "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",
      clearcoat_pars_fragment: "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",
      iridescence_pars_fragment: "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",
      opaque_fragment: "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",
      packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",
      premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
      project_vertex: "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
      dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
      dithering_pars_fragment: "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
      roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
      roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
      shadowmap_pars_fragment: "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
      shadowmap_pars_vertex: "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
      shadowmap_vertex: "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",
      shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
      skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
      skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",
      skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
      skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
      specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
      specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
      tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
      tonemapping_pars_fragment: "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
      transmission_fragment: "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",
      transmission_pars_fragment: "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",
      uv_pars_fragment: "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",
      uv_pars_vertex: "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",
      uv_vertex: "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",
      worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
      background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
      background_frag: "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
      backgroundCube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
      backgroundCube_frag: "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
      cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
      cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
      depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
      depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
      distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
      distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
      equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
      equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
      linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
      linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
      meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
      meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
      meshlambert_vert: "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
      meshlambert_frag: "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
      meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
      meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
      meshnormal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
      meshnormal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",
      meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
      meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
      meshphysical_vert: "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",
      meshphysical_frag: "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
      meshtoon_vert: "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
      meshtoon_frag: "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
      points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
      points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
      shadow_vert: "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
      shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",
      sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
      sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"
    },
    gr = {
      common: {
        diffuse: {
          value: new ai(16777215)
        },
        opacity: {
          value: 1
        },
        map: {
          value: null
        },
        mapTransform: {
          value: new he()
        },
        alphaMap: {
          value: null
        },
        alphaMapTransform: {
          value: new he()
        },
        alphaTest: {
          value: 0
        }
      },
      specularmap: {
        specularMap: {
          value: null
        },
        specularMapTransform: {
          value: new he()
        }
      },
      envmap: {
        envMap: {
          value: null
        },
        flipEnvMap: {
          value: -1
        },
        reflectivity: {
          value: 1
        },
        ior: {
          value: 1.5
        },
        refractionRatio: {
          value: .98
        }
      },
      aomap: {
        aoMap: {
          value: null
        },
        aoMapIntensity: {
          value: 1
        },
        aoMapTransform: {
          value: new he()
        }
      },
      lightmap: {
        lightMap: {
          value: null
        },
        lightMapIntensity: {
          value: 1
        },
        lightMapTransform: {
          value: new he()
        }
      },
      bumpmap: {
        bumpMap: {
          value: null
        },
        bumpMapTransform: {
          value: new he()
        },
        bumpScale: {
          value: 1
        }
      },
      normalmap: {
        normalMap: {
          value: null
        },
        normalMapTransform: {
          value: new he()
        },
        normalScale: {
          value: new ce(1, 1)
        }
      },
      displacementmap: {
        displacementMap: {
          value: null
        },
        displacementMapTransform: {
          value: new he()
        },
        displacementScale: {
          value: 1
        },
        displacementBias: {
          value: 0
        }
      },
      emissivemap: {
        emissiveMap: {
          value: null
        },
        emissiveMapTransform: {
          value: new he()
        }
      },
      metalnessmap: {
        metalnessMap: {
          value: null
        },
        metalnessMapTransform: {
          value: new he()
        }
      },
      roughnessmap: {
        roughnessMap: {
          value: null
        },
        roughnessMapTransform: {
          value: new he()
        }
      },
      gradientmap: {
        gradientMap: {
          value: null
        }
      },
      fog: {
        fogDensity: {
          value: 25e-5
        },
        fogNear: {
          value: 1
        },
        fogFar: {
          value: 2e3
        },
        fogColor: {
          value: new ai(16777215)
        }
      },
      lights: {
        ambientLightColor: {
          value: []
        },
        lightProbe: {
          value: []
        },
        directionalLights: {
          value: [],
          properties: {
            direction: {},
            color: {}
          }
        },
        directionalLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {}
          }
        },
        directionalShadowMap: {
          value: []
        },
        directionalShadowMatrix: {
          value: []
        },
        spotLights: {
          value: [],
          properties: {
            color: {},
            position: {},
            direction: {},
            distance: {},
            coneCos: {},
            penumbraCos: {},
            decay: {}
          }
        },
        spotLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {}
          }
        },
        spotLightMap: {
          value: []
        },
        spotShadowMap: {
          value: []
        },
        spotLightMatrix: {
          value: []
        },
        pointLights: {
          value: [],
          properties: {
            color: {},
            position: {},
            decay: {},
            distance: {}
          }
        },
        pointLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {},
            shadowCameraNear: {},
            shadowCameraFar: {}
          }
        },
        pointShadowMap: {
          value: []
        },
        pointShadowMatrix: {
          value: []
        },
        hemisphereLights: {
          value: [],
          properties: {
            direction: {},
            skyColor: {},
            groundColor: {}
          }
        },
        rectAreaLights: {
          value: [],
          properties: {
            color: {},
            position: {},
            width: {},
            height: {}
          }
        },
        ltc_1: {
          value: null
        },
        ltc_2: {
          value: null
        }
      },
      points: {
        diffuse: {
          value: new ai(16777215)
        },
        opacity: {
          value: 1
        },
        size: {
          value: 1
        },
        scale: {
          value: 1
        },
        map: {
          value: null
        },
        alphaMap: {
          value: null
        },
        alphaMapTransform: {
          value: new he()
        },
        alphaTest: {
          value: 0
        },
        uvTransform: {
          value: new he()
        }
      },
      sprite: {
        diffuse: {
          value: new ai(16777215)
        },
        opacity: {
          value: 1
        },
        center: {
          value: new ce(.5, .5)
        },
        rotation: {
          value: 0
        },
        map: {
          value: null
        },
        mapTransform: {
          value: new he()
        },
        alphaMap: {
          value: null
        },
        alphaMapTransform: {
          value: new he()
        },
        alphaTest: {
          value: 0
        }
      }
    },
    _r = {
      basic: {
        uniforms: Zi([gr.common, gr.specularmap, gr.envmap, gr.aomap, gr.lightmap, gr.fog]),
        vertexShader: fr.meshbasic_vert,
        fragmentShader: fr.meshbasic_frag
      },
      lambert: {
        uniforms: Zi([gr.common, gr.specularmap, gr.envmap, gr.aomap, gr.lightmap, gr.emissivemap, gr.bumpmap, gr.normalmap, gr.displacementmap, gr.fog, gr.lights, {
          emissive: {
            value: new ai(0)
          }
        }]),
        vertexShader: fr.meshlambert_vert,
        fragmentShader: fr.meshlambert_frag
      },
      phong: {
        uniforms: Zi([gr.common, gr.specularmap, gr.envmap, gr.aomap, gr.lightmap, gr.emissivemap, gr.bumpmap, gr.normalmap, gr.displacementmap, gr.fog, gr.lights, {
          emissive: {
            value: new ai(0)
          },
          specular: {
            value: new ai(1118481)
          },
          shininess: {
            value: 30
          }
        }]),
        vertexShader: fr.meshphong_vert,
        fragmentShader: fr.meshphong_frag
      },
      standard: {
        uniforms: Zi([gr.common, gr.envmap, gr.aomap, gr.lightmap, gr.emissivemap, gr.bumpmap, gr.normalmap, gr.displacementmap, gr.roughnessmap, gr.metalnessmap, gr.fog, gr.lights, {
          emissive: {
            value: new ai(0)
          },
          roughness: {
            value: 1
          },
          metalness: {
            value: 0
          },
          envMapIntensity: {
            value: 1
          }
        }]),
        vertexShader: fr.meshphysical_vert,
        fragmentShader: fr.meshphysical_frag
      },
      toon: {
        uniforms: Zi([gr.common, gr.aomap, gr.lightmap, gr.emissivemap, gr.bumpmap, gr.normalmap, gr.displacementmap, gr.gradientmap, gr.fog, gr.lights, {
          emissive: {
            value: new ai(0)
          }
        }]),
        vertexShader: fr.meshtoon_vert,
        fragmentShader: fr.meshtoon_frag
      },
      matcap: {
        uniforms: Zi([gr.common, gr.bumpmap, gr.normalmap, gr.displacementmap, gr.fog, {
          matcap: {
            value: null
          }
        }]),
        vertexShader: fr.meshmatcap_vert,
        fragmentShader: fr.meshmatcap_frag
      },
      points: {
        uniforms: Zi([gr.points, gr.fog]),
        vertexShader: fr.points_vert,
        fragmentShader: fr.points_frag
      },
      dashed: {
        uniforms: Zi([gr.common, gr.fog, {
          scale: {
            value: 1
          },
          dashSize: {
            value: 1
          },
          totalSize: {
            value: 2
          }
        }]),
        vertexShader: fr.linedashed_vert,
        fragmentShader: fr.linedashed_frag
      },
      depth: {
        uniforms: Zi([gr.common, gr.displacementmap]),
        vertexShader: fr.depth_vert,
        fragmentShader: fr.depth_frag
      },
      normal: {
        uniforms: Zi([gr.common, gr.bumpmap, gr.normalmap, gr.displacementmap, {
          opacity: {
            value: 1
          }
        }]),
        vertexShader: fr.meshnormal_vert,
        fragmentShader: fr.meshnormal_frag
      },
      sprite: {
        uniforms: Zi([gr.sprite, gr.fog]),
        vertexShader: fr.sprite_vert,
        fragmentShader: fr.sprite_frag
      },
      background: {
        uniforms: {
          uvTransform: {
            value: new he()
          },
          t2D: {
            value: null
          },
          backgroundIntensity: {
            value: 1
          }
        },
        vertexShader: fr.background_vert,
        fragmentShader: fr.background_frag
      },
      backgroundCube: {
        uniforms: {
          envMap: {
            value: null
          },
          flipEnvMap: {
            value: -1
          },
          backgroundBlurriness: {
            value: 0
          },
          backgroundIntensity: {
            value: 1
          }
        },
        vertexShader: fr.backgroundCube_vert,
        fragmentShader: fr.backgroundCube_frag
      },
      cube: {
        uniforms: {
          tCube: {
            value: null
          },
          tFlip: {
            value: -1
          },
          opacity: {
            value: 1
          }
        },
        vertexShader: fr.cube_vert,
        fragmentShader: fr.cube_frag
      },
      equirect: {
        uniforms: {
          tEquirect: {
            value: null
          }
        },
        vertexShader: fr.equirect_vert,
        fragmentShader: fr.equirect_frag
      },
      distanceRGBA: {
        uniforms: Zi([gr.common, gr.displacementmap, {
          referencePosition: {
            value: new ze()
          },
          nearDistance: {
            value: 1
          },
          farDistance: {
            value: 1e3
          }
        }]),
        vertexShader: fr.distanceRGBA_vert,
        fragmentShader: fr.distanceRGBA_frag
      },
      shadow: {
        uniforms: Zi([gr.lights, gr.fog, {
          color: {
            value: new ai(0)
          },
          opacity: {
            value: 1
          }
        }]),
        vertexShader: fr.shadow_vert,
        fragmentShader: fr.shadow_frag
      }
    };
  _r.physical = {
    uniforms: Zi([_r.standard.uniforms, {
      clearcoat: {
        value: 0
      },
      clearcoatMap: {
        value: null
      },
      clearcoatMapTransform: {
        value: new he()
      },
      clearcoatNormalMap: {
        value: null
      },
      clearcoatNormalMapTransform: {
        value: new he()
      },
      clearcoatNormalScale: {
        value: new ce(1, 1)
      },
      clearcoatRoughness: {
        value: 0
      },
      clearcoatRoughnessMap: {
        value: null
      },
      clearcoatRoughnessMapTransform: {
        value: new he()
      },
      iridescence: {
        value: 0
      },
      iridescenceMap: {
        value: null
      },
      iridescenceMapTransform: {
        value: new he()
      },
      iridescenceIOR: {
        value: 1.3
      },
      iridescenceThicknessMinimum: {
        value: 100
      },
      iridescenceThicknessMaximum: {
        value: 400
      },
      iridescenceThicknessMap: {
        value: null
      },
      iridescenceThicknessMapTransform: {
        value: new he()
      },
      sheen: {
        value: 0
      },
      sheenColor: {
        value: new ai(0)
      },
      sheenColorMap: {
        value: null
      },
      sheenColorMapTransform: {
        value: new he()
      },
      sheenRoughness: {
        value: 1
      },
      sheenRoughnessMap: {
        value: null
      },
      sheenRoughnessMapTransform: {
        value: new he()
      },
      transmission: {
        value: 0
      },
      transmissionMap: {
        value: null
      },
      transmissionMapTransform: {
        value: new he()
      },
      transmissionSamplerSize: {
        value: new ce()
      },
      transmissionSamplerMap: {
        value: null
      },
      thickness: {
        value: 0
      },
      thicknessMap: {
        value: null
      },
      thicknessMapTransform: {
        value: new he()
      },
      attenuationDistance: {
        value: 0
      },
      attenuationColor: {
        value: new ai(0)
      },
      specularColor: {
        value: new ai(1, 1, 1)
      },
      specularColorMap: {
        value: null
      },
      specularColorMapTransform: {
        value: new he()
      },
      specularIntensity: {
        value: 1
      },
      specularIntensityMap: {
        value: null
      },
      specularIntensityMapTransform: {
        value: new he()
      },
      anisotropyVector: {
        value: new ce()
      },
      anisotropyMap: {
        value: null
      },
      anisotropyMapTransform: {
        value: new he()
      }
    }]),
    vertexShader: fr.meshphysical_vert,
    fragmentShader: fr.meshphysical_frag
  };
  var vr = {
    r: 0,
    b: 0,
    g: 0
  };
  function yr(t, e, n, i, r, o, l) {
    var c = new ai(0);
    var h,
      u,
      d = !0 === o ? 0 : 1,
      p = null,
      m = 0,
      f = null;
    function g(e, n) {
      e.getRGB(vr, Ji(t)), i.buffers.color.setClear(vr.r, vr.g, vr.b, n, l);
    }
    return {
      getClearColor: function getClearColor() {
        return c;
      },
      setClearColor: function setClearColor(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        c.set(t), d = e, g(c, d);
      },
      getClearAlpha: function getClearAlpha() {
        return d;
      },
      setClearAlpha: function setClearAlpha(t) {
        d = t, g(c, d);
      },
      render: function render(o, _) {
        var v = !1,
          y = !0 === _.isScene ? _.background : null;
        if (y && y.isTexture) {
          y = (_.backgroundBlurriness > 0 ? n : e).get(y);
        }
        null === y ? g(c, d) : y && y.isColor && (g(y, 1), v = !0);
        var x = t.xr.getEnvironmentBlendMode();
        "additive" === x ? i.buffers.color.setClear(0, 0, 0, 1, l) : "alpha-blend" === x && i.buffers.color.setClear(0, 0, 0, 0, l), (t.autoClear || v) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil), y && (y.isCubeTexture || y.mapping === S) ? (void 0 === u && (u = new Xi(new qi(1, 1, 1), new $i({
          name: "BackgroundCubeMaterial",
          uniforms: Yi(_r.backgroundCube.uniforms),
          vertexShader: _r.backgroundCube.vertexShader,
          fragmentShader: _r.backgroundCube.fragmentShader,
          side: a,
          depthTest: !1,
          depthWrite: !1,
          fog: !1
        })), u.geometry.deleteAttribute("normal"), u.geometry.deleteAttribute("uv"), u.onBeforeRender = function (t, e, n) {
          this.matrixWorld.copyPosition(n.matrixWorld);
        }, Object.defineProperty(u.material, "envMap", {
          get: function get() {
            return this.uniforms.envMap.value;
          }
        }), r.update(u)), u.material.uniforms.envMap.value = y, u.material.uniforms.flipEnvMap.value = y.isCubeTexture && !1 === y.isRenderTargetTexture ? -1 : 1, u.material.uniforms.backgroundBlurriness.value = _.backgroundBlurriness, u.material.uniforms.backgroundIntensity.value = _.backgroundIntensity, u.material.toneMapped = be.getTransfer(y.colorSpace) !== zt, p === y && m === y.version && f === t.toneMapping || (u.material.needsUpdate = !0, p = y, m = y.version, f = t.toneMapping), u.layers.enableAll(), o.unshift(u, u.geometry, u.material, 0, 0, null)) : y && y.isTexture && (void 0 === h && (h = new Xi(new mr(2, 2), new $i({
          name: "BackgroundMaterial",
          uniforms: Yi(_r.background.uniforms),
          vertexShader: _r.background.vertexShader,
          fragmentShader: _r.background.fragmentShader,
          side: s,
          depthTest: !1,
          depthWrite: !1,
          fog: !1
        })), h.geometry.deleteAttribute("normal"), Object.defineProperty(h.material, "map", {
          get: function get() {
            return this.uniforms.t2D.value;
          }
        }), r.update(h)), h.material.uniforms.t2D.value = y, h.material.uniforms.backgroundIntensity.value = _.backgroundIntensity, h.material.toneMapped = be.getTransfer(y.colorSpace) !== zt, !0 === y.matrixAutoUpdate && y.updateMatrix(), h.material.uniforms.uvTransform.value.copy(y.matrix), p === y && m === y.version && f === t.toneMapping || (h.material.needsUpdate = !0, p = y, m = y.version, f = t.toneMapping), h.layers.enableAll(), o.unshift(h, h.geometry, h.material, 0, 0, null));
      }
    };
  }
  function xr(t, e, n, i) {
    var r = t.getParameter(t.MAX_VERTEX_ATTRIBS),
      s = i.isWebGL2 ? null : e.get("OES_vertex_array_object"),
      a = i.isWebGL2 || null !== s,
      o = {},
      l = p(null);
    var c = l,
      h = !1;
    function u(e) {
      return i.isWebGL2 ? t.bindVertexArray(e) : s.bindVertexArrayOES(e);
    }
    function d(e) {
      return i.isWebGL2 ? t.deleteVertexArray(e) : s.deleteVertexArrayOES(e);
    }
    function p(t) {
      var e = [],
        n = [],
        i = [];
      for (var _t63 = 0; _t63 < r; _t63++) e[_t63] = 0, n[_t63] = 0, i[_t63] = 0;
      return {
        geometry: null,
        program: null,
        wireframe: !1,
        newAttributes: e,
        enabledAttributes: n,
        attributeDivisors: i,
        object: t,
        attributes: {},
        index: null
      };
    }
    function m() {
      var t = c.newAttributes;
      for (var _e54 = 0, _n67 = t.length; _e54 < _n67; _e54++) t[_e54] = 0;
    }
    function f(t) {
      g(t, 0);
    }
    function g(n, r) {
      var s = c.newAttributes,
        a = c.enabledAttributes,
        o = c.attributeDivisors;
      if (s[n] = 1, 0 === a[n] && (t.enableVertexAttribArray(n), a[n] = 1), o[n] !== r) {
        (i.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[i.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, r), o[n] = r;
      }
    }
    function _() {
      var e = c.newAttributes,
        n = c.enabledAttributes;
      for (var _i52 = 0, _r39 = n.length; _i52 < _r39; _i52++) n[_i52] !== e[_i52] && (t.disableVertexAttribArray(_i52), n[_i52] = 0);
    }
    function v(e, n, i, r, s, a, o) {
      !0 === o ? t.vertexAttribIPointer(e, n, i, s, a) : t.vertexAttribPointer(e, n, i, r, s, a);
    }
    function y() {
      x(), h = !0, c !== l && (c = l, u(c.object));
    }
    function x() {
      l.geometry = null, l.program = null, l.wireframe = !1;
    }
    return {
      setup: function setup(r, l, d, y, x) {
        var M = !1;
        if (a) {
          var _e55 = function (e, n, r) {
            var a = !0 === r.wireframe;
            var l = o[e.id];
            void 0 === l && (l = {}, o[e.id] = l);
            var c = l[n.id];
            void 0 === c && (c = {}, l[n.id] = c);
            var h = c[a];
            void 0 === h && (h = p(i.isWebGL2 ? t.createVertexArray() : s.createVertexArrayOES()), c[a] = h);
            return h;
          }(y, d, l);
          c !== _e55 && (c = _e55, u(c.object)), M = function (t, e, n, i) {
            var r = c.attributes,
              s = e.attributes;
            var a = 0;
            var o = n.getAttributes();
            for (var _e56 in o) {
              if (o[_e56].location >= 0) {
                var _n68 = r[_e56];
                var _i53 = s[_e56];
                if (void 0 === _i53 && ("instanceMatrix" === _e56 && t.instanceMatrix && (_i53 = t.instanceMatrix), "instanceColor" === _e56 && t.instanceColor && (_i53 = t.instanceColor)), void 0 === _n68) return !0;
                if (_n68.attribute !== _i53) return !0;
                if (_i53 && _n68.data !== _i53.data) return !0;
                a++;
              }
            }
            return c.attributesNum !== a || c.index !== i;
          }(r, y, d, x), M && function (t, e, n, i) {
            var r = {},
              s = e.attributes;
            var a = 0;
            var o = n.getAttributes();
            for (var _e57 in o) {
              if (o[_e57].location >= 0) {
                var _n69 = s[_e57];
                void 0 === _n69 && ("instanceMatrix" === _e57 && t.instanceMatrix && (_n69 = t.instanceMatrix), "instanceColor" === _e57 && t.instanceColor && (_n69 = t.instanceColor));
                var _i54 = {};
                _i54.attribute = _n69, _n69 && _n69.data && (_i54.data = _n69.data), r[_e57] = _i54, a++;
              }
            }
            c.attributes = r, c.attributesNum = a, c.index = i;
          }(r, y, d, x);
        } else {
          var _t64 = !0 === l.wireframe;
          c.geometry === y.id && c.program === d.id && c.wireframe === _t64 || (c.geometry = y.id, c.program = d.id, c.wireframe = _t64, M = !0);
        }
        null !== x && n.update(x, t.ELEMENT_ARRAY_BUFFER), (M || h) && (h = !1, function (r, s, a, o) {
          if (!1 === i.isWebGL2 && (r.isInstancedMesh || o.isInstancedBufferGeometry) && null === e.get("ANGLE_instanced_arrays")) return;
          m();
          var l = o.attributes,
            c = a.getAttributes(),
            h = s.defaultAttributeValues;
          for (var _e58 in c) {
            var _s16 = c[_e58];
            if (_s16.location >= 0) {
              var _a15 = l[_e58];
              if (void 0 === _a15 && ("instanceMatrix" === _e58 && r.instanceMatrix && (_a15 = r.instanceMatrix), "instanceColor" === _e58 && r.instanceColor && (_a15 = r.instanceColor)), void 0 !== _a15) {
                var _e59 = _a15.normalized,
                  _l6 = _a15.itemSize,
                  _c5 = n.get(_a15);
                if (void 0 === _c5) continue;
                var _h4 = _c5.buffer,
                  _u4 = _c5.type,
                  _d3 = _c5.bytesPerElement,
                  _p4 = !0 === i.isWebGL2 && (_u4 === t.INT || _u4 === t.UNSIGNED_INT || _a15.gpuType === D);
                if (_a15.isInterleavedBufferAttribute) {
                  var _n70 = _a15.data,
                    _i55 = _n70.stride,
                    _c6 = _a15.offset;
                  if (_n70.isInstancedInterleavedBuffer) {
                    for (var _t65 = 0; _t65 < _s16.locationSize; _t65++) g(_s16.location + _t65, _n70.meshPerAttribute);
                    !0 !== r.isInstancedMesh && void 0 === o._maxInstanceCount && (o._maxInstanceCount = _n70.meshPerAttribute * _n70.count);
                  } else for (var _t66 = 0; _t66 < _s16.locationSize; _t66++) f(_s16.location + _t66);
                  t.bindBuffer(t.ARRAY_BUFFER, _h4);
                  for (var _t67 = 0; _t67 < _s16.locationSize; _t67++) v(_s16.location + _t67, _l6 / _s16.locationSize, _u4, _e59, _i55 * _d3, (_c6 + _l6 / _s16.locationSize * _t67) * _d3, _p4);
                } else {
                  if (_a15.isInstancedBufferAttribute) {
                    for (var _t68 = 0; _t68 < _s16.locationSize; _t68++) g(_s16.location + _t68, _a15.meshPerAttribute);
                    !0 !== r.isInstancedMesh && void 0 === o._maxInstanceCount && (o._maxInstanceCount = _a15.meshPerAttribute * _a15.count);
                  } else for (var _t69 = 0; _t69 < _s16.locationSize; _t69++) f(_s16.location + _t69);
                  t.bindBuffer(t.ARRAY_BUFFER, _h4);
                  for (var _t70 = 0; _t70 < _s16.locationSize; _t70++) v(_s16.location + _t70, _l6 / _s16.locationSize, _u4, _e59, _l6 * _d3, _l6 / _s16.locationSize * _t70 * _d3, _p4);
                }
              } else if (void 0 !== h) {
                var _n71 = h[_e58];
                if (void 0 !== _n71) switch (_n71.length) {
                  case 2:
                    t.vertexAttrib2fv(_s16.location, _n71);
                    break;
                  case 3:
                    t.vertexAttrib3fv(_s16.location, _n71);
                    break;
                  case 4:
                    t.vertexAttrib4fv(_s16.location, _n71);
                    break;
                  default:
                    t.vertexAttrib1fv(_s16.location, _n71);
                }
              }
            }
          }
          _();
        }(r, l, d, y), null !== x && t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, n.get(x).buffer));
      },
      reset: y,
      resetDefaultState: x,
      dispose: function dispose() {
        y();
        for (var _t71 in o) {
          var _e60 = o[_t71];
          for (var _t72 in _e60) {
            var _n72 = _e60[_t72];
            for (var _t73 in _n72) d(_n72[_t73].object), delete _n72[_t73];
            delete _e60[_t72];
          }
          delete o[_t71];
        }
      },
      releaseStatesOfGeometry: function releaseStatesOfGeometry(t) {
        if (void 0 === o[t.id]) return;
        var e = o[t.id];
        for (var _t74 in e) {
          var _n73 = e[_t74];
          for (var _t75 in _n73) d(_n73[_t75].object), delete _n73[_t75];
          delete e[_t74];
        }
        delete o[t.id];
      },
      releaseStatesOfProgram: function releaseStatesOfProgram(t) {
        for (var _e61 in o) {
          var _n74 = o[_e61];
          if (void 0 === _n74[t.id]) continue;
          var _i56 = _n74[t.id];
          for (var _t76 in _i56) d(_i56[_t76].object), delete _i56[_t76];
          delete _n74[t.id];
        }
      },
      initAttributes: m,
      enableAttribute: f,
      disableUnusedAttributes: _
    };
  }
  function Mr(t, e, n, i) {
    var r = i.isWebGL2;
    var s;
    this.setMode = function (t) {
      s = t;
    }, this.render = function (e, i) {
      t.drawArrays(s, e, i), n.update(i, s, 1);
    }, this.renderInstances = function (i, a, o) {
      if (0 === o) return;
      var l, c;
      if (r) l = t, c = "drawArraysInstanced";else if (l = e.get("ANGLE_instanced_arrays"), c = "drawArraysInstancedANGLE", null === l) return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      l[c](s, i, a, o), n.update(a, s, o);
    };
  }
  function Sr(t, e, n) {
    var i;
    function r(e) {
      if ("highp" === e) {
        if (t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT).precision > 0) return "highp";
        e = "mediump";
      }
      return "mediump" === e && t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.MEDIUM_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
    }
    var s = "undefined" != typeof WebGL2RenderingContext && "WebGL2RenderingContext" === t.constructor.name;
    var a = void 0 !== n.precision ? n.precision : "highp";
    var o = r(a);
    o !== a && (console.warn("THREE.WebGLRenderer:", a, "not supported, using", o, "instead."), a = o);
    var l = s || e.has("WEBGL_draw_buffers"),
      c = !0 === n.logarithmicDepthBuffer,
      h = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),
      u = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
      d = t.getParameter(t.MAX_TEXTURE_SIZE),
      p = t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),
      m = t.getParameter(t.MAX_VERTEX_ATTRIBS),
      f = t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),
      g = t.getParameter(t.MAX_VARYING_VECTORS),
      _ = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),
      v = u > 0,
      y = s || e.has("OES_texture_float");
    return {
      isWebGL2: s,
      drawBuffers: l,
      getMaxAnisotropy: function getMaxAnisotropy() {
        if (void 0 !== i) return i;
        if (!0 === e.has("EXT_texture_filter_anisotropic")) {
          var _n75 = e.get("EXT_texture_filter_anisotropic");
          i = t.getParameter(_n75.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else i = 0;
        return i;
      },
      getMaxPrecision: r,
      precision: a,
      logarithmicDepthBuffer: c,
      maxTextures: h,
      maxVertexTextures: u,
      maxTextureSize: d,
      maxCubemapSize: p,
      maxAttributes: m,
      maxVertexUniforms: f,
      maxVaryings: g,
      maxFragmentUniforms: _,
      vertexTextures: v,
      floatFragmentTextures: y,
      floatVertexTextures: v && y,
      maxSamples: s ? t.getParameter(t.MAX_SAMPLES) : 0
    };
  }
  function br(t) {
    var e = this;
    var n = null,
      i = 0,
      r = !1,
      s = !1;
    var a = new lr(),
      o = new he(),
      l = {
        value: null,
        needsUpdate: !1
      };
    function c(t, n, i, r) {
      var s = null !== t ? t.length : 0;
      var c = null;
      if (0 !== s) {
        if (c = l.value, !0 !== r || null === c) {
          var _e62 = i + 4 * s,
            _r40 = n.matrixWorldInverse;
          o.getNormalMatrix(_r40), (null === c || c.length < _e62) && (c = new Float32Array(_e62));
          for (var _e63 = 0, _n76 = i; _e63 !== s; ++_e63, _n76 += 4) a.copy(t[_e63]).applyMatrix4(_r40, o), a.normal.toArray(c, _n76), c[_n76 + 3] = a.constant;
        }
        l.value = c, l.needsUpdate = !0;
      }
      return e.numPlanes = s, e.numIntersection = 0, c;
    }
    this.uniform = l, this.numPlanes = 0, this.numIntersection = 0, this.init = function (t, e) {
      var n = 0 !== t.length || e || 0 !== i || r;
      return r = e, i = t.length, n;
    }, this.beginShadows = function () {
      s = !0, c(null);
    }, this.endShadows = function () {
      s = !1;
    }, this.setGlobalState = function (t, e) {
      n = c(t, e, 0);
    }, this.setState = function (a, o, h) {
      var u = a.clippingPlanes,
        d = a.clipIntersection,
        p = a.clipShadows,
        m = t.get(a);
      if (!r || null === u || 0 === u.length || s && !p) s ? c(null) : function () {
        l.value !== n && (l.value = n, l.needsUpdate = i > 0);
        e.numPlanes = i, e.numIntersection = 0;
      }();else {
        var _t77 = s ? 0 : i,
          _e64 = 4 * _t77;
        var _r41 = m.clippingState || null;
        l.value = _r41, _r41 = c(u, o, _e64, h);
        for (var _t78 = 0; _t78 !== _e64; ++_t78) _r41[_t78] = n[_t78];
        m.clippingState = _r41, this.numIntersection = d ? this.numPlanes : 0, this.numPlanes += _t77;
      }
    };
  }
  function Tr(t) {
    var e = new WeakMap();
    function n(t, e) {
      return e === x ? t.mapping = v : e === M && (t.mapping = y), t;
    }
    function i(t) {
      var n = t.target;
      n.removeEventListener("dispose", i);
      var r = e.get(n);
      void 0 !== r && (e.delete(n), r.dispose());
    }
    return {
      get: function get(r) {
        if (r && r.isTexture && !1 === r.isRenderTargetTexture) {
          var _s17 = r.mapping;
          if (_s17 === x || _s17 === M) {
            if (e.has(r)) {
              return n(e.get(r).texture, r.mapping);
            }
            {
              var _s18 = r.image;
              if (_s18 && _s18.height > 0) {
                var _a16 = new rr(_s18.height / 2);
                return _a16.fromEquirectangularTexture(t, r), e.set(r, _a16), r.addEventListener("dispose", i), n(_a16.texture, r.mapping);
              }
              return null;
            }
          }
        }
        return r;
      },
      dispose: function dispose() {
        e = new WeakMap();
      }
    };
  }
  var Er = /*#__PURE__*/function (_Qi2) {
    _inherits(Er, _Qi2);
    var _super22 = _createSuper(Er);
    function Er() {
      var _this19;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : .1;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2e3;
      _classCallCheck(this, Er);
      _this19 = _super22.call(this), _this19.isOrthographicCamera = !0, _this19.type = "OrthographicCamera", _this19.zoom = 1, _this19.view = null, _this19.left = t, _this19.right = e, _this19.top = n, _this19.bottom = i, _this19.near = r, _this19.far = s, _this19.updateProjectionMatrix();
      return _this19;
    }
    _createClass(Er, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Er.prototype), "copy", this).call(this, t, e), this.left = t.left, this.right = t.right, this.top = t.top, this.bottom = t.bottom, this.near = t.near, this.far = t.far, this.zoom = t.zoom, this.view = null === t.view ? null : Object.assign({}, t.view), this;
      }
    }, {
      key: "setViewOffset",
      value: function setViewOffset(t, e, n, i, r, s) {
        null === this.view && (this.view = {
          enabled: !0,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = s, this.updateProjectionMatrix();
      }
    }, {
      key: "clearViewOffset",
      value: function clearViewOffset() {
        null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
      }
    }, {
      key: "updateProjectionMatrix",
      value: function updateProjectionMatrix() {
        var t = (this.right - this.left) / (2 * this.zoom),
          e = (this.top - this.bottom) / (2 * this.zoom),
          n = (this.right + this.left) / 2,
          i = (this.top + this.bottom) / 2;
        var r = n - t,
          s = n + t,
          a = i + e,
          o = i - e;
        if (null !== this.view && this.view.enabled) {
          var _t79 = (this.right - this.left) / this.view.fullWidth / this.zoom,
            _e65 = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
          r += _t79 * this.view.offsetX, s = r + _t79 * this.view.width, a -= _e65 * this.view.offsetY, o = a - _e65 * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(r, s, a, o, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(Er.prototype), "toJSON", this).call(this, t);
        return e.object.zoom = this.zoom, e.object.left = this.left, e.object.right = this.right, e.object.top = this.top, e.object.bottom = this.bottom, e.object.near = this.near, e.object.far = this.far, null !== this.view && (e.object.view = Object.assign({}, this.view)), e;
      }
    }]);
    return Er;
  }(Qi);
  var wr = [.125, .215, .35, .446, .526, .582],
    Ar = 20,
    Rr = new Er(),
    Cr = new ai();
  var Lr = null;
  var Pr = (1 + Math.sqrt(5)) / 2,
    Ir = 1 / Pr,
    Ur = [new ze(1, 1, 1), new ze(-1, 1, 1), new ze(1, 1, -1), new ze(-1, 1, -1), new ze(0, Pr, Ir), new ze(0, Pr, -Ir), new ze(Ir, 0, Pr), new ze(-Ir, 0, Pr), new ze(Pr, Ir, 0), new ze(-Pr, Ir, 0)];
  var Dr = /*#__PURE__*/function () {
    function Dr(t) {
      _classCallCheck(this, Dr);
      this._renderer = t, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
    }
    _createClass(Dr, [{
      key: "fromScene",
      value: function fromScene(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .1;
        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
        Lr = this._renderer.getRenderTarget(), this._setSize(256);
        var r = this._allocateTargets();
        return r.depthBuffer = !0, this._sceneToCubeUV(t, n, i, r), e > 0 && this._blur(r, 0, 0, e), this._applyPMREM(r), this._cleanup(r), r;
      }
    }, {
      key: "fromEquirectangular",
      value: function fromEquirectangular(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return this._fromTexture(t, e);
      }
    }, {
      key: "fromCubemap",
      value: function fromCubemap(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return this._fromTexture(t, e);
      }
    }, {
      key: "compileCubemapShader",
      value: function compileCubemapShader() {
        null === this._cubemapMaterial && (this._cubemapMaterial = Br(), this._compileMaterial(this._cubemapMaterial));
      }
    }, {
      key: "compileEquirectangularShader",
      value: function compileEquirectangularShader() {
        null === this._equirectMaterial && (this._equirectMaterial = Fr(), this._compileMaterial(this._equirectMaterial));
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._dispose(), null !== this._cubemapMaterial && this._cubemapMaterial.dispose(), null !== this._equirectMaterial && this._equirectMaterial.dispose();
      }
    }, {
      key: "_setSize",
      value: function _setSize(t) {
        this._lodMax = Math.floor(Math.log2(t)), this._cubeSize = Math.pow(2, this._lodMax);
      }
    }, {
      key: "_dispose",
      value: function _dispose() {
        null !== this._blurMaterial && this._blurMaterial.dispose(), null !== this._pingPongRenderTarget && this._pingPongRenderTarget.dispose();
        for (var _t80 = 0; _t80 < this._lodPlanes.length; _t80++) this._lodPlanes[_t80].dispose();
      }
    }, {
      key: "_cleanup",
      value: function _cleanup(t) {
        this._renderer.setRenderTarget(Lr), t.scissorTest = !1, Or(t, 0, 0, t.width, t.height);
      }
    }, {
      key: "_fromTexture",
      value: function _fromTexture(t, e) {
        t.mapping === v || t.mapping === y ? this._setSize(0 === t.image.length ? 16 : t.image[0].width || t.image[0].image.width) : this._setSize(t.image.width / 4), Lr = this._renderer.getRenderTarget();
        var n = e || this._allocateTargets();
        return this._textureToCubeUV(t, n), this._applyPMREM(n), this._cleanup(n), n;
      }
    }, {
      key: "_allocateTargets",
      value: function _allocateTargets() {
        var t = 3 * Math.max(this._cubeSize, 112),
          e = 4 * this._cubeSize,
          n = {
            magFilter: C,
            minFilter: C,
            generateMipmaps: !1,
            type: F,
            format: G,
            colorSpace: Nt,
            depthBuffer: !1
          },
          i = Nr(t, e, n);
        if (null === this._pingPongRenderTarget || this._pingPongRenderTarget.width !== t || this._pingPongRenderTarget.height !== e) {
          var _ref;
          null !== this._pingPongRenderTarget && this._dispose(), this._pingPongRenderTarget = Nr(t, e, n);
          var _i57 = this._lodMax;
          (_ref = function (t) {
            var e = [],
              n = [],
              i = [];
            var r = t;
            var s = t - 4 + 1 + wr.length;
            for (var _a17 = 0; _a17 < s; _a17++) {
              var _s19 = Math.pow(2, r);
              n.push(_s19);
              var _o11 = 1 / _s19;
              _a17 > t - 4 ? _o11 = wr[_a17 - t + 4 - 1] : 0 === _a17 && (_o11 = 0), i.push(_o11);
              var _l7 = 1 / (_s19 - 2),
                _c7 = -_l7,
                _h5 = 1 + _l7,
                _u5 = [_c7, _c7, _h5, _c7, _h5, _h5, _c7, _c7, _h5, _h5, _c7, _h5],
                _d4 = 6,
                _p5 = 6,
                _m2 = 3,
                _f = 2,
                _g = 1,
                _3 = new Float32Array(_m2 * _p5 * _d4),
                _v2 = new Float32Array(_f * _p5 * _d4),
                _y2 = new Float32Array(_g * _p5 * _d4);
              for (var _t81 = 0; _t81 < _d4; _t81++) {
                var _e66 = _t81 % 3 * 2 / 3 - 1,
                  _n77 = _t81 > 2 ? 0 : -1,
                  _i58 = [_e66, _n77, 0, _e66 + 2 / 3, _n77, 0, _e66 + 2 / 3, _n77 + 1, 0, _e66, _n77, 0, _e66 + 2 / 3, _n77 + 1, 0, _e66, _n77 + 1, 0];
                _3.set(_i58, _m2 * _p5 * _t81), _v2.set(_u5, _f * _p5 * _t81);
                var _r42 = [_t81, _t81, _t81, _t81, _t81, _t81];
                _y2.set(_r42, _g * _p5 * _t81);
              }
              var _x2 = new Ai();
              _x2.setAttribute("position", new gi(_3, _m2)), _x2.setAttribute("uv", new gi(_v2, _f)), _x2.setAttribute("faceIndex", new gi(_y2, _g)), e.push(_x2), r > 4 && r--;
            }
            return {
              lodPlanes: e,
              sizeLods: n,
              sigmas: i
            };
          }(_i57), this._sizeLods = _ref.sizeLods, this._lodPlanes = _ref.lodPlanes, this._sigmas = _ref.sigmas), this._blurMaterial = function (t, e, n) {
            var i = new Float32Array(Ar),
              r = new ze(0, 1, 0),
              s = new $i({
                name: "SphericalGaussianBlur",
                defines: {
                  n: Ar,
                  CUBEUV_TEXEL_WIDTH: 1 / e,
                  CUBEUV_TEXEL_HEIGHT: 1 / n,
                  CUBEUV_MAX_MIP: "".concat(t, ".0")
                },
                uniforms: {
                  envMap: {
                    value: null
                  },
                  samples: {
                    value: 1
                  },
                  weights: {
                    value: i
                  },
                  latitudinal: {
                    value: !1
                  },
                  dTheta: {
                    value: 0
                  },
                  mipInt: {
                    value: 0
                  },
                  poleAxis: {
                    value: r
                  }
                },
                vertexShader: zr(),
                fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",
                blending: 0,
                depthTest: !1,
                depthWrite: !1
              });
            return s;
          }(_i57, t, e);
        }
        return i;
      }
    }, {
      key: "_compileMaterial",
      value: function _compileMaterial(t) {
        var e = new Xi(this._lodPlanes[0], t);
        this._renderer.compile(e, Rr);
      }
    }, {
      key: "_sceneToCubeUV",
      value: function _sceneToCubeUV(t, e, n, i) {
        var r = new tr(90, 1, e, n),
          s = [1, -1, 1, 1, 1, 1],
          o = [1, 1, 1, -1, -1, -1],
          l = this._renderer,
          c = l.autoClear,
          h = l.toneMapping;
        l.getClearColor(Cr), l.toneMapping = u, l.autoClear = !1;
        var d = new li({
            name: "PMREM.Background",
            side: a,
            depthWrite: !1,
            depthTest: !1
          }),
          p = new Xi(new qi(), d);
        var m = !1;
        var f = t.background;
        f ? f.isColor && (d.color.copy(f), t.background = null, m = !0) : (d.color.copy(Cr), m = !0);
        for (var _e67 = 0; _e67 < 6; _e67++) {
          var _n78 = _e67 % 3;
          0 === _n78 ? (r.up.set(0, s[_e67], 0), r.lookAt(o[_e67], 0, 0)) : 1 === _n78 ? (r.up.set(0, 0, s[_e67]), r.lookAt(0, o[_e67], 0)) : (r.up.set(0, s[_e67], 0), r.lookAt(0, 0, o[_e67]));
          var _a18 = this._cubeSize;
          Or(i, _n78 * _a18, _e67 > 2 ? _a18 : 0, _a18, _a18), l.setRenderTarget(i), m && l.render(p, r), l.render(t, r);
        }
        p.geometry.dispose(), p.material.dispose(), l.toneMapping = h, l.autoClear = c, t.background = f;
      }
    }, {
      key: "_textureToCubeUV",
      value: function _textureToCubeUV(t, e) {
        var n = this._renderer,
          i = t.mapping === v || t.mapping === y;
        i ? (null === this._cubemapMaterial && (this._cubemapMaterial = Br()), this._cubemapMaterial.uniforms.flipEnvMap.value = !1 === t.isRenderTargetTexture ? -1 : 1) : null === this._equirectMaterial && (this._equirectMaterial = Fr());
        var r = i ? this._cubemapMaterial : this._equirectMaterial,
          s = new Xi(this._lodPlanes[0], r);
        r.uniforms.envMap.value = t;
        var a = this._cubeSize;
        Or(e, 0, 0, 3 * a, 2 * a), n.setRenderTarget(e), n.render(s, Rr);
      }
    }, {
      key: "_applyPMREM",
      value: function _applyPMREM(t) {
        var e = this._renderer,
          n = e.autoClear;
        e.autoClear = !1;
        for (var _e68 = 1; _e68 < this._lodPlanes.length; _e68++) {
          var _n79 = Math.sqrt(this._sigmas[_e68] * this._sigmas[_e68] - this._sigmas[_e68 - 1] * this._sigmas[_e68 - 1]),
            _i59 = Ur[(_e68 - 1) % Ur.length];
          this._blur(t, _e68 - 1, _e68, _n79, _i59);
        }
        e.autoClear = n;
      }
    }, {
      key: "_blur",
      value: function _blur(t, e, n, i, r) {
        var s = this._pingPongRenderTarget;
        this._halfBlur(t, s, e, n, i, "latitudinal", r), this._halfBlur(s, t, n, n, i, "longitudinal", r);
      }
    }, {
      key: "_halfBlur",
      value: function _halfBlur(t, e, n, i, r, s, a) {
        var o = this._renderer,
          l = this._blurMaterial;
        "latitudinal" !== s && "longitudinal" !== s && console.error("blur direction must be either latitudinal or longitudinal!");
        var c = new Xi(this._lodPlanes[i], l),
          h = l.uniforms,
          u = this._sizeLods[n] - 1,
          d = isFinite(r) ? Math.PI / (2 * u) : 2 * Math.PI / 39,
          p = r / d,
          m = isFinite(r) ? 1 + Math.floor(3 * p) : Ar;
        m > Ar && console.warn("sigmaRadians, ".concat(r, ", is too large and will clip, as it requested ").concat(m, " samples when the maximum is set to 20"));
        var f = [];
        var g = 0;
        for (var _t82 = 0; _t82 < Ar; ++_t82) {
          var _e69 = _t82 / p,
            _n80 = Math.exp(-_e69 * _e69 / 2);
          f.push(_n80), 0 === _t82 ? g += _n80 : _t82 < m && (g += 2 * _n80);
        }
        for (var _t83 = 0; _t83 < f.length; _t83++) f[_t83] = f[_t83] / g;
        h.envMap.value = t.texture, h.samples.value = m, h.weights.value = f, h.latitudinal.value = "latitudinal" === s, a && (h.poleAxis.value = a);
        var _ = this._lodMax;
        h.dTheta.value = d, h.mipInt.value = _ - n;
        var v = this._sizeLods[i];
        Or(e, 3 * v * (i > _ - 4 ? i - _ + 4 : 0), 4 * (this._cubeSize - v), 3 * v, 2 * v), o.setRenderTarget(e), o.render(c, Rr);
      }
    }]);
    return Dr;
  }();
  function Nr(t, e, n) {
    var i = new Ne(t, e, n);
    return i.texture.mapping = S, i.texture.name = "PMREM.cubeUv", i.scissorTest = !0, i;
  }
  function Or(t, e, n, i, r) {
    t.viewport.set(e, n, i, r), t.scissor.set(e, n, i, r);
  }
  function Fr() {
    return new $i({
      name: "EquirectangularToCubeUV",
      uniforms: {
        envMap: {
          value: null
        }
      },
      vertexShader: zr(),
      fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",
      blending: 0,
      depthTest: !1,
      depthWrite: !1
    });
  }
  function Br() {
    return new $i({
      name: "CubemapToCubeUV",
      uniforms: {
        envMap: {
          value: null
        },
        flipEnvMap: {
          value: -1
        }
      },
      vertexShader: zr(),
      fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",
      blending: 0,
      depthTest: !1,
      depthWrite: !1
    });
  }
  function zr() {
    return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t";
  }
  function Hr(t) {
    var e = new WeakMap(),
      n = null;
    function i(t) {
      var n = t.target;
      n.removeEventListener("dispose", i);
      var r = e.get(n);
      void 0 !== r && (e.delete(n), r.dispose());
    }
    return {
      get: function get(r) {
        if (r && r.isTexture) {
          var _s20 = r.mapping,
            _a19 = _s20 === x || _s20 === M,
            _o12 = _s20 === v || _s20 === y;
          if (_a19 || _o12) {
            if (r.isRenderTargetTexture && !0 === r.needsPMREMUpdate) {
              r.needsPMREMUpdate = !1;
              var _i60 = e.get(r);
              return null === n && (n = new Dr(t)), _i60 = _a19 ? n.fromEquirectangular(r, _i60) : n.fromCubemap(r, _i60), e.set(r, _i60), _i60.texture;
            }
            if (e.has(r)) return e.get(r).texture;
            {
              var _s21 = r.image;
              if (_a19 && _s21 && _s21.height > 0 || _o12 && _s21 && function (t) {
                var e = 0;
                var n = 6;
                for (var _i61 = 0; _i61 < n; _i61++) void 0 !== t[_i61] && e++;
                return e === n;
              }(_s21)) {
                null === n && (n = new Dr(t));
                var _s22 = _a19 ? n.fromEquirectangular(r) : n.fromCubemap(r);
                return e.set(r, _s22), r.addEventListener("dispose", i), _s22.texture;
              }
              return null;
            }
          }
        }
        return r;
      },
      dispose: function dispose() {
        e = new WeakMap(), null !== n && (n.dispose(), n = null);
      }
    };
  }
  function Gr(t) {
    var e = {};
    function n(n) {
      if (void 0 !== e[n]) return e[n];
      var i;
      switch (n) {
        case "WEBGL_depth_texture":
          i = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          i = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          i = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          i = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          i = t.getExtension(n);
      }
      return e[n] = i, i;
    }
    return {
      has: function has(t) {
        return null !== n(t);
      },
      init: function init(t) {
        t.isWebGL2 ? n("EXT_color_buffer_float") : (n("WEBGL_depth_texture"), n("OES_texture_float"), n("OES_texture_half_float"), n("OES_texture_half_float_linear"), n("OES_standard_derivatives"), n("OES_element_index_uint"), n("OES_vertex_array_object"), n("ANGLE_instanced_arrays")), n("OES_texture_float_linear"), n("EXT_color_buffer_half_float"), n("WEBGL_multisampled_render_to_texture");
      },
      get: function get(t) {
        var e = n(t);
        return null === e && console.warn("THREE.WebGLRenderer: " + t + " extension not supported."), e;
      }
    };
  }
  function Vr(t, e, n, i) {
    var r = {},
      s = new WeakMap();
    function a(t) {
      var o = t.target;
      null !== o.index && e.remove(o.index);
      for (var _t84 in o.attributes) e.remove(o.attributes[_t84]);
      for (var _t85 in o.morphAttributes) {
        var _n81 = o.morphAttributes[_t85];
        for (var _t86 = 0, _i62 = _n81.length; _t86 < _i62; _t86++) e.remove(_n81[_t86]);
      }
      o.removeEventListener("dispose", a), delete r[o.id];
      var l = s.get(o);
      l && (e.remove(l), s.delete(o)), i.releaseStatesOfGeometry(o), !0 === o.isInstancedBufferGeometry && delete o._maxInstanceCount, n.memory.geometries--;
    }
    function o(t) {
      var n = [],
        i = t.index,
        r = t.attributes.position;
      var a = 0;
      if (null !== i) {
        var _t87 = i.array;
        a = i.version;
        for (var _e70 = 0, _i63 = _t87.length; _e70 < _i63; _e70 += 3) {
          var _i64 = _t87[_e70 + 0],
            _r43 = _t87[_e70 + 1],
            _s23 = _t87[_e70 + 2];
          n.push(_i64, _r43, _r43, _s23, _s23, _i64);
        }
      } else {
        if (void 0 === r) return;
        {
          var _t88 = r.array;
          a = r.version;
          for (var _e71 = 0, _i65 = _t88.length / 3 - 1; _e71 < _i65; _e71 += 3) {
            var _t89 = _e71 + 0,
              _i66 = _e71 + 1,
              _r44 = _e71 + 2;
            n.push(_t89, _i66, _i66, _r44, _r44, _t89);
          }
        }
      }
      var o = new (de(n) ? vi : _i)(n, 1);
      o.version = a;
      var l = s.get(t);
      l && e.remove(l), s.set(t, o);
    }
    return {
      get: function get(t, e) {
        return !0 === r[e.id] || (e.addEventListener("dispose", a), r[e.id] = !0, n.memory.geometries++), e;
      },
      update: function update(n) {
        var i = n.attributes;
        for (var _n82 in i) e.update(i[_n82], t.ARRAY_BUFFER);
        var r = n.morphAttributes;
        for (var _n83 in r) {
          var _i67 = r[_n83];
          for (var _n84 = 0, _r45 = _i67.length; _n84 < _r45; _n84++) e.update(_i67[_n84], t.ARRAY_BUFFER);
        }
      },
      getWireframeAttribute: function getWireframeAttribute(t) {
        var e = s.get(t);
        if (e) {
          var _n85 = t.index;
          null !== _n85 && e.version < _n85.version && o(t);
        } else o(t);
        return s.get(t);
      }
    };
  }
  function kr(t, e, n, i) {
    var r = i.isWebGL2;
    var s, a, o;
    this.setMode = function (t) {
      s = t;
    }, this.setIndex = function (t) {
      a = t.type, o = t.bytesPerElement;
    }, this.render = function (e, i) {
      t.drawElements(s, i, a, e * o), n.update(i, s, 1);
    }, this.renderInstances = function (i, l, c) {
      if (0 === c) return;
      var h, u;
      if (r) h = t, u = "drawElementsInstanced";else if (h = e.get("ANGLE_instanced_arrays"), u = "drawElementsInstancedANGLE", null === h) return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      h[u](s, l, a, i * o, c), n.update(l, s, c);
    };
  }
  function Wr(t) {
    var e = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    return {
      memory: {
        geometries: 0,
        textures: 0
      },
      render: e,
      programs: null,
      autoReset: !0,
      reset: function reset() {
        e.calls = 0, e.triangles = 0, e.points = 0, e.lines = 0;
      },
      update: function update(n, i, r) {
        switch (e.calls++, i) {
          case t.TRIANGLES:
            e.triangles += r * (n / 3);
            break;
          case t.LINES:
            e.lines += r * (n / 2);
            break;
          case t.LINE_STRIP:
            e.lines += r * (n - 1);
            break;
          case t.LINE_LOOP:
            e.lines += r * n;
            break;
          case t.POINTS:
            e.points += r * n;
            break;
          default:
            console.error("THREE.WebGLInfo: Unknown draw mode:", i);
        }
      }
    };
  }
  function Xr(t, e) {
    return t[0] - e[0];
  }
  function jr(t, e) {
    return Math.abs(e[1]) - Math.abs(t[1]);
  }
  function qr(t, e, n) {
    var i = {},
      r = new Float32Array(8),
      s = new WeakMap(),
      a = new Ue(),
      o = [];
    for (var _t90 = 0; _t90 < 8; _t90++) o[_t90] = [_t90, 0];
    return {
      update: function update(l, c, h) {
        var u = l.morphTargetInfluences;
        if (!0 === e.isWebGL2) {
          var _d5 = c.morphAttributes.position || c.morphAttributes.normal || c.morphAttributes.color,
            _p6 = void 0 !== _d5 ? _d5.length : 0;
          var _m3 = s.get(c);
          if (void 0 === _m3 || _m3.count !== _p6) {
            void 0 !== _m3 && _m3.texture.dispose();
            var _4 = void 0 !== c.morphAttributes.position,
              _v3 = void 0 !== c.morphAttributes.normal,
              _y3 = void 0 !== c.morphAttributes.color,
              _x3 = c.morphAttributes.position || [],
              _M = c.morphAttributes.normal || [],
              _S = c.morphAttributes.color || [];
            var _b = 0;
            !0 === _4 && (_b = 1), !0 === _v3 && (_b = 2), !0 === _y3 && (_b = 3);
            var _T = c.attributes.position.count * _b,
              _E = 1;
            _T > e.maxTextureSize && (_E = Math.ceil(_T / e.maxTextureSize), _T = e.maxTextureSize);
            var _w = new Float32Array(_T * _E * 4 * _p6),
              _A = new Oe(_w, _T, _E, _p6);
            _A.type = O, _A.needsUpdate = !0;
            var _R = 4 * _b;
            for (var _L = 0; _L < _p6; _L++) {
              var _P = _x3[_L],
                _I = _M[_L],
                _U = _S[_L],
                _D = _T * _E * 4 * _L;
              for (var _N = 0; _N < _P.count; _N++) {
                var _F = _N * _R;
                !0 === _4 && (a.fromBufferAttribute(_P, _N), _w[_D + _F + 0] = a.x, _w[_D + _F + 1] = a.y, _w[_D + _F + 2] = a.z, _w[_D + _F + 3] = 0), !0 === _v3 && (a.fromBufferAttribute(_I, _N), _w[_D + _F + 4] = a.x, _w[_D + _F + 5] = a.y, _w[_D + _F + 6] = a.z, _w[_D + _F + 7] = 0), !0 === _y3 && (a.fromBufferAttribute(_U, _N), _w[_D + _F + 8] = a.x, _w[_D + _F + 9] = a.y, _w[_D + _F + 10] = a.z, _w[_D + _F + 11] = 4 === _U.itemSize ? a.w : 1);
              }
            }
            function C() {
              _A.dispose(), s.delete(c), c.removeEventListener("dispose", C);
            }
            _m3 = {
              count: _p6,
              texture: _A,
              size: new ce(_T, _E)
            }, s.set(c, _m3), c.addEventListener("dispose", C);
          }
          var _f2 = 0;
          for (var _B = 0; _B < u.length; _B++) _f2 += u[_B];
          var _g2 = c.morphTargetsRelative ? 1 : 1 - _f2;
          h.getUniforms().setValue(t, "morphTargetBaseInfluence", _g2), h.getUniforms().setValue(t, "morphTargetInfluences", u), h.getUniforms().setValue(t, "morphTargetsTexture", _m3.texture, n), h.getUniforms().setValue(t, "morphTargetsTextureSize", _m3.size);
        } else {
          var _z = void 0 === u ? 0 : u.length;
          var _H = i[c.id];
          if (void 0 === _H || _H.length !== _z) {
            _H = [];
            for (var _X = 0; _X < _z; _X++) _H[_X] = [_X, 0];
            i[c.id] = _H;
          }
          for (var _j = 0; _j < _z; _j++) {
            var _q = _H[_j];
            _q[0] = _j, _q[1] = u[_j];
          }
          _H.sort(jr);
          for (var _Y = 0; _Y < 8; _Y++) _Y < _z && _H[_Y][1] ? (o[_Y][0] = _H[_Y][0], o[_Y][1] = _H[_Y][1]) : (o[_Y][0] = Number.MAX_SAFE_INTEGER, o[_Y][1] = 0);
          o.sort(Xr);
          var _G = c.morphAttributes.position,
            _V = c.morphAttributes.normal;
          var _k = 0;
          for (var _Z = 0; _Z < 8; _Z++) {
            var _J = o[_Z],
              _K = _J[0],
              _$ = _J[1];
            _K !== Number.MAX_SAFE_INTEGER && _$ ? (_G && c.getAttribute("morphTarget" + _Z) !== _G[_K] && c.setAttribute("morphTarget" + _Z, _G[_K]), _V && c.getAttribute("morphNormal" + _Z) !== _V[_K] && c.setAttribute("morphNormal" + _Z, _V[_K]), r[_Z] = _$, _k += _$) : (_G && !0 === c.hasAttribute("morphTarget" + _Z) && c.deleteAttribute("morphTarget" + _Z), _V && !0 === c.hasAttribute("morphNormal" + _Z) && c.deleteAttribute("morphNormal" + _Z), r[_Z] = 0);
          }
          var _W = c.morphTargetsRelative ? 1 : 1 - _k;
          h.getUniforms().setValue(t, "morphTargetBaseInfluence", _W), h.getUniforms().setValue(t, "morphTargetInfluences", r);
        }
      }
    };
  }
  function Yr(t, e, n, i) {
    var r = new WeakMap();
    function s(t) {
      var e = t.target;
      e.removeEventListener("dispose", s), n.remove(e.instanceMatrix), null !== e.instanceColor && n.remove(e.instanceColor);
    }
    return {
      update: function update(a) {
        var o = i.render.frame,
          l = a.geometry,
          c = e.get(a, l);
        if (r.get(c) !== o && (e.update(c), r.set(c, o)), a.isInstancedMesh && (!1 === a.hasEventListener("dispose", s) && a.addEventListener("dispose", s), r.get(a) !== o && (n.update(a.instanceMatrix, t.ARRAY_BUFFER), null !== a.instanceColor && n.update(a.instanceColor, t.ARRAY_BUFFER), r.set(a, o))), a.isSkinnedMesh) {
          var _t91 = a.skeleton;
          r.get(_t91) !== o && (_t91.update(), r.set(_t91, o));
        }
        return c;
      },
      dispose: function dispose() {
        r = new WeakMap();
      }
    };
  }
  var Zr = new Ie(),
    Jr = new Oe(),
    Kr = new Fe(),
    $r = new ir(),
    Qr = [],
    ts = [],
    es = new Float32Array(16),
    ns = new Float32Array(9),
    is = new Float32Array(4);
  function rs(t, e, n) {
    var i = t[0];
    if (i <= 0 || i > 0) return t;
    var r = e * n;
    var s = Qr[r];
    if (void 0 === s && (s = new Float32Array(r), Qr[r] = s), 0 !== e) {
      i.toArray(s, 0);
      for (var _i68 = 1, _r46 = 0; _i68 !== e; ++_i68) _r46 += n, t[_i68].toArray(s, _r46);
    }
    return s;
  }
  function ss(t, e) {
    if (t.length !== e.length) return !1;
    for (var _n86 = 0, _i69 = t.length; _n86 < _i69; _n86++) if (t[_n86] !== e[_n86]) return !1;
    return !0;
  }
  function as(t, e) {
    for (var _n87 = 0, _i70 = e.length; _n87 < _i70; _n87++) t[_n87] = e[_n87];
  }
  function os(t, e) {
    var n = ts[e];
    void 0 === n && (n = new Int32Array(e), ts[e] = n);
    for (var _i71 = 0; _i71 !== e; ++_i71) n[_i71] = t.allocateTextureUnit();
    return n;
  }
  function ls(t, e) {
    var n = this.cache;
    n[0] !== e && (t.uniform1f(this.addr, e), n[0] = e);
  }
  function cs(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2f(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);else {
      if (ss(n, e)) return;
      t.uniform2fv(this.addr, e), as(n, e);
    }
  }
  function hs(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);else if (void 0 !== e.r) n[0] === e.r && n[1] === e.g && n[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b), n[0] = e.r, n[1] = e.g, n[2] = e.b);else {
      if (ss(n, e)) return;
      t.uniform3fv(this.addr, e), as(n, e);
    }
  }
  function us(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);else {
      if (ss(n, e)) return;
      t.uniform4fv(this.addr, e), as(n, e);
    }
  }
  function ds(t, e) {
    var n = this.cache,
      i = e.elements;
    if (void 0 === i) {
      if (ss(n, e)) return;
      t.uniformMatrix2fv(this.addr, !1, e), as(n, e);
    } else {
      if (ss(n, i)) return;
      is.set(i), t.uniformMatrix2fv(this.addr, !1, is), as(n, i);
    }
  }
  function ps(t, e) {
    var n = this.cache,
      i = e.elements;
    if (void 0 === i) {
      if (ss(n, e)) return;
      t.uniformMatrix3fv(this.addr, !1, e), as(n, e);
    } else {
      if (ss(n, i)) return;
      ns.set(i), t.uniformMatrix3fv(this.addr, !1, ns), as(n, i);
    }
  }
  function ms(t, e) {
    var n = this.cache,
      i = e.elements;
    if (void 0 === i) {
      if (ss(n, e)) return;
      t.uniformMatrix4fv(this.addr, !1, e), as(n, e);
    } else {
      if (ss(n, i)) return;
      es.set(i), t.uniformMatrix4fv(this.addr, !1, es), as(n, i);
    }
  }
  function fs(t, e) {
    var n = this.cache;
    n[0] !== e && (t.uniform1i(this.addr, e), n[0] = e);
  }
  function gs(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2i(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);else {
      if (ss(n, e)) return;
      t.uniform2iv(this.addr, e), as(n, e);
    }
  }
  function _s(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3i(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);else {
      if (ss(n, e)) return;
      t.uniform3iv(this.addr, e), as(n, e);
    }
  }
  function vs(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4i(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);else {
      if (ss(n, e)) return;
      t.uniform4iv(this.addr, e), as(n, e);
    }
  }
  function ys(t, e) {
    var n = this.cache;
    n[0] !== e && (t.uniform1ui(this.addr, e), n[0] = e);
  }
  function xs(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2ui(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);else {
      if (ss(n, e)) return;
      t.uniform2uiv(this.addr, e), as(n, e);
    }
  }
  function Ms(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3ui(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);else {
      if (ss(n, e)) return;
      t.uniform3uiv(this.addr, e), as(n, e);
    }
  }
  function Ss(t, e) {
    var n = this.cache;
    if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4ui(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);else {
      if (ss(n, e)) return;
      t.uniform4uiv(this.addr, e), as(n, e);
    }
  }
  function bs(t, e, n) {
    var i = this.cache,
      r = n.allocateTextureUnit();
    i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTexture2D(e || Zr, r);
  }
  function Ts(t, e, n) {
    var i = this.cache,
      r = n.allocateTextureUnit();
    i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTexture3D(e || Kr, r);
  }
  function Es(t, e, n) {
    var i = this.cache,
      r = n.allocateTextureUnit();
    i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTextureCube(e || $r, r);
  }
  function ws(t, e, n) {
    var i = this.cache,
      r = n.allocateTextureUnit();
    i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTexture2DArray(e || Jr, r);
  }
  function As(t, e) {
    t.uniform1fv(this.addr, e);
  }
  function Rs(t, e) {
    var n = rs(e, this.size, 2);
    t.uniform2fv(this.addr, n);
  }
  function Cs(t, e) {
    var n = rs(e, this.size, 3);
    t.uniform3fv(this.addr, n);
  }
  function Ls(t, e) {
    var n = rs(e, this.size, 4);
    t.uniform4fv(this.addr, n);
  }
  function Ps(t, e) {
    var n = rs(e, this.size, 4);
    t.uniformMatrix2fv(this.addr, !1, n);
  }
  function Is(t, e) {
    var n = rs(e, this.size, 9);
    t.uniformMatrix3fv(this.addr, !1, n);
  }
  function Us(t, e) {
    var n = rs(e, this.size, 16);
    t.uniformMatrix4fv(this.addr, !1, n);
  }
  function Ds(t, e) {
    t.uniform1iv(this.addr, e);
  }
  function Ns(t, e) {
    t.uniform2iv(this.addr, e);
  }
  function Os(t, e) {
    t.uniform3iv(this.addr, e);
  }
  function Fs(t, e) {
    t.uniform4iv(this.addr, e);
  }
  function Bs(t, e) {
    t.uniform1uiv(this.addr, e);
  }
  function zs(t, e) {
    t.uniform2uiv(this.addr, e);
  }
  function Hs(t, e) {
    t.uniform3uiv(this.addr, e);
  }
  function Gs(t, e) {
    t.uniform4uiv(this.addr, e);
  }
  function Vs(t, e, n) {
    var i = this.cache,
      r = e.length,
      s = os(n, r);
    ss(i, s) || (t.uniform1iv(this.addr, s), as(i, s));
    for (var _t92 = 0; _t92 !== r; ++_t92) n.setTexture2D(e[_t92] || Zr, s[_t92]);
  }
  function ks(t, e, n) {
    var i = this.cache,
      r = e.length,
      s = os(n, r);
    ss(i, s) || (t.uniform1iv(this.addr, s), as(i, s));
    for (var _t93 = 0; _t93 !== r; ++_t93) n.setTexture3D(e[_t93] || Kr, s[_t93]);
  }
  function Ws(t, e, n) {
    var i = this.cache,
      r = e.length,
      s = os(n, r);
    ss(i, s) || (t.uniform1iv(this.addr, s), as(i, s));
    for (var _t94 = 0; _t94 !== r; ++_t94) n.setTextureCube(e[_t94] || $r, s[_t94]);
  }
  function Xs(t, e, n) {
    var i = this.cache,
      r = e.length,
      s = os(n, r);
    ss(i, s) || (t.uniform1iv(this.addr, s), as(i, s));
    for (var _t95 = 0; _t95 !== r; ++_t95) n.setTexture2DArray(e[_t95] || Jr, s[_t95]);
  }
  var js = /*#__PURE__*/_createClass(function js(t, e, n) {
    _classCallCheck(this, js);
    this.id = t, this.addr = n, this.cache = [], this.setValue = function (t) {
      switch (t) {
        case 5126:
          return ls;
        case 35664:
          return cs;
        case 35665:
          return hs;
        case 35666:
          return us;
        case 35674:
          return ds;
        case 35675:
          return ps;
        case 35676:
          return ms;
        case 5124:
        case 35670:
          return fs;
        case 35667:
        case 35671:
          return gs;
        case 35668:
        case 35672:
          return _s;
        case 35669:
        case 35673:
          return vs;
        case 5125:
          return ys;
        case 36294:
          return xs;
        case 36295:
          return Ms;
        case 36296:
          return Ss;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
          return bs;
        case 35679:
        case 36299:
        case 36307:
          return Ts;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
          return Es;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
          return ws;
      }
    }(e.type);
  });
  var qs = /*#__PURE__*/_createClass(function qs(t, e, n) {
    _classCallCheck(this, qs);
    this.id = t, this.addr = n, this.cache = [], this.size = e.size, this.setValue = function (t) {
      switch (t) {
        case 5126:
          return As;
        case 35664:
          return Rs;
        case 35665:
          return Cs;
        case 35666:
          return Ls;
        case 35674:
          return Ps;
        case 35675:
          return Is;
        case 35676:
          return Us;
        case 5124:
        case 35670:
          return Ds;
        case 35667:
        case 35671:
          return Ns;
        case 35668:
        case 35672:
          return Os;
        case 35669:
        case 35673:
          return Fs;
        case 5125:
          return Bs;
        case 36294:
          return zs;
        case 36295:
          return Hs;
        case 36296:
          return Gs;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
          return Vs;
        case 35679:
        case 36299:
        case 36307:
          return ks;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
          return Ws;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
          return Xs;
      }
    }(e.type);
  });
  var Ys = /*#__PURE__*/function () {
    function Ys(t) {
      _classCallCheck(this, Ys);
      this.id = t, this.seq = [], this.map = {};
    }
    _createClass(Ys, [{
      key: "setValue",
      value: function setValue(t, e, n) {
        var i = this.seq;
        for (var _r47 = 0, _s24 = i.length; _r47 !== _s24; ++_r47) {
          var _s25 = i[_r47];
          _s25.setValue(t, e[_s25.id], n);
        }
      }
    }]);
    return Ys;
  }();
  var Zs = /(\w+)(\])?(\[|\.)?/g;
  function Js(t, e) {
    t.seq.push(e), t.map[e.id] = e;
  }
  function Ks(t, e, n) {
    var i = t.name,
      r = i.length;
    for (Zs.lastIndex = 0;;) {
      var _s26 = Zs.exec(i),
        _a20 = Zs.lastIndex;
      var _o13 = _s26[1];
      var _l8 = "]" === _s26[2],
        _c8 = _s26[3];
      if (_l8 && (_o13 |= 0), void 0 === _c8 || "[" === _c8 && _a20 + 2 === r) {
        Js(n, void 0 === _c8 ? new js(_o13, t, e) : new qs(_o13, t, e));
        break;
      }
      {
        var _t96 = n.map[_o13];
        void 0 === _t96 && (_t96 = new Ys(_o13), Js(n, _t96)), n = _t96;
      }
    }
  }
  var $s = /*#__PURE__*/function () {
    function $s(t, e) {
      _classCallCheck(this, $s);
      this.seq = [], this.map = {};
      var n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS);
      for (var _i72 = 0; _i72 < n; ++_i72) {
        var _n88 = t.getActiveUniform(e, _i72);
        Ks(_n88, t.getUniformLocation(e, _n88.name), this);
      }
    }
    _createClass($s, [{
      key: "setValue",
      value: function setValue(t, e, n, i) {
        var r = this.map[e];
        void 0 !== r && r.setValue(t, n, i);
      }
    }, {
      key: "setOptional",
      value: function setOptional(t, e, n) {
        var i = e[n];
        void 0 !== i && this.setValue(t, n, i);
      }
    }], [{
      key: "upload",
      value: function upload(t, e, n, i) {
        for (var _r48 = 0, _s27 = e.length; _r48 !== _s27; ++_r48) {
          var _s28 = e[_r48],
            _a21 = n[_s28.id];
          !1 !== _a21.needsUpdate && _s28.setValue(t, _a21.value, i);
        }
      }
    }, {
      key: "seqWithValue",
      value: function seqWithValue(t, e) {
        var n = [];
        for (var _i73 = 0, _r49 = t.length; _i73 !== _r49; ++_i73) {
          var _r50 = t[_i73];
          _r50.id in e && n.push(_r50);
        }
        return n;
      }
    }]);
    return $s;
  }();
  function Qs(t, e, n) {
    var i = t.createShader(e);
    return t.shaderSource(i, n), t.compileShader(i), i;
  }
  var ta = 0;
  function ea(t, e, n) {
    var i = t.getShaderParameter(e, t.COMPILE_STATUS),
      r = t.getShaderInfoLog(e).trim();
    if (i && "" === r) return "";
    var s = /ERROR: 0:(\d+)/.exec(r);
    if (s) {
      var _i74 = parseInt(s[1]);
      return n.toUpperCase() + "\n\n" + r + "\n\n" + function (t, e) {
        var n = t.split("\n"),
          i = [],
          r = Math.max(e - 6, 0),
          s = Math.min(e + 6, n.length);
        for (var _t97 = r; _t97 < s; _t97++) {
          var _r51 = _t97 + 1;
          i.push("".concat(_r51 === e ? ">" : " ", " ").concat(_r51, ": ").concat(n[_t97]));
        }
        return i.join("\n");
      }(t.getShaderSource(e), _i74);
    }
    return r;
  }
  function na(t, e) {
    var n = function (t) {
      var e = be.getPrimaries(be.workingColorSpace),
        n = be.getPrimaries(t);
      var i;
      switch (e === n ? i = "" : e === Gt && n === Ht ? i = "LinearDisplayP3ToLinearSRGB" : e === Ht && n === Gt && (i = "LinearSRGBToLinearDisplayP3"), t) {
        case Nt:
        case Ft:
          return [i, "LinearTransferOETF"];
        case Dt:
        case Ot:
          return [i, "sRGBTransferOETF"];
        default:
          return console.warn("THREE.WebGLProgram: Unsupported color space:", t), [i, "LinearTransferOETF"];
      }
    }(e);
    return "vec4 ".concat(t, "( vec4 value ) { return ").concat(n[0], "( ").concat(n[1], "( value ) ); }");
  }
  function ia(t, e) {
    var n;
    switch (e) {
      case d:
        n = "Linear";
        break;
      case p:
        n = "Reinhard";
        break;
      case m:
        n = "OptimizedCineon";
        break;
      case f:
        n = "ACESFilmic";
        break;
      case g:
        n = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), n = "Linear";
    }
    return "vec3 " + t + "( vec3 color ) { return " + n + "ToneMapping( color ); }";
  }
  function ra(t) {
    return "" !== t;
  }
  function sa(t, e) {
    var n = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
    return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, n).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
  }
  function aa(t, e) {
    return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
  }
  var oa = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function la(t) {
    return t.replace(oa, ha);
  }
  var ca = new Map([["encodings_fragment", "colorspace_fragment"], ["encodings_pars_fragment", "colorspace_pars_fragment"], ["output_fragment", "opaque_fragment"]]);
  function ha(t, e) {
    var n = fr[e];
    if (void 0 === n) {
      var _t98 = ca.get(e);
      if (void 0 === _t98) throw new Error("Can not resolve #include <" + e + ">");
      n = fr[_t98], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, _t98);
    }
    return la(n);
  }
  var ua = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function da(t) {
    return t.replace(ua, pa);
  }
  function pa(t, e, n, i) {
    var r = "";
    for (var _t99 = parseInt(e); _t99 < parseInt(n); _t99++) r += i.replace(/\[\s*i\s*\]/g, "[ " + _t99 + " ]").replace(/UNROLLED_LOOP_INDEX/g, _t99);
    return r;
  }
  function ma(t) {
    var e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;";
    return "highp" === t.precision ? e += "\n#define HIGH_PRECISION" : "mediump" === t.precision ? e += "\n#define MEDIUM_PRECISION" : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"), e;
  }
  function fa(t, e, s, a) {
    var o = t.getContext(),
      d = s.defines;
    var p = s.vertexShader,
      m = s.fragmentShader;
    var f = function (t) {
        var e = "SHADOWMAP_TYPE_BASIC";
        return t.shadowMapType === n ? e = "SHADOWMAP_TYPE_PCF" : t.shadowMapType === i ? e = "SHADOWMAP_TYPE_PCF_SOFT" : t.shadowMapType === r && (e = "SHADOWMAP_TYPE_VSM"), e;
      }(s),
      g = function (t) {
        var e = "ENVMAP_TYPE_CUBE";
        if (t.envMap) switch (t.envMapMode) {
          case v:
          case y:
            e = "ENVMAP_TYPE_CUBE";
            break;
          case S:
            e = "ENVMAP_TYPE_CUBE_UV";
        }
        return e;
      }(s),
      _ = function (t) {
        var e = "ENVMAP_MODE_REFLECTION";
        t.envMap && t.envMapMode === y && (e = "ENVMAP_MODE_REFRACTION");
        return e;
      }(s),
      x = function (t) {
        var e = "ENVMAP_BLENDING_NONE";
        if (t.envMap) switch (t.combine) {
          case l:
            e = "ENVMAP_BLENDING_MULTIPLY";
            break;
          case c:
            e = "ENVMAP_BLENDING_MIX";
            break;
          case h:
            e = "ENVMAP_BLENDING_ADD";
        }
        return e;
      }(s),
      M = function (t) {
        var e = t.envMapCubeUVHeight;
        if (null === e) return null;
        var n = Math.log2(e) - 2,
          i = 1 / e;
        return {
          texelWidth: 1 / (3 * Math.max(Math.pow(2, n), 112)),
          texelHeight: i,
          maxMip: n
        };
      }(s),
      b = s.isWebGL2 ? "" : function (t) {
        return [t.extensionDerivatives || t.envMapCubeUVHeight || t.bumpMap || t.normalMapTangentSpace || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (t.extensionShaderTextureLOD || t.envMap || t.transmission) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(ra).join("\n");
      }(s),
      T = function (t) {
        var e = [];
        for (var _n89 in t) {
          var _i75 = t[_n89];
          !1 !== _i75 && e.push("#define " + _n89 + " " + _i75);
        }
        return e.join("\n");
      }(d),
      E = o.createProgram();
    var w,
      A,
      R = s.glslVersion ? "#version " + s.glslVersion + "\n" : "";
    s.isRawShaderMaterial ? (w = ["#define SHADER_TYPE " + s.shaderType, "#define SHADER_NAME " + s.shaderName, T].filter(ra).join("\n"), w.length > 0 && (w += "\n"), A = [b, "#define SHADER_TYPE " + s.shaderType, "#define SHADER_NAME " + s.shaderName, T].filter(ra).join("\n"), A.length > 0 && (A += "\n")) : (w = [ma(s), "#define SHADER_TYPE " + s.shaderType, "#define SHADER_NAME " + s.shaderName, T, s.instancing ? "#define USE_INSTANCING" : "", s.instancingColor ? "#define USE_INSTANCING_COLOR" : "", s.useFog && s.fog ? "#define USE_FOG" : "", s.useFog && s.fogExp2 ? "#define FOG_EXP2" : "", s.map ? "#define USE_MAP" : "", s.envMap ? "#define USE_ENVMAP" : "", s.envMap ? "#define " + _ : "", s.lightMap ? "#define USE_LIGHTMAP" : "", s.aoMap ? "#define USE_AOMAP" : "", s.bumpMap ? "#define USE_BUMPMAP" : "", s.normalMap ? "#define USE_NORMALMAP" : "", s.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "", s.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "", s.displacementMap ? "#define USE_DISPLACEMENTMAP" : "", s.emissiveMap ? "#define USE_EMISSIVEMAP" : "", s.anisotropy ? "#define USE_ANISOTROPY" : "", s.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "", s.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", s.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", s.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", s.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", s.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", s.specularMap ? "#define USE_SPECULARMAP" : "", s.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "", s.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "", s.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", s.metalnessMap ? "#define USE_METALNESSMAP" : "", s.alphaMap ? "#define USE_ALPHAMAP" : "", s.alphaHash ? "#define USE_ALPHAHASH" : "", s.transmission ? "#define USE_TRANSMISSION" : "", s.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", s.thicknessMap ? "#define USE_THICKNESSMAP" : "", s.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "", s.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "", s.mapUv ? "#define MAP_UV " + s.mapUv : "", s.alphaMapUv ? "#define ALPHAMAP_UV " + s.alphaMapUv : "", s.lightMapUv ? "#define LIGHTMAP_UV " + s.lightMapUv : "", s.aoMapUv ? "#define AOMAP_UV " + s.aoMapUv : "", s.emissiveMapUv ? "#define EMISSIVEMAP_UV " + s.emissiveMapUv : "", s.bumpMapUv ? "#define BUMPMAP_UV " + s.bumpMapUv : "", s.normalMapUv ? "#define NORMALMAP_UV " + s.normalMapUv : "", s.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + s.displacementMapUv : "", s.metalnessMapUv ? "#define METALNESSMAP_UV " + s.metalnessMapUv : "", s.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + s.roughnessMapUv : "", s.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + s.anisotropyMapUv : "", s.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + s.clearcoatMapUv : "", s.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + s.clearcoatNormalMapUv : "", s.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + s.clearcoatRoughnessMapUv : "", s.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + s.iridescenceMapUv : "", s.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + s.iridescenceThicknessMapUv : "", s.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + s.sheenColorMapUv : "", s.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + s.sheenRoughnessMapUv : "", s.specularMapUv ? "#define SPECULARMAP_UV " + s.specularMapUv : "", s.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + s.specularColorMapUv : "", s.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + s.specularIntensityMapUv : "", s.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + s.transmissionMapUv : "", s.thicknessMapUv ? "#define THICKNESSMAP_UV " + s.thicknessMapUv : "", s.vertexTangents && !1 === s.flatShading ? "#define USE_TANGENT" : "", s.vertexColors ? "#define USE_COLOR" : "", s.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", s.vertexUv1s ? "#define USE_UV1" : "", s.vertexUv2s ? "#define USE_UV2" : "", s.vertexUv3s ? "#define USE_UV3" : "", s.pointsUvs ? "#define USE_POINTS_UV" : "", s.flatShading ? "#define FLAT_SHADED" : "", s.skinning ? "#define USE_SKINNING" : "", s.morphTargets ? "#define USE_MORPHTARGETS" : "", s.morphNormals && !1 === s.flatShading ? "#define USE_MORPHNORMALS" : "", s.morphColors && s.isWebGL2 ? "#define USE_MORPHCOLORS" : "", s.morphTargetsCount > 0 && s.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "", s.morphTargetsCount > 0 && s.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + s.morphTextureStride : "", s.morphTargetsCount > 0 && s.isWebGL2 ? "#define MORPHTARGETS_COUNT " + s.morphTargetsCount : "", s.doubleSided ? "#define DOUBLE_SIDED" : "", s.flipSided ? "#define FLIP_SIDED" : "", s.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", s.shadowMapEnabled ? "#define " + f : "", s.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", s.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "", s.useLegacyLights ? "#define LEGACY_LIGHTS" : "", s.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", s.logarithmicDepthBuffer && s.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "\tattribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "\tattribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_UV1", "\tattribute vec2 uv1;", "#endif", "#ifdef USE_UV2", "\tattribute vec2 uv2;", "#endif", "#ifdef USE_UV3", "\tattribute vec2 uv3;", "#endif", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "\tattribute vec4 color;", "#elif defined( USE_COLOR )", "\tattribute vec3 color;", "#endif", "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(ra).join("\n"), A = [b, ma(s), "#define SHADER_TYPE " + s.shaderType, "#define SHADER_NAME " + s.shaderName, T, s.useFog && s.fog ? "#define USE_FOG" : "", s.useFog && s.fogExp2 ? "#define FOG_EXP2" : "", s.map ? "#define USE_MAP" : "", s.matcap ? "#define USE_MATCAP" : "", s.envMap ? "#define USE_ENVMAP" : "", s.envMap ? "#define " + g : "", s.envMap ? "#define " + _ : "", s.envMap ? "#define " + x : "", M ? "#define CUBEUV_TEXEL_WIDTH " + M.texelWidth : "", M ? "#define CUBEUV_TEXEL_HEIGHT " + M.texelHeight : "", M ? "#define CUBEUV_MAX_MIP " + M.maxMip + ".0" : "", s.lightMap ? "#define USE_LIGHTMAP" : "", s.aoMap ? "#define USE_AOMAP" : "", s.bumpMap ? "#define USE_BUMPMAP" : "", s.normalMap ? "#define USE_NORMALMAP" : "", s.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "", s.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "", s.emissiveMap ? "#define USE_EMISSIVEMAP" : "", s.anisotropy ? "#define USE_ANISOTROPY" : "", s.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "", s.clearcoat ? "#define USE_CLEARCOAT" : "", s.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", s.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", s.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", s.iridescence ? "#define USE_IRIDESCENCE" : "", s.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", s.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", s.specularMap ? "#define USE_SPECULARMAP" : "", s.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "", s.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "", s.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", s.metalnessMap ? "#define USE_METALNESSMAP" : "", s.alphaMap ? "#define USE_ALPHAMAP" : "", s.alphaTest ? "#define USE_ALPHATEST" : "", s.alphaHash ? "#define USE_ALPHAHASH" : "", s.sheen ? "#define USE_SHEEN" : "", s.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "", s.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "", s.transmission ? "#define USE_TRANSMISSION" : "", s.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", s.thicknessMap ? "#define USE_THICKNESSMAP" : "", s.vertexTangents && !1 === s.flatShading ? "#define USE_TANGENT" : "", s.vertexColors || s.instancingColor ? "#define USE_COLOR" : "", s.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", s.vertexUv1s ? "#define USE_UV1" : "", s.vertexUv2s ? "#define USE_UV2" : "", s.vertexUv3s ? "#define USE_UV3" : "", s.pointsUvs ? "#define USE_POINTS_UV" : "", s.gradientMap ? "#define USE_GRADIENTMAP" : "", s.flatShading ? "#define FLAT_SHADED" : "", s.doubleSided ? "#define DOUBLE_SIDED" : "", s.flipSided ? "#define FLIP_SIDED" : "", s.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", s.shadowMapEnabled ? "#define " + f : "", s.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", s.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "", s.useLegacyLights ? "#define LEGACY_LIGHTS" : "", s.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "", s.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", s.logarithmicDepthBuffer && s.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", s.toneMapping !== u ? "#define TONE_MAPPING" : "", s.toneMapping !== u ? fr.tonemapping_pars_fragment : "", s.toneMapping !== u ? ia("toneMapping", s.toneMapping) : "", s.dithering ? "#define DITHERING" : "", s.opaque ? "#define OPAQUE" : "", fr.colorspace_pars_fragment, na("linearToOutputTexel", s.outputColorSpace), s.useDepthPacking ? "#define DEPTH_PACKING " + s.depthPacking : "", "\n"].filter(ra).join("\n")), p = la(p), p = sa(p, s), p = aa(p, s), m = la(m), m = sa(m, s), m = aa(m, s), p = da(p), m = da(m), s.isWebGL2 && !0 !== s.isRawShaderMaterial && (R = "#version 300 es\n", w = ["precision mediump sampler2DArray;", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + w, A = ["#define varying in", s.glslVersion === Wt ? "" : "layout(location = 0) out highp vec4 pc_fragColor;", s.glslVersion === Wt ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + A);
    var C = R + w + p,
      L = R + A + m,
      P = Qs(o, o.VERTEX_SHADER, C),
      I = Qs(o, o.FRAGMENT_SHADER, L);
    if (o.attachShader(E, P), o.attachShader(E, I), void 0 !== s.index0AttributeName ? o.bindAttribLocation(E, 0, s.index0AttributeName) : !0 === s.morphTargets && o.bindAttribLocation(E, 0, "position"), o.linkProgram(E), t.debug.checkShaderErrors) {
      var _e72 = o.getProgramInfoLog(E).trim(),
        _n90 = o.getShaderInfoLog(P).trim(),
        _i76 = o.getShaderInfoLog(I).trim();
      var _r52 = !0,
        _s29 = !0;
      if (!1 === o.getProgramParameter(E, o.LINK_STATUS)) {
        if (_r52 = !1, "function" == typeof t.debug.onShaderError) t.debug.onShaderError(o, E, P, I);else {
          var _t100 = ea(o, P, "vertex"),
            _n91 = ea(o, I, "fragment");
          console.error("THREE.WebGLProgram: Shader Error " + o.getError() + " - VALIDATE_STATUS " + o.getProgramParameter(E, o.VALIDATE_STATUS) + "\n\nProgram Info Log: " + _e72 + "\n" + _t100 + "\n" + _n91);
        }
      } else "" !== _e72 ? console.warn("THREE.WebGLProgram: Program Info Log:", _e72) : "" !== _n90 && "" !== _i76 || (_s29 = !1);
      _s29 && (this.diagnostics = {
        runnable: _r52,
        programLog: _e72,
        vertexShader: {
          log: _n90,
          prefix: w
        },
        fragmentShader: {
          log: _i76,
          prefix: A
        }
      });
    }
    var U, D;
    return o.deleteShader(P), o.deleteShader(I), this.getUniforms = function () {
      return void 0 === U && (U = new $s(o, E)), U;
    }, this.getAttributes = function () {
      return void 0 === D && (D = function (t, e) {
        var n = {},
          i = t.getProgramParameter(e, t.ACTIVE_ATTRIBUTES);
        for (var _r53 = 0; _r53 < i; _r53++) {
          var _i77 = t.getActiveAttrib(e, _r53),
            _s30 = _i77.name;
          var _a22 = 1;
          _i77.type === t.FLOAT_MAT2 && (_a22 = 2), _i77.type === t.FLOAT_MAT3 && (_a22 = 3), _i77.type === t.FLOAT_MAT4 && (_a22 = 4), n[_s30] = {
            type: _i77.type,
            location: t.getAttribLocation(e, _s30),
            locationSize: _a22
          };
        }
        return n;
      }(o, E)), D;
    }, this.destroy = function () {
      a.releaseStatesOfProgram(this), o.deleteProgram(E), this.program = void 0;
    }, this.type = s.shaderType, this.name = s.shaderName, this.id = ta++, this.cacheKey = e, this.usedTimes = 1, this.program = E, this.vertexShader = P, this.fragmentShader = I, this;
  }
  var ga = 0;
  var _a = /*#__PURE__*/function () {
    function _a() {
      _classCallCheck(this, _a);
      this.shaderCache = new Map(), this.materialCache = new Map();
    }
    _createClass(_a, [{
      key: "update",
      value: function update(t) {
        var e = t.vertexShader,
          n = t.fragmentShader,
          i = this._getShaderStage(e),
          r = this._getShaderStage(n),
          s = this._getShaderCacheForMaterial(t);
        return !1 === s.has(i) && (s.add(i), i.usedTimes++), !1 === s.has(r) && (s.add(r), r.usedTimes++), this;
      }
    }, {
      key: "remove",
      value: function remove(t) {
        var e = this.materialCache.get(t);
        var _iterator3 = _createForOfIteratorHelper(e),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _t101 = _step3.value;
            _t101.usedTimes--, 0 === _t101.usedTimes && this.shaderCache.delete(_t101.code);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        return this.materialCache.delete(t), this;
      }
    }, {
      key: "getVertexShaderID",
      value: function getVertexShaderID(t) {
        return this._getShaderStage(t.vertexShader).id;
      }
    }, {
      key: "getFragmentShaderID",
      value: function getFragmentShaderID(t) {
        return this._getShaderStage(t.fragmentShader).id;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.shaderCache.clear(), this.materialCache.clear();
      }
    }, {
      key: "_getShaderCacheForMaterial",
      value: function _getShaderCacheForMaterial(t) {
        var e = this.materialCache;
        var n = e.get(t);
        return void 0 === n && (n = new Set(), e.set(t, n)), n;
      }
    }, {
      key: "_getShaderStage",
      value: function _getShaderStage(t) {
        var e = this.shaderCache;
        var n = e.get(t);
        return void 0 === n && (n = new va(t), e.set(t, n)), n;
      }
    }]);
    return _a;
  }();
  var va = /*#__PURE__*/_createClass(function va(t) {
    _classCallCheck(this, va);
    this.id = ga++, this.code = t, this.usedTimes = 0;
  });
  function ya(t, e, n, i, r, s, o) {
    var l = new An(),
      c = new _a(),
      h = [],
      d = r.isWebGL2,
      p = r.logarithmicDepthBuffer,
      m = r.vertexTextures;
    var f = r.precision;
    var g = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    function _(t) {
      return 0 === t ? "uv" : "uv".concat(t);
    }
    return {
      getParameters: function getParameters(s, l, h, v, y) {
        var x = v.fog,
          M = y.geometry,
          b = s.isMeshStandardMaterial ? v.environment : null,
          T = (s.isMeshStandardMaterial ? n : e).get(s.envMap || b),
          E = T && T.mapping === S ? T.image.height : null,
          w = g[s.type];
        null !== s.precision && (f = r.getMaxPrecision(s.precision), f !== s.precision && console.warn("THREE.WebGLProgram.getParameters:", s.precision, "not supported, using", f, "instead."));
        var A = M.morphAttributes.position || M.morphAttributes.normal || M.morphAttributes.color,
          R = void 0 !== A ? A.length : 0;
        var C,
          L,
          P,
          I,
          U = 0;
        if (void 0 !== M.morphAttributes.position && (U = 1), void 0 !== M.morphAttributes.normal && (U = 2), void 0 !== M.morphAttributes.color && (U = 3), w) {
          var _t102 = _r[w];
          C = _t102.vertexShader, L = _t102.fragmentShader;
        } else C = s.vertexShader, L = s.fragmentShader, c.update(s), P = c.getVertexShaderID(s), I = c.getFragmentShaderID(s);
        var D = t.getRenderTarget(),
          N = !0 === y.isInstancedMesh,
          O = !!s.map,
          F = !!s.matcap,
          B = !!T,
          z = !!s.aoMap,
          H = !!s.lightMap,
          G = !!s.bumpMap,
          V = !!s.normalMap,
          k = !!s.displacementMap,
          W = !!s.emissiveMap,
          X = !!s.metalnessMap,
          j = !!s.roughnessMap,
          q = s.anisotropy > 0,
          Y = s.clearcoat > 0,
          Z = s.iridescence > 0,
          J = s.sheen > 0,
          K = s.transmission > 0,
          $ = q && !!s.anisotropyMap,
          Q = Y && !!s.clearcoatMap,
          tt = Y && !!s.clearcoatNormalMap,
          et = Y && !!s.clearcoatRoughnessMap,
          nt = Z && !!s.iridescenceMap,
          it = Z && !!s.iridescenceThicknessMap,
          rt = J && !!s.sheenColorMap,
          st = J && !!s.sheenRoughnessMap,
          at = !!s.specularMap,
          ot = !!s.specularColorMap,
          lt = !!s.specularIntensityMap,
          ct = K && !!s.transmissionMap,
          ht = K && !!s.thicknessMap,
          ut = !!s.gradientMap,
          dt = !!s.alphaMap,
          pt = s.alphaTest > 0,
          mt = !!s.alphaHash,
          ft = !!s.extensions,
          gt = !!M.attributes.uv1,
          _t = !!M.attributes.uv2,
          vt = !!M.attributes.uv3;
        var yt = u;
        return s.toneMapped && (null !== D && !0 !== D.isXRRenderTarget || (yt = t.toneMapping)), {
          isWebGL2: d,
          shaderID: w,
          shaderType: s.type,
          shaderName: s.name,
          vertexShader: C,
          fragmentShader: L,
          defines: s.defines,
          customVertexShaderID: P,
          customFragmentShaderID: I,
          isRawShaderMaterial: !0 === s.isRawShaderMaterial,
          glslVersion: s.glslVersion,
          precision: f,
          instancing: N,
          instancingColor: N && null !== y.instanceColor,
          supportsVertexTextures: m,
          outputColorSpace: null === D ? t.outputColorSpace : !0 === D.isXRRenderTarget ? D.texture.colorSpace : Nt,
          map: O,
          matcap: F,
          envMap: B,
          envMapMode: B && T.mapping,
          envMapCubeUVHeight: E,
          aoMap: z,
          lightMap: H,
          bumpMap: G,
          normalMap: V,
          displacementMap: m && k,
          emissiveMap: W,
          normalMapObjectSpace: V && 1 === s.normalMapType,
          normalMapTangentSpace: V && 0 === s.normalMapType,
          metalnessMap: X,
          roughnessMap: j,
          anisotropy: q,
          anisotropyMap: $,
          clearcoat: Y,
          clearcoatMap: Q,
          clearcoatNormalMap: tt,
          clearcoatRoughnessMap: et,
          iridescence: Z,
          iridescenceMap: nt,
          iridescenceThicknessMap: it,
          sheen: J,
          sheenColorMap: rt,
          sheenRoughnessMap: st,
          specularMap: at,
          specularColorMap: ot,
          specularIntensityMap: lt,
          transmission: K,
          transmissionMap: ct,
          thicknessMap: ht,
          gradientMap: ut,
          opaque: !1 === s.transparent && 1 === s.blending,
          alphaMap: dt,
          alphaTest: pt,
          alphaHash: mt,
          combine: s.combine,
          mapUv: O && _(s.map.channel),
          aoMapUv: z && _(s.aoMap.channel),
          lightMapUv: H && _(s.lightMap.channel),
          bumpMapUv: G && _(s.bumpMap.channel),
          normalMapUv: V && _(s.normalMap.channel),
          displacementMapUv: k && _(s.displacementMap.channel),
          emissiveMapUv: W && _(s.emissiveMap.channel),
          metalnessMapUv: X && _(s.metalnessMap.channel),
          roughnessMapUv: j && _(s.roughnessMap.channel),
          anisotropyMapUv: $ && _(s.anisotropyMap.channel),
          clearcoatMapUv: Q && _(s.clearcoatMap.channel),
          clearcoatNormalMapUv: tt && _(s.clearcoatNormalMap.channel),
          clearcoatRoughnessMapUv: et && _(s.clearcoatRoughnessMap.channel),
          iridescenceMapUv: nt && _(s.iridescenceMap.channel),
          iridescenceThicknessMapUv: it && _(s.iridescenceThicknessMap.channel),
          sheenColorMapUv: rt && _(s.sheenColorMap.channel),
          sheenRoughnessMapUv: st && _(s.sheenRoughnessMap.channel),
          specularMapUv: at && _(s.specularMap.channel),
          specularColorMapUv: ot && _(s.specularColorMap.channel),
          specularIntensityMapUv: lt && _(s.specularIntensityMap.channel),
          transmissionMapUv: ct && _(s.transmissionMap.channel),
          thicknessMapUv: ht && _(s.thicknessMap.channel),
          alphaMapUv: dt && _(s.alphaMap.channel),
          vertexTangents: !!M.attributes.tangent && (V || q),
          vertexColors: s.vertexColors,
          vertexAlphas: !0 === s.vertexColors && !!M.attributes.color && 4 === M.attributes.color.itemSize,
          vertexUv1s: gt,
          vertexUv2s: _t,
          vertexUv3s: vt,
          pointsUvs: !0 === y.isPoints && !!M.attributes.uv && (O || dt),
          fog: !!x,
          useFog: !0 === s.fog,
          fogExp2: x && x.isFogExp2,
          flatShading: !0 === s.flatShading,
          sizeAttenuation: !0 === s.sizeAttenuation,
          logarithmicDepthBuffer: p,
          skinning: !0 === y.isSkinnedMesh,
          morphTargets: void 0 !== M.morphAttributes.position,
          morphNormals: void 0 !== M.morphAttributes.normal,
          morphColors: void 0 !== M.morphAttributes.color,
          morphTargetsCount: R,
          morphTextureStride: U,
          numDirLights: l.directional.length,
          numPointLights: l.point.length,
          numSpotLights: l.spot.length,
          numSpotLightMaps: l.spotLightMap.length,
          numRectAreaLights: l.rectArea.length,
          numHemiLights: l.hemi.length,
          numDirLightShadows: l.directionalShadowMap.length,
          numPointLightShadows: l.pointShadowMap.length,
          numSpotLightShadows: l.spotShadowMap.length,
          numSpotLightShadowsWithMaps: l.numSpotLightShadowsWithMaps,
          numLightProbes: l.numLightProbes,
          numClippingPlanes: o.numPlanes,
          numClipIntersection: o.numIntersection,
          dithering: s.dithering,
          shadowMapEnabled: t.shadowMap.enabled && h.length > 0,
          shadowMapType: t.shadowMap.type,
          toneMapping: yt,
          useLegacyLights: t._useLegacyLights,
          decodeVideoTexture: O && !0 === s.map.isVideoTexture && be.getTransfer(s.map.colorSpace) === zt,
          premultipliedAlpha: s.premultipliedAlpha,
          doubleSided: 2 === s.side,
          flipSided: s.side === a,
          useDepthPacking: s.depthPacking >= 0,
          depthPacking: s.depthPacking || 0,
          index0AttributeName: s.index0AttributeName,
          extensionDerivatives: ft && !0 === s.extensions.derivatives,
          extensionFragDepth: ft && !0 === s.extensions.fragDepth,
          extensionDrawBuffers: ft && !0 === s.extensions.drawBuffers,
          extensionShaderTextureLOD: ft && !0 === s.extensions.shaderTextureLOD,
          rendererExtensionFragDepth: d || i.has("EXT_frag_depth"),
          rendererExtensionDrawBuffers: d || i.has("WEBGL_draw_buffers"),
          rendererExtensionShaderTextureLod: d || i.has("EXT_shader_texture_lod"),
          customProgramCacheKey: s.customProgramCacheKey()
        };
      },
      getProgramCacheKey: function getProgramCacheKey(e) {
        var n = [];
        if (e.shaderID ? n.push(e.shaderID) : (n.push(e.customVertexShaderID), n.push(e.customFragmentShaderID)), void 0 !== e.defines) for (var _t103 in e.defines) n.push(_t103), n.push(e.defines[_t103]);
        return !1 === e.isRawShaderMaterial && (!function (t, e) {
          t.push(e.precision), t.push(e.outputColorSpace), t.push(e.envMapMode), t.push(e.envMapCubeUVHeight), t.push(e.mapUv), t.push(e.alphaMapUv), t.push(e.lightMapUv), t.push(e.aoMapUv), t.push(e.bumpMapUv), t.push(e.normalMapUv), t.push(e.displacementMapUv), t.push(e.emissiveMapUv), t.push(e.metalnessMapUv), t.push(e.roughnessMapUv), t.push(e.anisotropyMapUv), t.push(e.clearcoatMapUv), t.push(e.clearcoatNormalMapUv), t.push(e.clearcoatRoughnessMapUv), t.push(e.iridescenceMapUv), t.push(e.iridescenceThicknessMapUv), t.push(e.sheenColorMapUv), t.push(e.sheenRoughnessMapUv), t.push(e.specularMapUv), t.push(e.specularColorMapUv), t.push(e.specularIntensityMapUv), t.push(e.transmissionMapUv), t.push(e.thicknessMapUv), t.push(e.combine), t.push(e.fogExp2), t.push(e.sizeAttenuation), t.push(e.morphTargetsCount), t.push(e.morphAttributeCount), t.push(e.numDirLights), t.push(e.numPointLights), t.push(e.numSpotLights), t.push(e.numSpotLightMaps), t.push(e.numHemiLights), t.push(e.numRectAreaLights), t.push(e.numDirLightShadows), t.push(e.numPointLightShadows), t.push(e.numSpotLightShadows), t.push(e.numSpotLightShadowsWithMaps), t.push(e.numLightProbes), t.push(e.shadowMapType), t.push(e.toneMapping), t.push(e.numClippingPlanes), t.push(e.numClipIntersection), t.push(e.depthPacking);
        }(n, e), function (t, e) {
          l.disableAll(), e.isWebGL2 && l.enable(0);
          e.supportsVertexTextures && l.enable(1);
          e.instancing && l.enable(2);
          e.instancingColor && l.enable(3);
          e.matcap && l.enable(4);
          e.envMap && l.enable(5);
          e.normalMapObjectSpace && l.enable(6);
          e.normalMapTangentSpace && l.enable(7);
          e.clearcoat && l.enable(8);
          e.iridescence && l.enable(9);
          e.alphaTest && l.enable(10);
          e.vertexColors && l.enable(11);
          e.vertexAlphas && l.enable(12);
          e.vertexUv1s && l.enable(13);
          e.vertexUv2s && l.enable(14);
          e.vertexUv3s && l.enable(15);
          e.vertexTangents && l.enable(16);
          e.anisotropy && l.enable(17);
          t.push(l.mask), l.disableAll(), e.fog && l.enable(0);
          e.useFog && l.enable(1);
          e.flatShading && l.enable(2);
          e.logarithmicDepthBuffer && l.enable(3);
          e.skinning && l.enable(4);
          e.morphTargets && l.enable(5);
          e.morphNormals && l.enable(6);
          e.morphColors && l.enable(7);
          e.premultipliedAlpha && l.enable(8);
          e.shadowMapEnabled && l.enable(9);
          e.useLegacyLights && l.enable(10);
          e.doubleSided && l.enable(11);
          e.flipSided && l.enable(12);
          e.useDepthPacking && l.enable(13);
          e.dithering && l.enable(14);
          e.transmission && l.enable(15);
          e.sheen && l.enable(16);
          e.opaque && l.enable(17);
          e.pointsUvs && l.enable(18);
          e.decodeVideoTexture && l.enable(19);
          t.push(l.mask);
        }(n, e), n.push(t.outputColorSpace)), n.push(e.customProgramCacheKey), n.join();
      },
      getUniforms: function getUniforms(t) {
        var e = g[t.type];
        var n;
        if (e) {
          var _t104 = _r[e];
          n = Ki.clone(_t104.uniforms);
        } else n = t.uniforms;
        return n;
      },
      acquireProgram: function acquireProgram(e, n) {
        var i;
        for (var _t105 = 0, _e73 = h.length; _t105 < _e73; _t105++) {
          var _e74 = h[_t105];
          if (_e74.cacheKey === n) {
            i = _e74, ++i.usedTimes;
            break;
          }
        }
        return void 0 === i && (i = new fa(t, n, e, s), h.push(i)), i;
      },
      releaseProgram: function releaseProgram(t) {
        if (0 == --t.usedTimes) {
          var _e75 = h.indexOf(t);
          h[_e75] = h[h.length - 1], h.pop(), t.destroy();
        }
      },
      releaseShaderCache: function releaseShaderCache(t) {
        c.remove(t);
      },
      programs: h,
      dispose: function dispose() {
        c.dispose();
      }
    };
  }
  function xa() {
    var t = new WeakMap();
    return {
      get: function get(e) {
        var n = t.get(e);
        return void 0 === n && (n = {}, t.set(e, n)), n;
      },
      remove: function remove(e) {
        t.delete(e);
      },
      update: function update(e, n, i) {
        t.get(e)[n] = i;
      },
      dispose: function dispose() {
        t = new WeakMap();
      }
    };
  }
  function Ma(t, e) {
    return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.material.id !== e.material.id ? t.material.id - e.material.id : t.z !== e.z ? t.z - e.z : t.id - e.id;
  }
  function Sa(t, e) {
    return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id;
  }
  function ba() {
    var t = [];
    var e = 0;
    var n = [],
      i = [],
      r = [];
    function s(n, i, r, s, a, o) {
      var l = t[e];
      return void 0 === l ? (l = {
        id: n.id,
        object: n,
        geometry: i,
        material: r,
        groupOrder: s,
        renderOrder: n.renderOrder,
        z: a,
        group: o
      }, t[e] = l) : (l.id = n.id, l.object = n, l.geometry = i, l.material = r, l.groupOrder = s, l.renderOrder = n.renderOrder, l.z = a, l.group = o), e++, l;
    }
    return {
      opaque: n,
      transmissive: i,
      transparent: r,
      init: function init() {
        e = 0, n.length = 0, i.length = 0, r.length = 0;
      },
      push: function push(t, e, a, o, l, c) {
        var h = s(t, e, a, o, l, c);
        a.transmission > 0 ? i.push(h) : !0 === a.transparent ? r.push(h) : n.push(h);
      },
      unshift: function unshift(t, e, a, o, l, c) {
        var h = s(t, e, a, o, l, c);
        a.transmission > 0 ? i.unshift(h) : !0 === a.transparent ? r.unshift(h) : n.unshift(h);
      },
      finish: function finish() {
        for (var _n92 = e, _i78 = t.length; _n92 < _i78; _n92++) {
          var _e76 = t[_n92];
          if (null === _e76.id) break;
          _e76.id = null, _e76.object = null, _e76.geometry = null, _e76.material = null, _e76.group = null;
        }
      },
      sort: function sort(t, e) {
        n.length > 1 && n.sort(t || Ma), i.length > 1 && i.sort(e || Sa), r.length > 1 && r.sort(e || Sa);
      }
    };
  }
  function Ta() {
    var t = new WeakMap();
    return {
      get: function get(e, n) {
        var i = t.get(e);
        var r;
        return void 0 === i ? (r = new ba(), t.set(e, [r])) : n >= i.length ? (r = new ba(), i.push(r)) : r = i[n], r;
      },
      dispose: function dispose() {
        t = new WeakMap();
      }
    };
  }
  function Ea() {
    var t = {};
    return {
      get: function get(e) {
        if (void 0 !== t[e.id]) return t[e.id];
        var n;
        switch (e.type) {
          case "DirectionalLight":
            n = {
              direction: new ze(),
              color: new ai()
            };
            break;
          case "SpotLight":
            n = {
              position: new ze(),
              direction: new ze(),
              color: new ai(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            n = {
              position: new ze(),
              color: new ai(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            n = {
              direction: new ze(),
              skyColor: new ai(),
              groundColor: new ai()
            };
            break;
          case "RectAreaLight":
            n = {
              color: new ai(),
              position: new ze(),
              halfWidth: new ze(),
              halfHeight: new ze()
            };
        }
        return t[e.id] = n, n;
      }
    };
  }
  var wa = 0;
  function Aa(t, e) {
    return (e.castShadow ? 2 : 0) - (t.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (t.map ? 1 : 0);
  }
  function Ra(t, e) {
    var n = new Ea(),
      i = function () {
        var t = {};
        return {
          get: function get(e) {
            if (void 0 !== t[e.id]) return t[e.id];
            var n;
            switch (e.type) {
              case "DirectionalLight":
              case "SpotLight":
                n = {
                  shadowBias: 0,
                  shadowNormalBias: 0,
                  shadowRadius: 1,
                  shadowMapSize: new ce()
                };
                break;
              case "PointLight":
                n = {
                  shadowBias: 0,
                  shadowNormalBias: 0,
                  shadowRadius: 1,
                  shadowMapSize: new ce(),
                  shadowCameraNear: 1,
                  shadowCameraFar: 1e3
                };
            }
            return t[e.id] = n, n;
          }
        };
      }(),
      r = {
        version: 0,
        hash: {
          directionalLength: -1,
          pointLength: -1,
          spotLength: -1,
          rectAreaLength: -1,
          hemiLength: -1,
          numDirectionalShadows: -1,
          numPointShadows: -1,
          numSpotShadows: -1,
          numSpotMaps: -1,
          numLightProbes: -1
        },
        ambient: [0, 0, 0],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotLightMap: [],
        spotShadow: [],
        spotShadowMap: [],
        spotLightMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
        numSpotLightShadowsWithMaps: 0,
        numLightProbes: 0
      };
    for (var _t106 = 0; _t106 < 9; _t106++) r.probe.push(new ze());
    var s = new ze(),
      a = new gn(),
      o = new gn();
    return {
      setup: function setup(s, a) {
        var o = 0,
          l = 0,
          c = 0;
        for (var _t107 = 0; _t107 < 9; _t107++) r.probe[_t107].set(0, 0, 0);
        var h = 0,
          u = 0,
          d = 0,
          p = 0,
          m = 0,
          f = 0,
          g = 0,
          _ = 0,
          v = 0,
          y = 0,
          x = 0;
        s.sort(Aa);
        var M = !0 === a ? Math.PI : 1;
        for (var _t108 = 0, _e77 = s.length; _t108 < _e77; _t108++) {
          var _e78 = s[_t108],
            _a23 = _e78.color,
            _S2 = _e78.intensity,
            _b2 = _e78.distance,
            _T2 = _e78.shadow && _e78.shadow.map ? _e78.shadow.map.texture : null;
          if (_e78.isAmbientLight) o += _a23.r * _S2 * M, l += _a23.g * _S2 * M, c += _a23.b * _S2 * M;else if (_e78.isLightProbe) {
            for (var _t109 = 0; _t109 < 9; _t109++) r.probe[_t109].addScaledVector(_e78.sh.coefficients[_t109], _S2);
            x++;
          } else if (_e78.isDirectionalLight) {
            var _t110 = n.get(_e78);
            if (_t110.color.copy(_e78.color).multiplyScalar(_e78.intensity * M), _e78.castShadow) {
              var _t111 = _e78.shadow,
                _n93 = i.get(_e78);
              _n93.shadowBias = _t111.bias, _n93.shadowNormalBias = _t111.normalBias, _n93.shadowRadius = _t111.radius, _n93.shadowMapSize = _t111.mapSize, r.directionalShadow[h] = _n93, r.directionalShadowMap[h] = _T2, r.directionalShadowMatrix[h] = _e78.shadow.matrix, f++;
            }
            r.directional[h] = _t110, h++;
          } else if (_e78.isSpotLight) {
            var _t112 = n.get(_e78);
            _t112.position.setFromMatrixPosition(_e78.matrixWorld), _t112.color.copy(_a23).multiplyScalar(_S2 * M), _t112.distance = _b2, _t112.coneCos = Math.cos(_e78.angle), _t112.penumbraCos = Math.cos(_e78.angle * (1 - _e78.penumbra)), _t112.decay = _e78.decay, r.spot[d] = _t112;
            var _s31 = _e78.shadow;
            if (_e78.map && (r.spotLightMap[v] = _e78.map, v++, _s31.updateMatrices(_e78), _e78.castShadow && y++), r.spotLightMatrix[d] = _s31.matrix, _e78.castShadow) {
              var _t113 = i.get(_e78);
              _t113.shadowBias = _s31.bias, _t113.shadowNormalBias = _s31.normalBias, _t113.shadowRadius = _s31.radius, _t113.shadowMapSize = _s31.mapSize, r.spotShadow[d] = _t113, r.spotShadowMap[d] = _T2, _++;
            }
            d++;
          } else if (_e78.isRectAreaLight) {
            var _t114 = n.get(_e78);
            _t114.color.copy(_a23).multiplyScalar(_S2), _t114.halfWidth.set(.5 * _e78.width, 0, 0), _t114.halfHeight.set(0, .5 * _e78.height, 0), r.rectArea[p] = _t114, p++;
          } else if (_e78.isPointLight) {
            var _t115 = n.get(_e78);
            if (_t115.color.copy(_e78.color).multiplyScalar(_e78.intensity * M), _t115.distance = _e78.distance, _t115.decay = _e78.decay, _e78.castShadow) {
              var _t116 = _e78.shadow,
                _n94 = i.get(_e78);
              _n94.shadowBias = _t116.bias, _n94.shadowNormalBias = _t116.normalBias, _n94.shadowRadius = _t116.radius, _n94.shadowMapSize = _t116.mapSize, _n94.shadowCameraNear = _t116.camera.near, _n94.shadowCameraFar = _t116.camera.far, r.pointShadow[u] = _n94, r.pointShadowMap[u] = _T2, r.pointShadowMatrix[u] = _e78.shadow.matrix, g++;
            }
            r.point[u] = _t115, u++;
          } else if (_e78.isHemisphereLight) {
            var _t117 = n.get(_e78);
            _t117.skyColor.copy(_e78.color).multiplyScalar(_S2 * M), _t117.groundColor.copy(_e78.groundColor).multiplyScalar(_S2 * M), r.hemi[m] = _t117, m++;
          }
        }
        p > 0 && (e.isWebGL2 || !0 === t.has("OES_texture_float_linear") ? (r.rectAreaLTC1 = gr.LTC_FLOAT_1, r.rectAreaLTC2 = gr.LTC_FLOAT_2) : !0 === t.has("OES_texture_half_float_linear") ? (r.rectAreaLTC1 = gr.LTC_HALF_1, r.rectAreaLTC2 = gr.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), r.ambient[0] = o, r.ambient[1] = l, r.ambient[2] = c;
        var S = r.hash;
        S.directionalLength === h && S.pointLength === u && S.spotLength === d && S.rectAreaLength === p && S.hemiLength === m && S.numDirectionalShadows === f && S.numPointShadows === g && S.numSpotShadows === _ && S.numSpotMaps === v && S.numLightProbes === x || (r.directional.length = h, r.spot.length = d, r.rectArea.length = p, r.point.length = u, r.hemi.length = m, r.directionalShadow.length = f, r.directionalShadowMap.length = f, r.pointShadow.length = g, r.pointShadowMap.length = g, r.spotShadow.length = _, r.spotShadowMap.length = _, r.directionalShadowMatrix.length = f, r.pointShadowMatrix.length = g, r.spotLightMatrix.length = _ + v - y, r.spotLightMap.length = v, r.numSpotLightShadowsWithMaps = y, r.numLightProbes = x, S.directionalLength = h, S.pointLength = u, S.spotLength = d, S.rectAreaLength = p, S.hemiLength = m, S.numDirectionalShadows = f, S.numPointShadows = g, S.numSpotShadows = _, S.numSpotMaps = v, S.numLightProbes = x, r.version = wa++);
      },
      setupView: function setupView(t, e) {
        var n = 0,
          i = 0,
          l = 0,
          c = 0,
          h = 0;
        var u = e.matrixWorldInverse;
        for (var _e79 = 0, _d6 = t.length; _e79 < _d6; _e79++) {
          var _d7 = t[_e79];
          if (_d7.isDirectionalLight) {
            var _t118 = r.directional[n];
            _t118.direction.setFromMatrixPosition(_d7.matrixWorld), s.setFromMatrixPosition(_d7.target.matrixWorld), _t118.direction.sub(s), _t118.direction.transformDirection(u), n++;
          } else if (_d7.isSpotLight) {
            var _t119 = r.spot[l];
            _t119.position.setFromMatrixPosition(_d7.matrixWorld), _t119.position.applyMatrix4(u), _t119.direction.setFromMatrixPosition(_d7.matrixWorld), s.setFromMatrixPosition(_d7.target.matrixWorld), _t119.direction.sub(s), _t119.direction.transformDirection(u), l++;
          } else if (_d7.isRectAreaLight) {
            var _t120 = r.rectArea[c];
            _t120.position.setFromMatrixPosition(_d7.matrixWorld), _t120.position.applyMatrix4(u), o.identity(), a.copy(_d7.matrixWorld), a.premultiply(u), o.extractRotation(a), _t120.halfWidth.set(.5 * _d7.width, 0, 0), _t120.halfHeight.set(0, .5 * _d7.height, 0), _t120.halfWidth.applyMatrix4(o), _t120.halfHeight.applyMatrix4(o), c++;
          } else if (_d7.isPointLight) {
            var _t121 = r.point[i];
            _t121.position.setFromMatrixPosition(_d7.matrixWorld), _t121.position.applyMatrix4(u), i++;
          } else if (_d7.isHemisphereLight) {
            var _t122 = r.hemi[h];
            _t122.direction.setFromMatrixPosition(_d7.matrixWorld), _t122.direction.transformDirection(u), h++;
          }
        }
      },
      state: r
    };
  }
  function Ca(t, e) {
    var n = new Ra(t, e),
      i = [],
      r = [];
    return {
      init: function init() {
        i.length = 0, r.length = 0;
      },
      state: {
        lightsArray: i,
        shadowsArray: r,
        lights: n
      },
      setupLights: function setupLights(t) {
        n.setup(i, t);
      },
      setupLightsView: function setupLightsView(t) {
        n.setupView(i, t);
      },
      pushLight: function pushLight(t) {
        i.push(t);
      },
      pushShadow: function pushShadow(t) {
        r.push(t);
      }
    };
  }
  function La(t, e) {
    var n = new WeakMap();
    return {
      get: function get(i) {
        var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var s = n.get(i);
        var a;
        return void 0 === s ? (a = new Ca(t, e), n.set(i, [a])) : r >= s.length ? (a = new Ca(t, e), s.push(a)) : a = s[r], a;
      },
      dispose: function dispose() {
        n = new WeakMap();
      }
    };
  }
  var Pa = /*#__PURE__*/function (_ei3) {
    _inherits(Pa, _ei3);
    var _super23 = _createSuper(Pa);
    function Pa(t) {
      var _this20;
      _classCallCheck(this, Pa);
      _this20 = _super23.call(this), _this20.isMeshDepthMaterial = !0, _this20.type = "MeshDepthMaterial", _this20.depthPacking = 3200, _this20.map = null, _this20.alphaMap = null, _this20.displacementMap = null, _this20.displacementScale = 1, _this20.displacementBias = 0, _this20.wireframe = !1, _this20.wireframeLinewidth = 1, _this20.setValues(t);
      return _this20;
    }
    _createClass(Pa, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Pa.prototype), "copy", this).call(this, t), this.depthPacking = t.depthPacking, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this;
      }
    }]);
    return Pa;
  }(ei);
  var Ia = /*#__PURE__*/function (_ei4) {
    _inherits(Ia, _ei4);
    var _super24 = _createSuper(Ia);
    function Ia(t) {
      var _this21;
      _classCallCheck(this, Ia);
      _this21 = _super24.call(this), _this21.isMeshDistanceMaterial = !0, _this21.type = "MeshDistanceMaterial", _this21.map = null, _this21.alphaMap = null, _this21.displacementMap = null, _this21.displacementScale = 1, _this21.displacementBias = 0, _this21.setValues(t);
      return _this21;
    }
    _createClass(Ia, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ia.prototype), "copy", this).call(this, t), this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this;
      }
    }]);
    return Ia;
  }(ei);
  function Ua(t, e, i) {
    var _f3;
    var o = new ur();
    var l = new ce(),
      c = new ce(),
      h = new Ue(),
      u = new Pa({
        depthPacking: 3201
      }),
      d = new Ia(),
      p = {},
      m = i.maxTextureSize,
      f = (_f3 = {}, _defineProperty(_f3, s, a), _defineProperty(_f3, a, s), _defineProperty(_f3, 2, 2), _f3),
      g = new $i({
        defines: {
          VSM_SAMPLES: 8
        },
        uniforms: {
          shadow_pass: {
            value: null
          },
          resolution: {
            value: new ce()
          },
          radius: {
            value: 4
          }
        },
        vertexShader: "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",
        fragmentShader: "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"
      }),
      _ = g.clone();
    _.defines.HORIZONTAL_PASS = 1;
    var v = new Ai();
    v.setAttribute("position", new gi(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3));
    var y = new Xi(v, g),
      x = this;
    this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = n;
    var M = this.type;
    function S(n, i) {
      var r = e.update(y);
      g.defines.VSM_SAMPLES !== n.blurSamples && (g.defines.VSM_SAMPLES = n.blurSamples, _.defines.VSM_SAMPLES = n.blurSamples, g.needsUpdate = !0, _.needsUpdate = !0), null === n.mapPass && (n.mapPass = new Ne(l.x, l.y)), g.uniforms.shadow_pass.value = n.map.texture, g.uniforms.resolution.value = n.mapSize, g.uniforms.radius.value = n.radius, t.setRenderTarget(n.mapPass), t.clear(), t.renderBufferDirect(i, null, r, g, y, null), _.uniforms.shadow_pass.value = n.mapPass.texture, _.uniforms.resolution.value = n.mapSize, _.uniforms.radius.value = n.radius, t.setRenderTarget(n.map), t.clear(), t.renderBufferDirect(i, null, r, _, y, null);
    }
    function b(e, n, i, s) {
      var a = null;
      var o = !0 === i.isPointLight ? e.customDistanceMaterial : e.customDepthMaterial;
      if (void 0 !== o) a = o;else if (a = !0 === i.isPointLight ? d : u, t.localClippingEnabled && !0 === n.clipShadows && Array.isArray(n.clippingPlanes) && 0 !== n.clippingPlanes.length || n.displacementMap && 0 !== n.displacementScale || n.alphaMap && n.alphaTest > 0 || n.map && n.alphaTest > 0) {
        var _t123 = a.uuid,
          _e80 = n.uuid;
        var _i79 = p[_t123];
        void 0 === _i79 && (_i79 = {}, p[_t123] = _i79);
        var _r54 = _i79[_e80];
        void 0 === _r54 && (_r54 = a.clone(), _i79[_e80] = _r54), a = _r54;
      }
      if (a.visible = n.visible, a.wireframe = n.wireframe, a.side = s === r ? null !== n.shadowSide ? n.shadowSide : n.side : null !== n.shadowSide ? n.shadowSide : f[n.side], a.alphaMap = n.alphaMap, a.alphaTest = n.alphaTest, a.map = n.map, a.clipShadows = n.clipShadows, a.clippingPlanes = n.clippingPlanes, a.clipIntersection = n.clipIntersection, a.displacementMap = n.displacementMap, a.displacementScale = n.displacementScale, a.displacementBias = n.displacementBias, a.wireframeLinewidth = n.wireframeLinewidth, a.linewidth = n.linewidth, !0 === i.isPointLight && !0 === a.isMeshDistanceMaterial) {
        t.properties.get(a).light = i;
      }
      return a;
    }
    function T(n, i, s, a, l) {
      if (!1 === n.visible) return;
      if (n.layers.test(i.layers) && (n.isMesh || n.isLine || n.isPoints) && (n.castShadow || n.receiveShadow && l === r) && (!n.frustumCulled || o.intersectsObject(n))) {
        n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse, n.matrixWorld);
        var _i80 = e.update(n),
          _r55 = n.material;
        if (Array.isArray(_r55)) {
          var _e81 = _i80.groups;
          for (var _o14 = 0, _c9 = _e81.length; _o14 < _c9; _o14++) {
            var _c10 = _e81[_o14],
              _h6 = _r55[_c10.materialIndex];
            if (_h6 && _h6.visible) {
              var _e82 = b(n, _h6, a, l);
              t.renderBufferDirect(s, null, _i80, _e82, n, _c10);
            }
          }
        } else if (_r55.visible) {
          var _e83 = b(n, _r55, a, l);
          t.renderBufferDirect(s, null, _i80, _e83, n, null);
        }
      }
      var c = n.children;
      for (var _t124 = 0, _e84 = c.length; _t124 < _e84; _t124++) T(c[_t124], i, s, a, l);
    }
    this.render = function (e, n, i) {
      if (!1 === x.enabled) return;
      if (!1 === x.autoUpdate && !1 === x.needsUpdate) return;
      if (0 === e.length) return;
      var s = t.getRenderTarget(),
        a = t.getActiveCubeFace(),
        u = t.getActiveMipmapLevel(),
        d = t.state;
      d.setBlending(0), d.buffers.color.setClear(1, 1, 1, 1), d.buffers.depth.setTest(!0), d.setScissorTest(!1);
      var p = M !== r && this.type === r,
        f = M === r && this.type !== r;
      for (var _s32 = 0, _a24 = e.length; _s32 < _a24; _s32++) {
        var _a25 = e[_s32],
          _u6 = _a25.shadow;
        if (void 0 === _u6) {
          console.warn("THREE.WebGLShadowMap:", _a25, "has no shadow.");
          continue;
        }
        if (!1 === _u6.autoUpdate && !1 === _u6.needsUpdate) continue;
        l.copy(_u6.mapSize);
        var _g3 = _u6.getFrameExtents();
        if (l.multiply(_g3), c.copy(_u6.mapSize), (l.x > m || l.y > m) && (l.x > m && (c.x = Math.floor(m / _g3.x), l.x = c.x * _g3.x, _u6.mapSize.x = c.x), l.y > m && (c.y = Math.floor(m / _g3.y), l.y = c.y * _g3.y, _u6.mapSize.y = c.y)), null === _u6.map || !0 === p || !0 === f) {
          var _t125 = this.type !== r ? {
            minFilter: w,
            magFilter: w
          } : {};
          null !== _u6.map && _u6.map.dispose(), _u6.map = new Ne(l.x, l.y, _t125), _u6.map.texture.name = _a25.name + ".shadowMap", _u6.camera.updateProjectionMatrix();
        }
        t.setRenderTarget(_u6.map), t.clear();
        var _5 = _u6.getViewportCount();
        for (var _t126 = 0; _t126 < _5; _t126++) {
          var _e85 = _u6.getViewport(_t126);
          h.set(c.x * _e85.x, c.y * _e85.y, c.x * _e85.z, c.y * _e85.w), d.viewport(h), _u6.updateMatrices(_a25, _t126), o = _u6.getFrustum(), T(n, i, _u6.camera, _a25, this.type);
        }
        !0 !== _u6.isPointLightShadow && this.type === r && S(_u6, i), _u6.needsUpdate = !1;
      }
      M = this.type, x.needsUpdate = !1, t.setRenderTarget(s, a, u);
    };
  }
  function Da(t, e, n) {
    var _W2;
    var i = n.isWebGL2;
    var r = new function () {
        var e = !1;
        var n = new Ue();
        var i = null;
        var r = new Ue(0, 0, 0, 0);
        return {
          setMask: function setMask(n) {
            i === n || e || (t.colorMask(n, n, n, n), i = n);
          },
          setLocked: function setLocked(t) {
            e = t;
          },
          setClear: function setClear(e, i, s, a, o) {
            !0 === o && (e *= a, i *= a, s *= a), n.set(e, i, s, a), !1 === r.equals(n) && (t.clearColor(e, i, s, a), r.copy(n));
          },
          reset: function reset() {
            e = !1, i = null, r.set(-1, 0, 0, 0);
          }
        };
      }(),
      s = new function () {
        var e = !1,
          n = null,
          i = null,
          r = null;
        return {
          setTest: function setTest(e) {
            e ? V(t.DEPTH_TEST) : k(t.DEPTH_TEST);
          },
          setMask: function setMask(i) {
            n === i || e || (t.depthMask(i), n = i);
          },
          setFunc: function setFunc(e) {
            if (i !== e) {
              switch (e) {
                case 0:
                  t.depthFunc(t.NEVER);
                  break;
                case 1:
                  t.depthFunc(t.ALWAYS);
                  break;
                case 2:
                  t.depthFunc(t.LESS);
                  break;
                case 3:
                default:
                  t.depthFunc(t.LEQUAL);
                  break;
                case 4:
                  t.depthFunc(t.EQUAL);
                  break;
                case 5:
                  t.depthFunc(t.GEQUAL);
                  break;
                case 6:
                  t.depthFunc(t.GREATER);
                  break;
                case 7:
                  t.depthFunc(t.NOTEQUAL);
              }
              i = e;
            }
          },
          setLocked: function setLocked(t) {
            e = t;
          },
          setClear: function setClear(e) {
            r !== e && (t.clearDepth(e), r = e);
          },
          reset: function reset() {
            e = !1, n = null, i = null, r = null;
          }
        };
      }(),
      l = new function () {
        var e = !1,
          n = null,
          i = null,
          r = null,
          s = null,
          a = null,
          o = null,
          l = null,
          c = null;
        return {
          setTest: function setTest(n) {
            e || (n ? V(t.STENCIL_TEST) : k(t.STENCIL_TEST));
          },
          setMask: function setMask(i) {
            n === i || e || (t.stencilMask(i), n = i);
          },
          setFunc: function setFunc(e, n, a) {
            i === e && r === n && s === a || (t.stencilFunc(e, n, a), i = e, r = n, s = a);
          },
          setOp: function setOp(e, n, i) {
            a === e && o === n && l === i || (t.stencilOp(e, n, i), a = e, o = n, l = i);
          },
          setLocked: function setLocked(t) {
            e = t;
          },
          setClear: function setClear(e) {
            c !== e && (t.clearStencil(e), c = e);
          },
          reset: function reset() {
            e = !1, n = null, i = null, r = null, s = null, a = null, o = null, l = null, c = null;
          }
        };
      }(),
      c = new WeakMap(),
      h = new WeakMap();
    var u = {},
      d = {},
      p = new WeakMap(),
      m = [],
      f = null,
      g = !1,
      _ = null,
      v = null,
      y = null,
      x = null,
      M = null,
      S = null,
      b = null,
      T = !1,
      E = null,
      w = null,
      A = null,
      R = null,
      C = null;
    var L = t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    var P = !1,
      I = 0;
    var U = t.getParameter(t.VERSION);
    -1 !== U.indexOf("WebGL") ? (I = parseFloat(/^WebGL (\d)/.exec(U)[1]), P = I >= 1) : -1 !== U.indexOf("OpenGL ES") && (I = parseFloat(/^OpenGL ES (\d)/.exec(U)[1]), P = I >= 2);
    var D = null,
      N = {};
    var O = t.getParameter(t.SCISSOR_BOX),
      F = t.getParameter(t.VIEWPORT),
      B = new Ue().fromArray(O),
      z = new Ue().fromArray(F);
    function H(e, n, r, s) {
      var a = new Uint8Array(4),
        o = t.createTexture();
      t.bindTexture(e, o), t.texParameteri(e, t.TEXTURE_MIN_FILTER, t.NEAREST), t.texParameteri(e, t.TEXTURE_MAG_FILTER, t.NEAREST);
      for (var _o15 = 0; _o15 < r; _o15++) !i || e !== t.TEXTURE_3D && e !== t.TEXTURE_2D_ARRAY ? t.texImage2D(n + _o15, 0, t.RGBA, 1, 1, 0, t.RGBA, t.UNSIGNED_BYTE, a) : t.texImage3D(n, 0, t.RGBA, 1, 1, s, 0, t.RGBA, t.UNSIGNED_BYTE, a);
      return o;
    }
    var G = {};
    function V(e) {
      !0 !== u[e] && (t.enable(e), u[e] = !0);
    }
    function k(e) {
      !1 !== u[e] && (t.disable(e), u[e] = !1);
    }
    G[t.TEXTURE_2D] = H(t.TEXTURE_2D, t.TEXTURE_2D, 1), G[t.TEXTURE_CUBE_MAP] = H(t.TEXTURE_CUBE_MAP, t.TEXTURE_CUBE_MAP_POSITIVE_X, 6), i && (G[t.TEXTURE_2D_ARRAY] = H(t.TEXTURE_2D_ARRAY, t.TEXTURE_2D_ARRAY, 1, 1), G[t.TEXTURE_3D] = H(t.TEXTURE_3D, t.TEXTURE_3D, 1, 1)), r.setClear(0, 0, 0, 1), s.setClear(1), l.setClear(0), V(t.DEPTH_TEST), s.setFunc(3), q(!1), Y(1), V(t.CULL_FACE), j(0);
    var W = (_W2 = {}, _defineProperty(_W2, o, t.FUNC_ADD), _defineProperty(_W2, 101, t.FUNC_SUBTRACT), _defineProperty(_W2, 102, t.FUNC_REVERSE_SUBTRACT), _W2);
    if (i) W[103] = t.MIN, W[104] = t.MAX;else {
      var _t127 = e.get("EXT_blend_minmax");
      null !== _t127 && (W[103] = _t127.MIN_EXT, W[104] = _t127.MAX_EXT);
    }
    var X = {
      200: t.ZERO,
      201: t.ONE,
      202: t.SRC_COLOR,
      204: t.SRC_ALPHA,
      210: t.SRC_ALPHA_SATURATE,
      208: t.DST_COLOR,
      206: t.DST_ALPHA,
      203: t.ONE_MINUS_SRC_COLOR,
      205: t.ONE_MINUS_SRC_ALPHA,
      209: t.ONE_MINUS_DST_COLOR,
      207: t.ONE_MINUS_DST_ALPHA
    };
    function j(e, n, i, r, s, a, l, c) {
      if (0 !== e) {
        if (!1 === g && (V(t.BLEND), g = !0), 5 === e) s = s || n, a = a || i, l = l || r, n === v && s === M || (t.blendEquationSeparate(W[n], W[s]), v = n, M = s), i === y && r === x && a === S && l === b || (t.blendFuncSeparate(X[i], X[r], X[a], X[l]), y = i, x = r, S = a, b = l), _ = e, T = !1;else if (e !== _ || c !== T) {
          if (v === o && M === o || (t.blendEquation(t.FUNC_ADD), v = o, M = o), c) switch (e) {
            case 1:
              t.blendFuncSeparate(t.ONE, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA);
              break;
            case 2:
              t.blendFunc(t.ONE, t.ONE);
              break;
            case 3:
              t.blendFuncSeparate(t.ZERO, t.ONE_MINUS_SRC_COLOR, t.ZERO, t.ONE);
              break;
            case 4:
              t.blendFuncSeparate(t.ZERO, t.SRC_COLOR, t.ZERO, t.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", e);
          } else switch (e) {
            case 1:
              t.blendFuncSeparate(t.SRC_ALPHA, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA);
              break;
            case 2:
              t.blendFunc(t.SRC_ALPHA, t.ONE);
              break;
            case 3:
              t.blendFuncSeparate(t.ZERO, t.ONE_MINUS_SRC_COLOR, t.ZERO, t.ONE);
              break;
            case 4:
              t.blendFunc(t.ZERO, t.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", e);
          }
          y = null, x = null, S = null, b = null, _ = e, T = c;
        }
      } else !0 === g && (k(t.BLEND), g = !1);
    }
    function q(e) {
      E !== e && (e ? t.frontFace(t.CW) : t.frontFace(t.CCW), E = e);
    }
    function Y(e) {
      0 !== e ? (V(t.CULL_FACE), e !== w && (1 === e ? t.cullFace(t.BACK) : 2 === e ? t.cullFace(t.FRONT) : t.cullFace(t.FRONT_AND_BACK))) : k(t.CULL_FACE), w = e;
    }
    function Z(e, n, i) {
      e ? (V(t.POLYGON_OFFSET_FILL), R === n && C === i || (t.polygonOffset(n, i), R = n, C = i)) : k(t.POLYGON_OFFSET_FILL);
    }
    return {
      buffers: {
        color: r,
        depth: s,
        stencil: l
      },
      enable: V,
      disable: k,
      bindFramebuffer: function bindFramebuffer(e, n) {
        return d[e] !== n && (t.bindFramebuffer(e, n), d[e] = n, i && (e === t.DRAW_FRAMEBUFFER && (d[t.FRAMEBUFFER] = n), e === t.FRAMEBUFFER && (d[t.DRAW_FRAMEBUFFER] = n)), !0);
      },
      drawBuffers: function drawBuffers(i, r) {
        var s = m,
          a = !1;
        if (i) {
          if (s = p.get(r), void 0 === s && (s = [], p.set(r, s)), i.isWebGLMultipleRenderTargets) {
            var _e86 = i.texture;
            if (s.length !== _e86.length || s[0] !== t.COLOR_ATTACHMENT0) {
              for (var _n95 = 0, _i81 = _e86.length; _n95 < _i81; _n95++) s[_n95] = t.COLOR_ATTACHMENT0 + _n95;
              s.length = _e86.length, a = !0;
            }
          } else s[0] !== t.COLOR_ATTACHMENT0 && (s[0] = t.COLOR_ATTACHMENT0, a = !0);
        } else s[0] !== t.BACK && (s[0] = t.BACK, a = !0);
        a && (n.isWebGL2 ? t.drawBuffers(s) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(s));
      },
      useProgram: function useProgram(e) {
        return f !== e && (t.useProgram(e), f = e, !0);
      },
      setBlending: j,
      setMaterial: function setMaterial(e, n) {
        2 === e.side ? k(t.CULL_FACE) : V(t.CULL_FACE);
        var i = e.side === a;
        n && (i = !i), q(i), 1 === e.blending && !1 === e.transparent ? j(0) : j(e.blending, e.blendEquation, e.blendSrc, e.blendDst, e.blendEquationAlpha, e.blendSrcAlpha, e.blendDstAlpha, e.premultipliedAlpha), s.setFunc(e.depthFunc), s.setTest(e.depthTest), s.setMask(e.depthWrite), r.setMask(e.colorWrite);
        var o = e.stencilWrite;
        l.setTest(o), o && (l.setMask(e.stencilWriteMask), l.setFunc(e.stencilFunc, e.stencilRef, e.stencilFuncMask), l.setOp(e.stencilFail, e.stencilZFail, e.stencilZPass)), Z(e.polygonOffset, e.polygonOffsetFactor, e.polygonOffsetUnits), !0 === e.alphaToCoverage ? V(t.SAMPLE_ALPHA_TO_COVERAGE) : k(t.SAMPLE_ALPHA_TO_COVERAGE);
      },
      setFlipSided: q,
      setCullFace: Y,
      setLineWidth: function setLineWidth(e) {
        e !== A && (P && t.lineWidth(e), A = e);
      },
      setPolygonOffset: Z,
      setScissorTest: function setScissorTest(e) {
        e ? V(t.SCISSOR_TEST) : k(t.SCISSOR_TEST);
      },
      activeTexture: function activeTexture(e) {
        void 0 === e && (e = t.TEXTURE0 + L - 1), D !== e && (t.activeTexture(e), D = e);
      },
      bindTexture: function bindTexture(e, n, i) {
        void 0 === i && (i = null === D ? t.TEXTURE0 + L - 1 : D);
        var r = N[i];
        void 0 === r && (r = {
          type: void 0,
          texture: void 0
        }, N[i] = r), r.type === e && r.texture === n || (D !== i && (t.activeTexture(i), D = i), t.bindTexture(e, n || G[e]), r.type = e, r.texture = n);
      },
      unbindTexture: function unbindTexture() {
        var e = N[D];
        void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null), e.type = void 0, e.texture = void 0);
      },
      compressedTexImage2D: function compressedTexImage2D() {
        try {
          t.compressedTexImage2D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      compressedTexImage3D: function compressedTexImage3D() {
        try {
          t.compressedTexImage3D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      texImage2D: function texImage2D() {
        try {
          t.texImage2D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      texImage3D: function texImage3D() {
        try {
          t.texImage3D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      updateUBOMapping: function updateUBOMapping(e, n) {
        var i = h.get(n);
        void 0 === i && (i = new WeakMap(), h.set(n, i));
        var r = i.get(e);
        void 0 === r && (r = t.getUniformBlockIndex(n, e.name), i.set(e, r));
      },
      uniformBlockBinding: function uniformBlockBinding(e, n) {
        var i = h.get(n).get(e);
        c.get(n) !== i && (t.uniformBlockBinding(n, i, e.__bindingPointIndex), c.set(n, i));
      },
      texStorage2D: function texStorage2D() {
        try {
          t.texStorage2D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      texStorage3D: function texStorage3D() {
        try {
          t.texStorage3D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      texSubImage2D: function texSubImage2D() {
        try {
          t.texSubImage2D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      texSubImage3D: function texSubImage3D() {
        try {
          t.texSubImage3D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      compressedTexSubImage2D: function compressedTexSubImage2D() {
        try {
          t.compressedTexSubImage2D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      compressedTexSubImage3D: function compressedTexSubImage3D() {
        try {
          t.compressedTexSubImage3D.apply(t, arguments);
        } catch (t) {
          console.error("THREE.WebGLState:", t);
        }
      },
      scissor: function scissor(e) {
        !1 === B.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), B.copy(e));
      },
      viewport: function viewport(e) {
        !1 === z.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), z.copy(e));
      },
      reset: function reset() {
        t.disable(t.BLEND), t.disable(t.CULL_FACE), t.disable(t.DEPTH_TEST), t.disable(t.POLYGON_OFFSET_FILL), t.disable(t.SCISSOR_TEST), t.disable(t.STENCIL_TEST), t.disable(t.SAMPLE_ALPHA_TO_COVERAGE), t.blendEquation(t.FUNC_ADD), t.blendFunc(t.ONE, t.ZERO), t.blendFuncSeparate(t.ONE, t.ZERO, t.ONE, t.ZERO), t.colorMask(!0, !0, !0, !0), t.clearColor(0, 0, 0, 0), t.depthMask(!0), t.depthFunc(t.LESS), t.clearDepth(1), t.stencilMask(4294967295), t.stencilFunc(t.ALWAYS, 0, 4294967295), t.stencilOp(t.KEEP, t.KEEP, t.KEEP), t.clearStencil(0), t.cullFace(t.BACK), t.frontFace(t.CCW), t.polygonOffset(0, 0), t.activeTexture(t.TEXTURE0), t.bindFramebuffer(t.FRAMEBUFFER, null), !0 === i && (t.bindFramebuffer(t.DRAW_FRAMEBUFFER, null), t.bindFramebuffer(t.READ_FRAMEBUFFER, null)), t.useProgram(null), t.lineWidth(1), t.scissor(0, 0, t.canvas.width, t.canvas.height), t.viewport(0, 0, t.canvas.width, t.canvas.height), u = {}, D = null, N = {}, d = {}, p = new WeakMap(), m = [], f = null, g = !1, _ = null, v = null, y = null, x = null, M = null, S = null, b = null, T = !1, E = null, w = null, A = null, R = null, C = null, B.set(0, 0, t.canvas.width, t.canvas.height), z.set(0, 0, t.canvas.width, t.canvas.height), r.reset(), s.reset(), l.reset();
      }
    };
  }
  function Na(t, e, n, i, r, s, a) {
    var _Z2, _J2;
    var o = r.isWebGL2,
      l = r.maxTextures,
      c = r.maxCubemapSize,
      h = r.maxTextureSize,
      u = r.maxSamples,
      d = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null,
      p = "undefined" != typeof navigator && /OculusBrowser/g.test(navigator.userAgent),
      m = new WeakMap();
    var f;
    var g = new WeakMap();
    var _ = !1;
    try {
      _ = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext("2d");
    } catch (t) {}
    function v(t, e) {
      return _ ? new OffscreenCanvas(t, e) : fe("canvas");
    }
    function y(t, e, n, i) {
      var r = 1;
      if ((t.width > i || t.height > i) && (r = i / Math.max(t.width, t.height)), r < 1 || !0 === e) {
        if ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap) {
          var _i82 = e ? se : Math.floor,
            _s33 = _i82(r * t.width),
            _a26 = _i82(r * t.height);
          void 0 === f && (f = v(_s33, _a26));
          var _o16 = n ? v(_s33, _a26) : f;
          _o16.width = _s33, _o16.height = _a26;
          return _o16.getContext("2d").drawImage(t, 0, 0, _s33, _a26), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + t.width + "x" + t.height + ") to (" + _s33 + "x" + _a26 + ")."), _o16;
        }
        return "data" in t && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + t.width + "x" + t.height + ")."), t;
      }
      return t;
    }
    function x(t) {
      return ie(t.width) && ie(t.height);
    }
    function M(t, e) {
      return t.generateMipmaps && e && t.minFilter !== w && t.minFilter !== C;
    }
    function S(e) {
      t.generateMipmap(e);
    }
    function D(n, i, r, s) {
      var a = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
      if (!1 === o) return i;
      if (null !== n) {
        if (void 0 !== t[n]) return t[n];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'");
      }
      var l = i;
      if (i === t.RED && (r === t.FLOAT && (l = t.R32F), r === t.HALF_FLOAT && (l = t.R16F), r === t.UNSIGNED_BYTE && (l = t.R8)), i === t.RED_INTEGER && (r === t.UNSIGNED_BYTE && (l = t.R8UI), r === t.UNSIGNED_SHORT && (l = t.R16UI), r === t.UNSIGNED_INT && (l = t.R32UI), r === t.BYTE && (l = t.R8I), r === t.SHORT && (l = t.R16I), r === t.INT && (l = t.R32I)), i === t.RG && (r === t.FLOAT && (l = t.RG32F), r === t.HALF_FLOAT && (l = t.RG16F), r === t.UNSIGNED_BYTE && (l = t.RG8)), i === t.RGBA) {
        var _e87 = a ? Bt : be.getTransfer(s);
        r === t.FLOAT && (l = t.RGBA32F), r === t.HALF_FLOAT && (l = t.RGBA16F), r === t.UNSIGNED_BYTE && (l = _e87 === zt ? t.SRGB8_ALPHA8 : t.RGBA8), r === t.UNSIGNED_SHORT_4_4_4_4 && (l = t.RGBA4), r === t.UNSIGNED_SHORT_5_5_5_1 && (l = t.RGB5_A1);
      }
      return l !== t.R16F && l !== t.R32F && l !== t.RG16F && l !== t.RG32F && l !== t.RGBA16F && l !== t.RGBA32F || e.get("EXT_color_buffer_float"), l;
    }
    function B(t, e, n) {
      return !0 === M(t, n) || t.isFramebufferTexture && t.minFilter !== w && t.minFilter !== C ? Math.log2(Math.max(e.width, e.height)) + 1 : void 0 !== t.mipmaps && t.mipmaps.length > 0 ? t.mipmaps.length : t.isCompressedTexture && Array.isArray(t.image) ? e.mipmaps.length : 1;
    }
    function z(e) {
      return e === w || e === A || e === R ? t.NEAREST : t.LINEAR;
    }
    function W(t) {
      var e = t.target;
      e.removeEventListener("dispose", W), function (t) {
        var e = i.get(t);
        if (void 0 === e.__webglInit) return;
        var n = t.source,
          r = g.get(n);
        if (r) {
          var _i83 = r[e.__cacheKey];
          _i83.usedTimes--, 0 === _i83.usedTimes && j(t), 0 === Object.keys(r).length && g.delete(n);
        }
        i.remove(t);
      }(e), e.isVideoTexture && m.delete(e);
    }
    function X(e) {
      var n = e.target;
      n.removeEventListener("dispose", X), function (e) {
        var n = e.texture,
          r = i.get(e),
          s = i.get(n);
        void 0 !== s.__webglTexture && (t.deleteTexture(s.__webglTexture), a.memory.textures--);
        e.depthTexture && e.depthTexture.dispose();
        if (e.isWebGLCubeRenderTarget) for (var _e88 = 0; _e88 < 6; _e88++) {
          if (Array.isArray(r.__webglFramebuffer[_e88])) for (var _n96 = 0; _n96 < r.__webglFramebuffer[_e88].length; _n96++) t.deleteFramebuffer(r.__webglFramebuffer[_e88][_n96]);else t.deleteFramebuffer(r.__webglFramebuffer[_e88]);
          r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer[_e88]);
        } else {
          if (Array.isArray(r.__webglFramebuffer)) for (var _e89 = 0; _e89 < r.__webglFramebuffer.length; _e89++) t.deleteFramebuffer(r.__webglFramebuffer[_e89]);else t.deleteFramebuffer(r.__webglFramebuffer);
          if (r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer), r.__webglMultisampledFramebuffer && t.deleteFramebuffer(r.__webglMultisampledFramebuffer), r.__webglColorRenderbuffer) for (var _e90 = 0; _e90 < r.__webglColorRenderbuffer.length; _e90++) r.__webglColorRenderbuffer[_e90] && t.deleteRenderbuffer(r.__webglColorRenderbuffer[_e90]);
          r.__webglDepthRenderbuffer && t.deleteRenderbuffer(r.__webglDepthRenderbuffer);
        }
        if (e.isWebGLMultipleRenderTargets) for (var _e91 = 0, _r56 = n.length; _e91 < _r56; _e91++) {
          var _r57 = i.get(n[_e91]);
          _r57.__webglTexture && (t.deleteTexture(_r57.__webglTexture), a.memory.textures--), i.remove(n[_e91]);
        }
        i.remove(n), i.remove(e);
      }(n);
    }
    function j(e) {
      var n = i.get(e);
      t.deleteTexture(n.__webglTexture);
      var r = e.source;
      delete g.get(r)[n.__cacheKey], a.memory.textures--;
    }
    var q = 0;
    function Y(e, r) {
      var s = i.get(e);
      if (e.isVideoTexture && function (t) {
        var e = a.render.frame;
        m.get(t) !== e && (m.set(t, e), t.update());
      }(e), !1 === e.isRenderTargetTexture && e.version > 0 && s.__version !== e.version) {
        var _t128 = e.image;
        if (null === _t128) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else {
          if (!1 !== _t128.complete) return void tt(s, e, r);
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        }
      }
      n.bindTexture(t.TEXTURE_2D, s.__webglTexture, t.TEXTURE0 + r);
    }
    var Z = (_Z2 = {}, _defineProperty(_Z2, b, t.REPEAT), _defineProperty(_Z2, T, t.CLAMP_TO_EDGE), _defineProperty(_Z2, E, t.MIRRORED_REPEAT), _Z2),
      J = (_J2 = {}, _defineProperty(_J2, w, t.NEAREST), _defineProperty(_J2, A, t.NEAREST_MIPMAP_NEAREST), _defineProperty(_J2, R, t.NEAREST_MIPMAP_LINEAR), _defineProperty(_J2, C, t.LINEAR), _defineProperty(_J2, L, t.LINEAR_MIPMAP_NEAREST), _defineProperty(_J2, P, t.LINEAR_MIPMAP_LINEAR), _J2),
      K = {
        512: t.NEVER,
        519: t.ALWAYS,
        513: t.LESS,
        515: t.LEQUAL,
        514: t.EQUAL,
        518: t.GEQUAL,
        516: t.GREATER,
        517: t.NOTEQUAL
      };
    function $(n, s, a) {
      if (a ? (t.texParameteri(n, t.TEXTURE_WRAP_S, Z[s.wrapS]), t.texParameteri(n, t.TEXTURE_WRAP_T, Z[s.wrapT]), n !== t.TEXTURE_3D && n !== t.TEXTURE_2D_ARRAY || t.texParameteri(n, t.TEXTURE_WRAP_R, Z[s.wrapR]), t.texParameteri(n, t.TEXTURE_MAG_FILTER, J[s.magFilter]), t.texParameteri(n, t.TEXTURE_MIN_FILTER, J[s.minFilter])) : (t.texParameteri(n, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(n, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE), n !== t.TEXTURE_3D && n !== t.TEXTURE_2D_ARRAY || t.texParameteri(n, t.TEXTURE_WRAP_R, t.CLAMP_TO_EDGE), s.wrapS === T && s.wrapT === T || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), t.texParameteri(n, t.TEXTURE_MAG_FILTER, z(s.magFilter)), t.texParameteri(n, t.TEXTURE_MIN_FILTER, z(s.minFilter)), s.minFilter !== w && s.minFilter !== C && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), s.compareFunction && (t.texParameteri(n, t.TEXTURE_COMPARE_MODE, t.COMPARE_REF_TO_TEXTURE), t.texParameteri(n, t.TEXTURE_COMPARE_FUNC, K[s.compareFunction])), !0 === e.has("EXT_texture_filter_anisotropic")) {
        var _a27 = e.get("EXT_texture_filter_anisotropic");
        if (s.magFilter === w) return;
        if (s.minFilter !== R && s.minFilter !== P) return;
        if (s.type === O && !1 === e.has("OES_texture_float_linear")) return;
        if (!1 === o && s.type === F && !1 === e.has("OES_texture_half_float_linear")) return;
        (s.anisotropy > 1 || i.get(s).__currentAnisotropy) && (t.texParameterf(n, _a27.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(s.anisotropy, r.getMaxAnisotropy())), i.get(s).__currentAnisotropy = s.anisotropy);
      }
    }
    function Q(e, n) {
      var i = !1;
      void 0 === e.__webglInit && (e.__webglInit = !0, n.addEventListener("dispose", W));
      var r = n.source;
      var s = g.get(r);
      void 0 === s && (s = {}, g.set(r, s));
      var o = function (t) {
        var e = [];
        return e.push(t.wrapS), e.push(t.wrapT), e.push(t.wrapR || 0), e.push(t.magFilter), e.push(t.minFilter), e.push(t.anisotropy), e.push(t.internalFormat), e.push(t.format), e.push(t.type), e.push(t.generateMipmaps), e.push(t.premultiplyAlpha), e.push(t.flipY), e.push(t.unpackAlignment), e.push(t.colorSpace), e.join();
      }(n);
      if (o !== e.__cacheKey) {
        void 0 === s[o] && (s[o] = {
          texture: t.createTexture(),
          usedTimes: 0
        }, a.memory.textures++, i = !0), s[o].usedTimes++;
        var _r58 = s[e.__cacheKey];
        void 0 !== _r58 && (s[e.__cacheKey].usedTimes--, 0 === _r58.usedTimes && j(n)), e.__cacheKey = o, e.__webglTexture = s[o].texture;
      }
      return i;
    }
    function tt(e, r, a) {
      var l = t.TEXTURE_2D;
      (r.isDataArrayTexture || r.isCompressedArrayTexture) && (l = t.TEXTURE_2D_ARRAY), r.isData3DTexture && (l = t.TEXTURE_3D);
      var c = Q(e, r),
        u = r.source;
      n.bindTexture(l, e.__webglTexture, t.TEXTURE0 + a);
      var d = i.get(u);
      if (u.version !== d.__version || !0 === c) {
        n.activeTexture(t.TEXTURE0 + a);
        var _e92 = be.getPrimaries(be.workingColorSpace),
          _i84 = r.colorSpace === Ut ? null : be.getPrimaries(r.colorSpace),
          _p7 = r.colorSpace === Ut || _e92 === _i84 ? t.NONE : t.BROWSER_DEFAULT_WEBGL;
        t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, r.flipY), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r.premultiplyAlpha), t.pixelStorei(t.UNPACK_ALIGNMENT, r.unpackAlignment), t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL, _p7);
        var _m4 = function (t) {
          return !o && (t.wrapS !== T || t.wrapT !== T || t.minFilter !== w && t.minFilter !== C);
        }(r) && !1 === x(r.image);
        var _f4 = y(r.image, _m4, !1, h);
        _f4 = at(r, _f4);
        var _g4 = x(_f4) || o,
          _6 = s.convert(r.format, r.colorSpace);
        var _v4,
          _b3 = s.convert(r.type),
          _E2 = D(r.internalFormat, _6, _b3, r.colorSpace, r.isVideoTexture);
        $(l, r, _g4);
        var _A2 = r.mipmaps,
          _R2 = o && !0 !== r.isVideoTexture,
          _L2 = void 0 === d.__version || !0 === c,
          _P2 = B(r, _f4, _g4);
        if (r.isDepthTexture) _E2 = t.DEPTH_COMPONENT, o ? _E2 = r.type === O ? t.DEPTH_COMPONENT32F : r.type === N ? t.DEPTH_COMPONENT24 : r.type === H ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT16 : r.type === O && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), r.format === V && _E2 === t.DEPTH_COMPONENT && r.type !== U && r.type !== N && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), r.type = N, _b3 = s.convert(r.type)), r.format === k && _E2 === t.DEPTH_COMPONENT && (_E2 = t.DEPTH_STENCIL, r.type !== H && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), r.type = H, _b3 = s.convert(r.type))), _L2 && (_R2 ? n.texStorage2D(t.TEXTURE_2D, 1, _E2, _f4.width, _f4.height) : n.texImage2D(t.TEXTURE_2D, 0, _E2, _f4.width, _f4.height, 0, _6, _b3, null));else if (r.isDataTexture) {
          if (_A2.length > 0 && _g4) {
            _R2 && _L2 && n.texStorage2D(t.TEXTURE_2D, _P2, _E2, _A2[0].width, _A2[0].height);
            for (var _e93 = 0, _i85 = _A2.length; _e93 < _i85; _e93++) _v4 = _A2[_e93], _R2 ? n.texSubImage2D(t.TEXTURE_2D, _e93, 0, 0, _v4.width, _v4.height, _6, _b3, _v4.data) : n.texImage2D(t.TEXTURE_2D, _e93, _E2, _v4.width, _v4.height, 0, _6, _b3, _v4.data);
            r.generateMipmaps = !1;
          } else _R2 ? (_L2 && n.texStorage2D(t.TEXTURE_2D, _P2, _E2, _f4.width, _f4.height), n.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, _f4.width, _f4.height, _6, _b3, _f4.data)) : n.texImage2D(t.TEXTURE_2D, 0, _E2, _f4.width, _f4.height, 0, _6, _b3, _f4.data);
        } else if (r.isCompressedTexture) {
          if (r.isCompressedArrayTexture) {
            _R2 && _L2 && n.texStorage3D(t.TEXTURE_2D_ARRAY, _P2, _E2, _A2[0].width, _A2[0].height, _f4.depth);
            for (var _e94 = 0, _i86 = _A2.length; _e94 < _i86; _e94++) _v4 = _A2[_e94], r.format !== G ? null !== _6 ? _R2 ? n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY, _e94, 0, 0, 0, _v4.width, _v4.height, _f4.depth, _6, _v4.data, 0, 0) : n.compressedTexImage3D(t.TEXTURE_2D_ARRAY, _e94, _E2, _v4.width, _v4.height, _f4.depth, 0, _v4.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : _R2 ? n.texSubImage3D(t.TEXTURE_2D_ARRAY, _e94, 0, 0, 0, _v4.width, _v4.height, _f4.depth, _6, _b3, _v4.data) : n.texImage3D(t.TEXTURE_2D_ARRAY, _e94, _E2, _v4.width, _v4.height, _f4.depth, 0, _6, _b3, _v4.data);
          } else {
            _R2 && _L2 && n.texStorage2D(t.TEXTURE_2D, _P2, _E2, _A2[0].width, _A2[0].height);
            for (var _e95 = 0, _i87 = _A2.length; _e95 < _i87; _e95++) _v4 = _A2[_e95], r.format !== G ? null !== _6 ? _R2 ? n.compressedTexSubImage2D(t.TEXTURE_2D, _e95, 0, 0, _v4.width, _v4.height, _6, _v4.data) : n.compressedTexImage2D(t.TEXTURE_2D, _e95, _E2, _v4.width, _v4.height, 0, _v4.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : _R2 ? n.texSubImage2D(t.TEXTURE_2D, _e95, 0, 0, _v4.width, _v4.height, _6, _b3, _v4.data) : n.texImage2D(t.TEXTURE_2D, _e95, _E2, _v4.width, _v4.height, 0, _6, _b3, _v4.data);
          }
        } else if (r.isDataArrayTexture) _R2 ? (_L2 && n.texStorage3D(t.TEXTURE_2D_ARRAY, _P2, _E2, _f4.width, _f4.height, _f4.depth), n.texSubImage3D(t.TEXTURE_2D_ARRAY, 0, 0, 0, 0, _f4.width, _f4.height, _f4.depth, _6, _b3, _f4.data)) : n.texImage3D(t.TEXTURE_2D_ARRAY, 0, _E2, _f4.width, _f4.height, _f4.depth, 0, _6, _b3, _f4.data);else if (r.isData3DTexture) _R2 ? (_L2 && n.texStorage3D(t.TEXTURE_3D, _P2, _E2, _f4.width, _f4.height, _f4.depth), n.texSubImage3D(t.TEXTURE_3D, 0, 0, 0, 0, _f4.width, _f4.height, _f4.depth, _6, _b3, _f4.data)) : n.texImage3D(t.TEXTURE_3D, 0, _E2, _f4.width, _f4.height, _f4.depth, 0, _6, _b3, _f4.data);else if (r.isFramebufferTexture) {
          if (_L2) if (_R2) n.texStorage2D(t.TEXTURE_2D, _P2, _E2, _f4.width, _f4.height);else {
            var _e96 = _f4.width,
              _i88 = _f4.height;
            for (var _r59 = 0; _r59 < _P2; _r59++) n.texImage2D(t.TEXTURE_2D, _r59, _E2, _e96, _i88, 0, _6, _b3, null), _e96 >>= 1, _i88 >>= 1;
          }
        } else if (_A2.length > 0 && _g4) {
          _R2 && _L2 && n.texStorage2D(t.TEXTURE_2D, _P2, _E2, _A2[0].width, _A2[0].height);
          for (var _e97 = 0, _i89 = _A2.length; _e97 < _i89; _e97++) _v4 = _A2[_e97], _R2 ? n.texSubImage2D(t.TEXTURE_2D, _e97, 0, 0, _6, _b3, _v4) : n.texImage2D(t.TEXTURE_2D, _e97, _E2, _6, _b3, _v4);
          r.generateMipmaps = !1;
        } else _R2 ? (_L2 && n.texStorage2D(t.TEXTURE_2D, _P2, _E2, _f4.width, _f4.height), n.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, _6, _b3, _f4)) : n.texImage2D(t.TEXTURE_2D, 0, _E2, _6, _b3, _f4);
        M(r, _g4) && S(l), d.__version = u.version, r.onUpdate && r.onUpdate(r);
      }
      e.__version = r.version;
    }
    function et(e, r, a, o, l, c) {
      var h = s.convert(a.format, a.colorSpace),
        u = s.convert(a.type),
        p = D(a.internalFormat, h, u, a.colorSpace);
      if (!i.get(r).__hasExternalTextures) {
        var _e98 = Math.max(1, r.width >> c),
          _i90 = Math.max(1, r.height >> c);
        l === t.TEXTURE_3D || l === t.TEXTURE_2D_ARRAY ? n.texImage3D(l, c, p, _e98, _i90, r.depth, 0, h, u, null) : n.texImage2D(l, c, p, _e98, _i90, 0, h, u, null);
      }
      n.bindFramebuffer(t.FRAMEBUFFER, e), st(r) ? d.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER, o, l, i.get(a).__webglTexture, 0, rt(r)) : (l === t.TEXTURE_2D || l >= t.TEXTURE_CUBE_MAP_POSITIVE_X && l <= t.TEXTURE_CUBE_MAP_NEGATIVE_Z) && t.framebufferTexture2D(t.FRAMEBUFFER, o, l, i.get(a).__webglTexture, c), n.bindFramebuffer(t.FRAMEBUFFER, null);
    }
    function nt(e, n, i) {
      if (t.bindRenderbuffer(t.RENDERBUFFER, e), n.depthBuffer && !n.stencilBuffer) {
        var _r60 = !0 === o ? t.DEPTH_COMPONENT24 : t.DEPTH_COMPONENT16;
        if (i || st(n)) {
          var _e99 = n.depthTexture;
          _e99 && _e99.isDepthTexture && (_e99.type === O ? _r60 = t.DEPTH_COMPONENT32F : _e99.type === N && (_r60 = t.DEPTH_COMPONENT24));
          var _i91 = rt(n);
          st(n) ? d.renderbufferStorageMultisampleEXT(t.RENDERBUFFER, _i91, _r60, n.width, n.height) : t.renderbufferStorageMultisample(t.RENDERBUFFER, _i91, _r60, n.width, n.height);
        } else t.renderbufferStorage(t.RENDERBUFFER, _r60, n.width, n.height);
        t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.RENDERBUFFER, e);
      } else if (n.depthBuffer && n.stencilBuffer) {
        var _r61 = rt(n);
        i && !1 === st(n) ? t.renderbufferStorageMultisample(t.RENDERBUFFER, _r61, t.DEPTH24_STENCIL8, n.width, n.height) : st(n) ? d.renderbufferStorageMultisampleEXT(t.RENDERBUFFER, _r61, t.DEPTH24_STENCIL8, n.width, n.height) : t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_STENCIL, n.width, n.height), t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.RENDERBUFFER, e);
      } else {
        var _e100 = !0 === n.isWebGLMultipleRenderTargets ? n.texture : [n.texture];
        for (var _r62 = 0; _r62 < _e100.length; _r62++) {
          var _a28 = _e100[_r62],
            _o17 = s.convert(_a28.format, _a28.colorSpace),
            _l9 = s.convert(_a28.type),
            _c11 = D(_a28.internalFormat, _o17, _l9, _a28.colorSpace),
            _h7 = rt(n);
          i && !1 === st(n) ? t.renderbufferStorageMultisample(t.RENDERBUFFER, _h7, _c11, n.width, n.height) : st(n) ? d.renderbufferStorageMultisampleEXT(t.RENDERBUFFER, _h7, _c11, n.width, n.height) : t.renderbufferStorage(t.RENDERBUFFER, _c11, n.width, n.height);
        }
      }
      t.bindRenderbuffer(t.RENDERBUFFER, null);
    }
    function it(e) {
      var r = i.get(e),
        s = !0 === e.isWebGLCubeRenderTarget;
      if (e.depthTexture && !r.__autoAllocateDepthBuffer) {
        if (s) throw new Error("target.depthTexture not supported in Cube render targets");
        !function (e, r) {
          if (r && r.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
          if (n.bindFramebuffer(t.FRAMEBUFFER, e), !r.depthTexture || !r.depthTexture.isDepthTexture) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
          i.get(r.depthTexture).__webglTexture && r.depthTexture.image.width === r.width && r.depthTexture.image.height === r.height || (r.depthTexture.image.width = r.width, r.depthTexture.image.height = r.height, r.depthTexture.needsUpdate = !0), Y(r.depthTexture, 0);
          var s = i.get(r.depthTexture).__webglTexture,
            a = rt(r);
          if (r.depthTexture.format === V) st(r) ? d.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.TEXTURE_2D, s, 0, a) : t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.TEXTURE_2D, s, 0);else {
            if (r.depthTexture.format !== k) throw new Error("Unknown depthTexture format");
            st(r) ? d.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.TEXTURE_2D, s, 0, a) : t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.TEXTURE_2D, s, 0);
          }
        }(r.__webglFramebuffer, e);
      } else if (s) {
        r.__webglDepthbuffer = [];
        for (var _i92 = 0; _i92 < 6; _i92++) n.bindFramebuffer(t.FRAMEBUFFER, r.__webglFramebuffer[_i92]), r.__webglDepthbuffer[_i92] = t.createRenderbuffer(), nt(r.__webglDepthbuffer[_i92], e, !1);
      } else n.bindFramebuffer(t.FRAMEBUFFER, r.__webglFramebuffer), r.__webglDepthbuffer = t.createRenderbuffer(), nt(r.__webglDepthbuffer, e, !1);
      n.bindFramebuffer(t.FRAMEBUFFER, null);
    }
    function rt(t) {
      return Math.min(u, t.samples);
    }
    function st(t) {
      var n = i.get(t);
      return o && t.samples > 0 && !0 === e.has("WEBGL_multisampled_render_to_texture") && !1 !== n.__useRenderToTexture;
    }
    function at(t, n) {
      var i = t.colorSpace,
        r = t.format,
        s = t.type;
      return !0 === t.isCompressedTexture || !0 === t.isVideoTexture || t.format === Xt || i !== Nt && i !== Ut && (be.getTransfer(i) === zt ? !1 === o ? !0 === e.has("EXT_sRGB") && r === G ? (t.format = Xt, t.minFilter = C, t.generateMipmaps = !1) : n = Ae.sRGBToLinear(n) : r === G && s === I || console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", i)), n;
    }
    this.allocateTextureUnit = function () {
      var t = q;
      return t >= l && console.warn("THREE.WebGLTextures: Trying to use " + t + " texture units while this GPU supports only " + l), q += 1, t;
    }, this.resetTextureUnits = function () {
      q = 0;
    }, this.setTexture2D = Y, this.setTexture2DArray = function (e, r) {
      var s = i.get(e);
      e.version > 0 && s.__version !== e.version ? tt(s, e, r) : n.bindTexture(t.TEXTURE_2D_ARRAY, s.__webglTexture, t.TEXTURE0 + r);
    }, this.setTexture3D = function (e, r) {
      var s = i.get(e);
      e.version > 0 && s.__version !== e.version ? tt(s, e, r) : n.bindTexture(t.TEXTURE_3D, s.__webglTexture, t.TEXTURE0 + r);
    }, this.setTextureCube = function (e, r) {
      var a = i.get(e);
      e.version > 0 && a.__version !== e.version ? function (e, r, a) {
        if (6 !== r.image.length) return;
        var l = Q(e, r),
          h = r.source;
        n.bindTexture(t.TEXTURE_CUBE_MAP, e.__webglTexture, t.TEXTURE0 + a);
        var u = i.get(h);
        if (h.version !== u.__version || !0 === l) {
          n.activeTexture(t.TEXTURE0 + a);
          var _e101 = be.getPrimaries(be.workingColorSpace),
            _i93 = r.colorSpace === Ut ? null : be.getPrimaries(r.colorSpace),
            _d8 = r.colorSpace === Ut || _e101 === _i93 ? t.NONE : t.BROWSER_DEFAULT_WEBGL;
          t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, r.flipY), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r.premultiplyAlpha), t.pixelStorei(t.UNPACK_ALIGNMENT, r.unpackAlignment), t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL, _d8);
          var _p8 = r.isCompressedTexture || r.image[0].isCompressedTexture,
            _m5 = r.image[0] && r.image[0].isDataTexture,
            _f5 = [];
          for (var _t129 = 0; _t129 < 6; _t129++) _f5[_t129] = _p8 || _m5 ? _m5 ? r.image[_t129].image : r.image[_t129] : y(r.image[_t129], !1, !0, c), _f5[_t129] = at(r, _f5[_t129]);
          var _g5 = _f5[0],
            _7 = x(_g5) || o,
            _v5 = s.convert(r.format, r.colorSpace),
            _b4 = s.convert(r.type),
            _T3 = D(r.internalFormat, _v5, _b4, r.colorSpace),
            _E3 = o && !0 !== r.isVideoTexture,
            _w2 = void 0 === u.__version || !0 === l;
          var _A3,
            _R3 = B(r, _g5, _7);
          if ($(t.TEXTURE_CUBE_MAP, r, _7), _p8) {
            _E3 && _w2 && n.texStorage2D(t.TEXTURE_CUBE_MAP, _R3, _T3, _g5.width, _g5.height);
            for (var _e102 = 0; _e102 < 6; _e102++) {
              _A3 = _f5[_e102].mipmaps;
              for (var _i94 = 0; _i94 < _A3.length; _i94++) {
                var _s34 = _A3[_i94];
                r.format !== G ? null !== _v5 ? _E3 ? n.compressedTexSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e102, _i94, 0, 0, _s34.width, _s34.height, _v5, _s34.data) : n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e102, _i94, _T3, _s34.width, _s34.height, 0, _s34.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : _E3 ? n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e102, _i94, 0, 0, _s34.width, _s34.height, _v5, _b4, _s34.data) : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e102, _i94, _T3, _s34.width, _s34.height, 0, _v5, _b4, _s34.data);
              }
            }
          } else {
            _A3 = r.mipmaps, _E3 && _w2 && (_A3.length > 0 && _R3++, n.texStorage2D(t.TEXTURE_CUBE_MAP, _R3, _T3, _f5[0].width, _f5[0].height));
            for (var _e103 = 0; _e103 < 6; _e103++) if (_m5) {
              _E3 ? n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, 0, 0, 0, _f5[_e103].width, _f5[_e103].height, _v5, _b4, _f5[_e103].data) : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, 0, _T3, _f5[_e103].width, _f5[_e103].height, 0, _v5, _b4, _f5[_e103].data);
              for (var _i95 = 0; _i95 < _A3.length; _i95++) {
                var _r63 = _A3[_i95].image[_e103].image;
                _E3 ? n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, _i95 + 1, 0, 0, _r63.width, _r63.height, _v5, _b4, _r63.data) : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, _i95 + 1, _T3, _r63.width, _r63.height, 0, _v5, _b4, _r63.data);
              }
            } else {
              _E3 ? n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, 0, 0, 0, _v5, _b4, _f5[_e103]) : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, 0, _T3, _v5, _b4, _f5[_e103]);
              for (var _i96 = 0; _i96 < _A3.length; _i96++) {
                var _r64 = _A3[_i96];
                _E3 ? n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, _i96 + 1, 0, 0, _v5, _b4, _r64.image[_e103]) : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + _e103, _i96 + 1, _T3, _v5, _b4, _r64.image[_e103]);
              }
            }
          }
          M(r, _7) && S(t.TEXTURE_CUBE_MAP), u.__version = h.version, r.onUpdate && r.onUpdate(r);
        }
        e.__version = r.version;
      }(a, e, r) : n.bindTexture(t.TEXTURE_CUBE_MAP, a.__webglTexture, t.TEXTURE0 + r);
    }, this.rebindTextures = function (e, n, r) {
      var s = i.get(e);
      void 0 !== n && et(s.__webglFramebuffer, e, e.texture, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, 0), void 0 !== r && it(e);
    }, this.setupRenderTarget = function (e) {
      var l = e.texture,
        c = i.get(e),
        h = i.get(l);
      e.addEventListener("dispose", X), !0 !== e.isWebGLMultipleRenderTargets && (void 0 === h.__webglTexture && (h.__webglTexture = t.createTexture()), h.__version = l.version, a.memory.textures++);
      var u = !0 === e.isWebGLCubeRenderTarget,
        d = !0 === e.isWebGLMultipleRenderTargets,
        p = x(e) || o;
      if (u) {
        c.__webglFramebuffer = [];
        for (var _e104 = 0; _e104 < 6; _e104++) if (o && l.mipmaps && l.mipmaps.length > 0) {
          c.__webglFramebuffer[_e104] = [];
          for (var _n97 = 0; _n97 < l.mipmaps.length; _n97++) c.__webglFramebuffer[_e104][_n97] = t.createFramebuffer();
        } else c.__webglFramebuffer[_e104] = t.createFramebuffer();
      } else {
        if (o && l.mipmaps && l.mipmaps.length > 0) {
          c.__webglFramebuffer = [];
          for (var _e105 = 0; _e105 < l.mipmaps.length; _e105++) c.__webglFramebuffer[_e105] = t.createFramebuffer();
        } else c.__webglFramebuffer = t.createFramebuffer();
        if (d) if (r.drawBuffers) {
          var _n98 = e.texture;
          for (var _e106 = 0, _r65 = _n98.length; _e106 < _r65; _e106++) {
            var _r66 = i.get(_n98[_e106]);
            void 0 === _r66.__webglTexture && (_r66.__webglTexture = t.createTexture(), a.memory.textures++);
          }
        } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
        if (o && e.samples > 0 && !1 === st(e)) {
          var _i97 = d ? l : [l];
          c.__webglMultisampledFramebuffer = t.createFramebuffer(), c.__webglColorRenderbuffer = [], n.bindFramebuffer(t.FRAMEBUFFER, c.__webglMultisampledFramebuffer);
          for (var _n99 = 0; _n99 < _i97.length; _n99++) {
            var _r67 = _i97[_n99];
            c.__webglColorRenderbuffer[_n99] = t.createRenderbuffer(), t.bindRenderbuffer(t.RENDERBUFFER, c.__webglColorRenderbuffer[_n99]);
            var _a29 = s.convert(_r67.format, _r67.colorSpace),
              _o18 = s.convert(_r67.type),
              _l10 = D(_r67.internalFormat, _a29, _o18, _r67.colorSpace, !0 === e.isXRRenderTarget),
              _h8 = rt(e);
            t.renderbufferStorageMultisample(t.RENDERBUFFER, _h8, _l10, e.width, e.height), t.framebufferRenderbuffer(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0 + _n99, t.RENDERBUFFER, c.__webglColorRenderbuffer[_n99]);
          }
          t.bindRenderbuffer(t.RENDERBUFFER, null), e.depthBuffer && (c.__webglDepthRenderbuffer = t.createRenderbuffer(), nt(c.__webglDepthRenderbuffer, e, !0)), n.bindFramebuffer(t.FRAMEBUFFER, null);
        }
      }
      if (u) {
        n.bindTexture(t.TEXTURE_CUBE_MAP, h.__webglTexture), $(t.TEXTURE_CUBE_MAP, l, p);
        for (var _n100 = 0; _n100 < 6; _n100++) if (o && l.mipmaps && l.mipmaps.length > 0) for (var _i98 = 0; _i98 < l.mipmaps.length; _i98++) et(c.__webglFramebuffer[_n100][_i98], e, l, t.COLOR_ATTACHMENT0, t.TEXTURE_CUBE_MAP_POSITIVE_X + _n100, _i98);else et(c.__webglFramebuffer[_n100], e, l, t.COLOR_ATTACHMENT0, t.TEXTURE_CUBE_MAP_POSITIVE_X + _n100, 0);
        M(l, p) && S(t.TEXTURE_CUBE_MAP), n.unbindTexture();
      } else if (d) {
        var _r68 = e.texture;
        for (var _s35 = 0, _a30 = _r68.length; _s35 < _a30; _s35++) {
          var _a31 = _r68[_s35],
            _o19 = i.get(_a31);
          n.bindTexture(t.TEXTURE_2D, _o19.__webglTexture), $(t.TEXTURE_2D, _a31, p), et(c.__webglFramebuffer, e, _a31, t.COLOR_ATTACHMENT0 + _s35, t.TEXTURE_2D, 0), M(_a31, p) && S(t.TEXTURE_2D);
        }
        n.unbindTexture();
      } else {
        var _i99 = t.TEXTURE_2D;
        if ((e.isWebGL3DRenderTarget || e.isWebGLArrayRenderTarget) && (o ? _i99 = e.isWebGL3DRenderTarget ? t.TEXTURE_3D : t.TEXTURE_2D_ARRAY : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), n.bindTexture(_i99, h.__webglTexture), $(_i99, l, p), o && l.mipmaps && l.mipmaps.length > 0) for (var _n101 = 0; _n101 < l.mipmaps.length; _n101++) et(c.__webglFramebuffer[_n101], e, l, t.COLOR_ATTACHMENT0, _i99, _n101);else et(c.__webglFramebuffer, e, l, t.COLOR_ATTACHMENT0, _i99, 0);
        M(l, p) && S(_i99), n.unbindTexture();
      }
      e.depthBuffer && it(e);
    }, this.updateRenderTargetMipmap = function (e) {
      var r = x(e) || o,
        s = !0 === e.isWebGLMultipleRenderTargets ? e.texture : [e.texture];
      for (var _a32 = 0, _o20 = s.length; _a32 < _o20; _a32++) {
        var _o21 = s[_a32];
        if (M(_o21, r)) {
          var _r69 = e.isWebGLCubeRenderTarget ? t.TEXTURE_CUBE_MAP : t.TEXTURE_2D,
            _s36 = i.get(_o21).__webglTexture;
          n.bindTexture(_r69, _s36), S(_r69), n.unbindTexture();
        }
      }
    }, this.updateMultisampleRenderTarget = function (e) {
      if (o && e.samples > 0 && !1 === st(e)) {
        var _r70 = e.isWebGLMultipleRenderTargets ? e.texture : [e.texture],
          _s37 = e.width,
          _a33 = e.height;
        var _o22 = t.COLOR_BUFFER_BIT;
        var _l11 = [],
          _c12 = e.stencilBuffer ? t.DEPTH_STENCIL_ATTACHMENT : t.DEPTH_ATTACHMENT,
          _h9 = i.get(e),
          _u7 = !0 === e.isWebGLMultipleRenderTargets;
        if (_u7) for (var _e107 = 0; _e107 < _r70.length; _e107++) n.bindFramebuffer(t.FRAMEBUFFER, _h9.__webglMultisampledFramebuffer), t.framebufferRenderbuffer(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0 + _e107, t.RENDERBUFFER, null), n.bindFramebuffer(t.FRAMEBUFFER, _h9.__webglFramebuffer), t.framebufferTexture2D(t.DRAW_FRAMEBUFFER, t.COLOR_ATTACHMENT0 + _e107, t.TEXTURE_2D, null, 0);
        n.bindFramebuffer(t.READ_FRAMEBUFFER, _h9.__webglMultisampledFramebuffer), n.bindFramebuffer(t.DRAW_FRAMEBUFFER, _h9.__webglFramebuffer);
        for (var _n102 = 0; _n102 < _r70.length; _n102++) {
          _l11.push(t.COLOR_ATTACHMENT0 + _n102), e.depthBuffer && _l11.push(_c12);
          var _d9 = void 0 !== _h9.__ignoreDepthValues && _h9.__ignoreDepthValues;
          if (!1 === _d9 && (e.depthBuffer && (_o22 |= t.DEPTH_BUFFER_BIT), e.stencilBuffer && (_o22 |= t.STENCIL_BUFFER_BIT)), _u7 && t.framebufferRenderbuffer(t.READ_FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.RENDERBUFFER, _h9.__webglColorRenderbuffer[_n102]), !0 === _d9 && (t.invalidateFramebuffer(t.READ_FRAMEBUFFER, [_c12]), t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER, [_c12])), _u7) {
            var _e108 = i.get(_r70[_n102]).__webglTexture;
            t.framebufferTexture2D(t.DRAW_FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, _e108, 0);
          }
          t.blitFramebuffer(0, 0, _s37, _a33, 0, 0, _s37, _a33, _o22, t.NEAREST), p && t.invalidateFramebuffer(t.READ_FRAMEBUFFER, _l11);
        }
        if (n.bindFramebuffer(t.READ_FRAMEBUFFER, null), n.bindFramebuffer(t.DRAW_FRAMEBUFFER, null), _u7) for (var _e109 = 0; _e109 < _r70.length; _e109++) {
          n.bindFramebuffer(t.FRAMEBUFFER, _h9.__webglMultisampledFramebuffer), t.framebufferRenderbuffer(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0 + _e109, t.RENDERBUFFER, _h9.__webglColorRenderbuffer[_e109]);
          var _s38 = i.get(_r70[_e109]).__webglTexture;
          n.bindFramebuffer(t.FRAMEBUFFER, _h9.__webglFramebuffer), t.framebufferTexture2D(t.DRAW_FRAMEBUFFER, t.COLOR_ATTACHMENT0 + _e109, t.TEXTURE_2D, _s38, 0);
        }
        n.bindFramebuffer(t.DRAW_FRAMEBUFFER, _h9.__webglMultisampledFramebuffer);
      }
    }, this.setupDepthRenderbuffer = it, this.setupFrameBufferTexture = et, this.useMultisampledRTT = st;
  }
  function Oa(t, e, n) {
    var i = n.isWebGL2;
    return {
      convert: function convert(n) {
        var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var s;
        var a = be.getTransfer(r);
        if (n === I) return t.UNSIGNED_BYTE;
        if (n === B) return t.UNSIGNED_SHORT_4_4_4_4;
        if (n === z) return t.UNSIGNED_SHORT_5_5_5_1;
        if (1010 === n) return t.BYTE;
        if (1011 === n) return t.SHORT;
        if (n === U) return t.UNSIGNED_SHORT;
        if (n === D) return t.INT;
        if (n === N) return t.UNSIGNED_INT;
        if (n === O) return t.FLOAT;
        if (n === F) return i ? t.HALF_FLOAT : (s = e.get("OES_texture_half_float"), null !== s ? s.HALF_FLOAT_OES : null);
        if (1021 === n) return t.ALPHA;
        if (n === G) return t.RGBA;
        if (1024 === n) return t.LUMINANCE;
        if (1025 === n) return t.LUMINANCE_ALPHA;
        if (n === V) return t.DEPTH_COMPONENT;
        if (n === k) return t.DEPTH_STENCIL;
        if (n === Xt) return s = e.get("EXT_sRGB"), null !== s ? s.SRGB_ALPHA_EXT : null;
        if (1028 === n) return t.RED;
        if (n === W) return t.RED_INTEGER;
        if (1030 === n) return t.RG;
        if (n === X) return t.RG_INTEGER;
        if (n === j) return t.RGBA_INTEGER;
        if (n === q || n === Y || n === Z || n === J) if (a === zt) {
          if (s = e.get("WEBGL_compressed_texture_s3tc_srgb"), null === s) return null;
          if (n === q) return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (n === Y) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (n === Z) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (n === J) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          if (s = e.get("WEBGL_compressed_texture_s3tc"), null === s) return null;
          if (n === q) return s.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (n === Y) return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (n === Z) return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (n === J) return s.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        }
        if (n === K || n === $ || n === Q || n === tt) {
          if (s = e.get("WEBGL_compressed_texture_pvrtc"), null === s) return null;
          if (n === K) return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (n === $) return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (n === Q) return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (n === tt) return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        }
        if (36196 === n) return s = e.get("WEBGL_compressed_texture_etc1"), null !== s ? s.COMPRESSED_RGB_ETC1_WEBGL : null;
        if (n === et || n === nt) {
          if (s = e.get("WEBGL_compressed_texture_etc"), null === s) return null;
          if (n === et) return a === zt ? s.COMPRESSED_SRGB8_ETC2 : s.COMPRESSED_RGB8_ETC2;
          if (n === nt) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : s.COMPRESSED_RGBA8_ETC2_EAC;
        }
        if (n === it || n === rt || n === st || n === at || n === ot || n === lt || n === ct || n === ht || n === ut || n === dt || n === pt || n === mt || n === ft || n === gt) {
          if (s = e.get("WEBGL_compressed_texture_astc"), null === s) return null;
          if (n === it) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : s.COMPRESSED_RGBA_ASTC_4x4_KHR;
          if (n === rt) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : s.COMPRESSED_RGBA_ASTC_5x4_KHR;
          if (n === st) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : s.COMPRESSED_RGBA_ASTC_5x5_KHR;
          if (n === at) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : s.COMPRESSED_RGBA_ASTC_6x5_KHR;
          if (n === ot) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : s.COMPRESSED_RGBA_ASTC_6x6_KHR;
          if (n === lt) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : s.COMPRESSED_RGBA_ASTC_8x5_KHR;
          if (n === ct) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : s.COMPRESSED_RGBA_ASTC_8x6_KHR;
          if (n === ht) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : s.COMPRESSED_RGBA_ASTC_8x8_KHR;
          if (n === ut) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : s.COMPRESSED_RGBA_ASTC_10x5_KHR;
          if (n === dt) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : s.COMPRESSED_RGBA_ASTC_10x6_KHR;
          if (n === pt) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : s.COMPRESSED_RGBA_ASTC_10x8_KHR;
          if (n === mt) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : s.COMPRESSED_RGBA_ASTC_10x10_KHR;
          if (n === ft) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : s.COMPRESSED_RGBA_ASTC_12x10_KHR;
          if (n === gt) return a === zt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : s.COMPRESSED_RGBA_ASTC_12x12_KHR;
        }
        if (n === _t || n === vt || n === yt) {
          if (s = e.get("EXT_texture_compression_bptc"), null === s) return null;
          if (n === _t) return a === zt ? s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : s.COMPRESSED_RGBA_BPTC_UNORM_EXT;
          if (n === vt) return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
          if (n === yt) return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
        }
        if (36283 === n || n === xt || n === Mt || n === St) {
          if (s = e.get("EXT_texture_compression_rgtc"), null === s) return null;
          if (n === _t) return s.COMPRESSED_RED_RGTC1_EXT;
          if (n === xt) return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;
          if (n === Mt) return s.COMPRESSED_RED_GREEN_RGTC2_EXT;
          if (n === St) return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        }
        return n === H ? i ? t.UNSIGNED_INT_24_8 : (s = e.get("WEBGL_depth_texture"), null !== s ? s.UNSIGNED_INT_24_8_WEBGL : null) : void 0 !== t[n] ? t[n] : null;
      }
    };
  }
  var Fa = /*#__PURE__*/function (_tr) {
    _inherits(Fa, _tr);
    var _super25 = _createSuper(Fa);
    function Fa() {
      var _this22;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      _classCallCheck(this, Fa);
      _this22 = _super25.call(this), _this22.isArrayCamera = !0, _this22.cameras = t;
      return _this22;
    }
    return _createClass(Fa);
  }(tr);
  var Ba = /*#__PURE__*/function (_Gn4) {
    _inherits(Ba, _Gn4);
    var _super26 = _createSuper(Ba);
    function Ba() {
      var _this23;
      _classCallCheck(this, Ba);
      _this23 = _super26.call(this), _this23.isGroup = !0, _this23.type = "Group";
      return _this23;
    }
    return _createClass(Ba);
  }(Gn);
  var za = {
    type: "move"
  };
  var Ha = /*#__PURE__*/function () {
    function Ha() {
      _classCallCheck(this, Ha);
      this._targetRay = null, this._grip = null, this._hand = null;
    }
    _createClass(Ha, [{
      key: "getHandSpace",
      value: function getHandSpace() {
        return null === this._hand && (this._hand = new Ba(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = {
          pinching: !1
        }), this._hand;
      }
    }, {
      key: "getTargetRaySpace",
      value: function getTargetRaySpace() {
        return null === this._targetRay && (this._targetRay = new Ba(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new ze(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new ze()), this._targetRay;
      }
    }, {
      key: "getGripSpace",
      value: function getGripSpace() {
        return null === this._grip && (this._grip = new Ba(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new ze(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new ze()), this._grip;
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(t) {
        return null !== this._targetRay && this._targetRay.dispatchEvent(t), null !== this._grip && this._grip.dispatchEvent(t), null !== this._hand && this._hand.dispatchEvent(t), this;
      }
    }, {
      key: "connect",
      value: function connect(t) {
        if (t && t.hand) {
          var _e110 = this._hand;
          if (_e110) {
            var _iterator4 = _createForOfIteratorHelper(t.hand.values()),
              _step4;
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var _n103 = _step4.value;
                this._getHandJoint(_e110, _n103);
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }
        return this.dispatchEvent({
          type: "connected",
          data: t
        }), this;
      }
    }, {
      key: "disconnect",
      value: function disconnect(t) {
        return this.dispatchEvent({
          type: "disconnected",
          data: t
        }), null !== this._targetRay && (this._targetRay.visible = !1), null !== this._grip && (this._grip.visible = !1), null !== this._hand && (this._hand.visible = !1), this;
      }
    }, {
      key: "update",
      value: function update(t, e, n) {
        var i = null,
          r = null,
          s = null;
        var a = this._targetRay,
          o = this._grip,
          l = this._hand;
        if (t && "visible-blurred" !== e.session.visibilityState) {
          if (l && t.hand) {
            s = !0;
            var _iterator5 = _createForOfIteratorHelper(t.hand.values()),
              _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var _i101 = _step5.value;
                var _t130 = e.getJointPose(_i101, n),
                  _r72 = this._getHandJoint(l, _i101);
                null !== _t130 && (_r72.matrix.fromArray(_t130.transform.matrix), _r72.matrix.decompose(_r72.position, _r72.rotation, _r72.scale), _r72.matrixWorldNeedsUpdate = !0, _r72.jointRadius = _t130.radius), _r72.visible = null !== _t130;
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
            var _i100 = l.joints["index-finger-tip"],
              _r71 = l.joints["thumb-tip"],
              _a34 = _i100.position.distanceTo(_r71.position),
              _o23 = .02,
              _c13 = .005;
            l.inputState.pinching && _a34 > _o23 + _c13 ? (l.inputState.pinching = !1, this.dispatchEvent({
              type: "pinchend",
              handedness: t.handedness,
              target: this
            })) : !l.inputState.pinching && _a34 <= _o23 - _c13 && (l.inputState.pinching = !0, this.dispatchEvent({
              type: "pinchstart",
              handedness: t.handedness,
              target: this
            }));
          } else null !== o && t.gripSpace && (r = e.getPose(t.gripSpace, n), null !== r && (o.matrix.fromArray(r.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale), o.matrixWorldNeedsUpdate = !0, r.linearVelocity ? (o.hasLinearVelocity = !0, o.linearVelocity.copy(r.linearVelocity)) : o.hasLinearVelocity = !1, r.angularVelocity ? (o.hasAngularVelocity = !0, o.angularVelocity.copy(r.angularVelocity)) : o.hasAngularVelocity = !1));
          null !== a && (i = e.getPose(t.targetRaySpace, n), null === i && null !== r && (i = r), null !== i && (a.matrix.fromArray(i.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale), a.matrixWorldNeedsUpdate = !0, i.linearVelocity ? (a.hasLinearVelocity = !0, a.linearVelocity.copy(i.linearVelocity)) : a.hasLinearVelocity = !1, i.angularVelocity ? (a.hasAngularVelocity = !0, a.angularVelocity.copy(i.angularVelocity)) : a.hasAngularVelocity = !1, this.dispatchEvent(za)));
        }
        return null !== a && (a.visible = null !== i), null !== o && (o.visible = null !== r), null !== l && (l.visible = null !== s), this;
      }
    }, {
      key: "_getHandJoint",
      value: function _getHandJoint(t, e) {
        if (void 0 === t.joints[e.jointName]) {
          var _n104 = new Ba();
          _n104.matrixAutoUpdate = !1, _n104.visible = !1, t.joints[e.jointName] = _n104, t.add(_n104);
        }
        return t.joints[e.jointName];
      }
    }]);
    return Ha;
  }();
  var Ga = /*#__PURE__*/function (_Ie4) {
    _inherits(Ga, _Ie4);
    var _super27 = _createSuper(Ga);
    function Ga(t, e, n, i, r, s, a, o, l, c) {
      var _this24;
      _classCallCheck(this, Ga);
      if ((c = void 0 !== c ? c : V) !== V && c !== k) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
      void 0 === n && c === V && (n = N), void 0 === n && c === k && (n = H), _this24 = _super27.call(this, null, i, r, s, a, o, c, n, l), _this24.isDepthTexture = !0, _this24.image = {
        width: t,
        height: e
      }, _this24.magFilter = void 0 !== a ? a : w, _this24.minFilter = void 0 !== o ? o : w, _this24.flipY = !1, _this24.generateMipmaps = !1, _this24.compareFunction = null;
      return _this24;
    }
    _createClass(Ga, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ga.prototype), "copy", this).call(this, t), this.compareFunction = t.compareFunction, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(Ga.prototype), "toJSON", this).call(this, t);
        return null !== this.compareFunction && (e.compareFunction = this.compareFunction), e;
      }
    }]);
    return Ga;
  }(Ie);
  var Va = /*#__PURE__*/function (_Yt6) {
    _inherits(Va, _Yt6);
    var _super28 = _createSuper(Va);
    function Va(t, e) {
      var _this25;
      _classCallCheck(this, Va);
      _this25 = _super28.call(this);
      var n = _assertThisInitialized(_this25);
      var i = null,
        r = 1,
        s = null,
        a = "local-floor",
        o = 1,
        l = null,
        c = null,
        h = null,
        u = null,
        d = null,
        p = null;
      var m = e.getContextAttributes();
      var f = null,
        g = null;
      var _ = [],
        v = [],
        y = new tr();
      y.layers.enable(1), y.viewport = new Ue();
      var x = new tr();
      x.layers.enable(2), x.viewport = new Ue();
      var M = [y, x],
        S = new Fa();
      S.layers.enable(1), S.layers.enable(2);
      var b = null,
        T = null;
      function E(t) {
        var e = v.indexOf(t.inputSource);
        if (-1 === e) return;
        var n = _[e];
        void 0 !== n && (n.update(t.inputSource, t.frame, l || s), n.dispatchEvent({
          type: t.type,
          data: t.inputSource
        }));
      }
      function w() {
        i.removeEventListener("select", E), i.removeEventListener("selectstart", E), i.removeEventListener("selectend", E), i.removeEventListener("squeeze", E), i.removeEventListener("squeezestart", E), i.removeEventListener("squeezeend", E), i.removeEventListener("end", w), i.removeEventListener("inputsourceschange", A);
        for (var _t131 = 0; _t131 < _.length; _t131++) {
          var _e111 = v[_t131];
          null !== _e111 && (v[_t131] = null, _[_t131].disconnect(_e111));
        }
        b = null, T = null, t.setRenderTarget(f), d = null, u = null, h = null, i = null, g = null, U.stop(), n.isPresenting = !1, n.dispatchEvent({
          type: "sessionend"
        });
      }
      function A(t) {
        for (var _e112 = 0; _e112 < t.removed.length; _e112++) {
          var _n105 = t.removed[_e112],
            _i102 = v.indexOf(_n105);
          _i102 >= 0 && (v[_i102] = null, _[_i102].disconnect(_n105));
        }
        for (var _e113 = 0; _e113 < t.added.length; _e113++) {
          var _n106 = t.added[_e113];
          var _i103 = v.indexOf(_n106);
          if (-1 === _i103) {
            for (var _t132 = 0; _t132 < _.length; _t132++) {
              if (_t132 >= v.length) {
                v.push(_n106), _i103 = _t132;
                break;
              }
              if (null === v[_t132]) {
                v[_t132] = _n106, _i103 = _t132;
                break;
              }
            }
            if (-1 === _i103) break;
          }
          var _r73 = _[_i103];
          _r73 && _r73.connect(_n106);
        }
      }
      _this25.cameraAutoUpdate = !0, _this25.enabled = !1, _this25.isPresenting = !1, _this25.getController = function (t) {
        var e = _[t];
        return void 0 === e && (e = new Ha(), _[t] = e), e.getTargetRaySpace();
      }, _this25.getControllerGrip = function (t) {
        var e = _[t];
        return void 0 === e && (e = new Ha(), _[t] = e), e.getGripSpace();
      }, _this25.getHand = function (t) {
        var e = _[t];
        return void 0 === e && (e = new Ha(), _[t] = e), e.getHandSpace();
      }, _this25.setFramebufferScaleFactor = function (t) {
        r = t, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }, _this25.setReferenceSpaceType = function (t) {
        a = t, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }, _this25.getReferenceSpace = function () {
        return l || s;
      }, _this25.setReferenceSpace = function (t) {
        l = t;
      }, _this25.getBaseLayer = function () {
        return null !== u ? u : d;
      }, _this25.getBinding = function () {
        return h;
      }, _this25.getFrame = function () {
        return p;
      }, _this25.getSession = function () {
        return i;
      }, _this25.setSession = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(c) {
          var _n107, _n108, _s39, _a35, _o24;
          return _regeneratorRuntime().wrap(function _callee$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                if (!(i = c, null !== i)) {
                  _context7.next = 34;
                  break;
                }
                f = t.getRenderTarget();
                i.addEventListener("select", E);
                i.addEventListener("selectstart", E);
                i.addEventListener("selectend", E);
                i.addEventListener("squeeze", E);
                i.addEventListener("squeezestart", E);
                i.addEventListener("squeezeend", E);
                i.addEventListener("end", w);
                i.addEventListener("inputsourceschange", A);
                _context7.t0 = !0 !== m.xrCompatible;
                if (!_context7.t0) {
                  _context7.next = 14;
                  break;
                }
                _context7.next = 14;
                return e.makeXRCompatible();
              case 14:
                if (!(void 0 === i.renderState.layers || !1 === t.capabilities.isWebGL2)) {
                  _context7.next = 19;
                  break;
                }
                _n107 = {
                  antialias: void 0 !== i.renderState.layers || m.antialias,
                  alpha: !0,
                  depth: m.depth,
                  stencil: m.stencil,
                  framebufferScaleFactor: r
                };
                d = new XRWebGLLayer(i, e, _n107), i.updateRenderState({
                  baseLayer: d
                }), g = new Ne(d.framebufferWidth, d.framebufferHeight, {
                  format: G,
                  type: I,
                  colorSpace: t.outputColorSpace,
                  stencilBuffer: m.stencil
                });
                _context7.next = 24;
                break;
              case 19:
                _n108 = null, _s39 = null, _a35 = null;
                m.depth && (_a35 = m.stencil ? e.DEPTH24_STENCIL8 : e.DEPTH_COMPONENT24, _n108 = m.stencil ? k : V, _s39 = m.stencil ? H : N);
                _o24 = {
                  colorFormat: e.RGBA8,
                  depthFormat: _a35,
                  scaleFactor: r
                };
                h = new XRWebGLBinding(i, e), u = h.createProjectionLayer(_o24), i.updateRenderState({
                  layers: [u]
                }), g = new Ne(u.textureWidth, u.textureHeight, {
                  format: G,
                  type: I,
                  depthTexture: new Ga(u.textureWidth, u.textureHeight, _s39, void 0, void 0, void 0, void 0, void 0, void 0, _n108),
                  stencilBuffer: m.stencil,
                  colorSpace: t.outputColorSpace,
                  samples: m.antialias ? 4 : 0
                });
                t.properties.get(g).__ignoreDepthValues = u.ignoreDepthValues;
              case 24:
                g.isXRRenderTarget = !0;
                this.setFoveation(o);
                l = null;
                _context7.next = 29;
                return i.requestReferenceSpace(a);
              case 29:
                s = _context7.sent;
                U.setContext(i);
                U.start();
                n.isPresenting = !0;
                n.dispatchEvent({
                  type: "sessionstart"
                });
              case 34:
              case "end":
                return _context7.stop();
            }
          }, _callee, this);
        }));
        return function (_x4) {
          return _ref2.apply(this, arguments);
        };
      }(), _this25.getEnvironmentBlendMode = function () {
        if (null !== i) return i.environmentBlendMode;
      };
      var R = new ze(),
        C = new ze();
      function L(t, e) {
        null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix), t.matrixWorldInverse.copy(t.matrixWorld).invert();
      }
      _this25.updateCamera = function (t) {
        if (null === i) return;
        S.near = x.near = y.near = t.near, S.far = x.far = y.far = t.far, b === S.near && T === S.far || (i.updateRenderState({
          depthNear: S.near,
          depthFar: S.far
        }), b = S.near, T = S.far);
        var e = t.parent,
          n = S.cameras;
        L(S, e);
        for (var _t133 = 0; _t133 < n.length; _t133++) L(n[_t133], e);
        2 === n.length ? function (t, e, n) {
          R.setFromMatrixPosition(e.matrixWorld), C.setFromMatrixPosition(n.matrixWorld);
          var i = R.distanceTo(C),
            r = e.projectionMatrix.elements,
            s = n.projectionMatrix.elements,
            a = r[14] / (r[10] - 1),
            o = r[14] / (r[10] + 1),
            l = (r[9] + 1) / r[5],
            c = (r[9] - 1) / r[5],
            h = (r[8] - 1) / r[0],
            u = (s[8] + 1) / s[0],
            d = a * h,
            p = a * u,
            m = i / (-h + u),
            f = m * -h;
          e.matrixWorld.decompose(t.position, t.quaternion, t.scale), t.translateX(f), t.translateZ(m), t.matrixWorld.compose(t.position, t.quaternion, t.scale), t.matrixWorldInverse.copy(t.matrixWorld).invert();
          var g = a + m,
            _ = o + m,
            v = d - f,
            y = p + (i - f),
            x = l * o / _ * g,
            M = c * o / _ * g;
          t.projectionMatrix.makePerspective(v, y, x, M, g, _), t.projectionMatrixInverse.copy(t.projectionMatrix).invert();
        }(S, y, x) : S.projectionMatrix.copy(y.projectionMatrix), function (t, e, n) {
          null === n ? t.matrix.copy(e.matrixWorld) : (t.matrix.copy(n.matrixWorld), t.matrix.invert(), t.matrix.multiply(e.matrixWorld));
          t.matrix.decompose(t.position, t.quaternion, t.scale), t.updateMatrixWorld(!0), t.projectionMatrix.copy(e.projectionMatrix), t.projectionMatrixInverse.copy(e.projectionMatrixInverse), t.isPerspectiveCamera && (t.fov = 2 * $t * Math.atan(1 / t.projectionMatrix.elements[5]), t.zoom = 1);
        }(t, S, e);
      }, _this25.getCamera = function () {
        return S;
      }, _this25.getFoveation = function () {
        if (null !== u || null !== d) return o;
      }, _this25.setFoveation = function (t) {
        o = t, null !== u && (u.fixedFoveation = t), null !== d && void 0 !== d.fixedFoveation && (d.fixedFoveation = t);
      };
      var P = null;
      var U = new dr();
      U.setAnimationLoop(function (e, i) {
        if (c = i.getViewerPose(l || s), p = i, null !== c) {
          var _e114 = c.views;
          null !== d && (t.setRenderTargetFramebuffer(g, d.framebuffer), t.setRenderTarget(g));
          var _n109 = !1;
          _e114.length !== S.cameras.length && (S.cameras.length = 0, _n109 = !0);
          for (var _i104 = 0; _i104 < _e114.length; _i104++) {
            var _r74 = _e114[_i104];
            var _s40 = null;
            if (null !== d) _s40 = d.getViewport(_r74);else {
              var _e115 = h.getViewSubImage(u, _r74);
              _s40 = _e115.viewport, 0 === _i104 && (t.setRenderTargetTextures(g, _e115.colorTexture, u.ignoreDepthValues ? void 0 : _e115.depthStencilTexture), t.setRenderTarget(g));
            }
            var _a36 = M[_i104];
            void 0 === _a36 && (_a36 = new tr(), _a36.layers.enable(_i104), _a36.viewport = new Ue(), M[_i104] = _a36), _a36.matrix.fromArray(_r74.transform.matrix), _a36.matrix.decompose(_a36.position, _a36.quaternion, _a36.scale), _a36.projectionMatrix.fromArray(_r74.projectionMatrix), _a36.projectionMatrixInverse.copy(_a36.projectionMatrix).invert(), _a36.viewport.set(_s40.x, _s40.y, _s40.width, _s40.height), 0 === _i104 && (S.matrix.copy(_a36.matrix), S.matrix.decompose(S.position, S.quaternion, S.scale)), !0 === _n109 && S.cameras.push(_a36);
          }
        }
        for (var _t134 = 0; _t134 < _.length; _t134++) {
          var _e116 = v[_t134],
            _n110 = _[_t134];
          null !== _e116 && void 0 !== _n110 && _n110.update(_e116, i, l || s);
        }
        P && P(e, i), i.detectedPlanes && n.dispatchEvent({
          type: "planesdetected",
          data: i
        }), p = null;
      }), _this25.setAnimationLoop = function (t) {
        P = t;
      }, _this25.dispose = function () {};
      return _this25;
    }
    return _createClass(Va);
  }(Yt);
  function ka(t, e) {
    function n(t, e) {
      !0 === t.matrixAutoUpdate && t.updateMatrix(), e.value.copy(t.matrix);
    }
    function i(i, r) {
      i.opacity.value = r.opacity, r.color && i.diffuse.value.copy(r.color), r.emissive && i.emissive.value.copy(r.emissive).multiplyScalar(r.emissiveIntensity), r.map && (i.map.value = r.map, n(r.map, i.mapTransform)), r.alphaMap && (i.alphaMap.value = r.alphaMap, n(r.alphaMap, i.alphaMapTransform)), r.bumpMap && (i.bumpMap.value = r.bumpMap, n(r.bumpMap, i.bumpMapTransform), i.bumpScale.value = r.bumpScale, r.side === a && (i.bumpScale.value *= -1)), r.normalMap && (i.normalMap.value = r.normalMap, n(r.normalMap, i.normalMapTransform), i.normalScale.value.copy(r.normalScale), r.side === a && i.normalScale.value.negate()), r.displacementMap && (i.displacementMap.value = r.displacementMap, n(r.displacementMap, i.displacementMapTransform), i.displacementScale.value = r.displacementScale, i.displacementBias.value = r.displacementBias), r.emissiveMap && (i.emissiveMap.value = r.emissiveMap, n(r.emissiveMap, i.emissiveMapTransform)), r.specularMap && (i.specularMap.value = r.specularMap, n(r.specularMap, i.specularMapTransform)), r.alphaTest > 0 && (i.alphaTest.value = r.alphaTest);
      var s = e.get(r).envMap;
      if (s && (i.envMap.value = s, i.flipEnvMap.value = s.isCubeTexture && !1 === s.isRenderTargetTexture ? -1 : 1, i.reflectivity.value = r.reflectivity, i.ior.value = r.ior, i.refractionRatio.value = r.refractionRatio), r.lightMap) {
        i.lightMap.value = r.lightMap;
        var _e117 = !0 === t._useLegacyLights ? Math.PI : 1;
        i.lightMapIntensity.value = r.lightMapIntensity * _e117, n(r.lightMap, i.lightMapTransform);
      }
      r.aoMap && (i.aoMap.value = r.aoMap, i.aoMapIntensity.value = r.aoMapIntensity, n(r.aoMap, i.aoMapTransform));
    }
    return {
      refreshFogUniforms: function refreshFogUniforms(e, n) {
        n.color.getRGB(e.fogColor.value, Ji(t)), n.isFog ? (e.fogNear.value = n.near, e.fogFar.value = n.far) : n.isFogExp2 && (e.fogDensity.value = n.density);
      },
      refreshMaterialUniforms: function refreshMaterialUniforms(t, r, s, o, l) {
        r.isMeshBasicMaterial || r.isMeshLambertMaterial ? i(t, r) : r.isMeshToonMaterial ? (i(t, r), function (t, e) {
          e.gradientMap && (t.gradientMap.value = e.gradientMap);
        }(t, r)) : r.isMeshPhongMaterial ? (i(t, r), function (t, e) {
          t.specular.value.copy(e.specular), t.shininess.value = Math.max(e.shininess, 1e-4);
        }(t, r)) : r.isMeshStandardMaterial ? (i(t, r), function (t, i) {
          t.metalness.value = i.metalness, i.metalnessMap && (t.metalnessMap.value = i.metalnessMap, n(i.metalnessMap, t.metalnessMapTransform));
          t.roughness.value = i.roughness, i.roughnessMap && (t.roughnessMap.value = i.roughnessMap, n(i.roughnessMap, t.roughnessMapTransform));
          var r = e.get(i).envMap;
          r && (t.envMapIntensity.value = i.envMapIntensity);
        }(t, r), r.isMeshPhysicalMaterial && function (t, e, i) {
          t.ior.value = e.ior, e.sheen > 0 && (t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen), t.sheenRoughness.value = e.sheenRoughness, e.sheenColorMap && (t.sheenColorMap.value = e.sheenColorMap, n(e.sheenColorMap, t.sheenColorMapTransform)), e.sheenRoughnessMap && (t.sheenRoughnessMap.value = e.sheenRoughnessMap, n(e.sheenRoughnessMap, t.sheenRoughnessMapTransform)));
          e.clearcoat > 0 && (t.clearcoat.value = e.clearcoat, t.clearcoatRoughness.value = e.clearcoatRoughness, e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap, n(e.clearcoatMap, t.clearcoatMapTransform)), e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap, n(e.clearcoatRoughnessMap, t.clearcoatRoughnessMapTransform)), e.clearcoatNormalMap && (t.clearcoatNormalMap.value = e.clearcoatNormalMap, n(e.clearcoatNormalMap, t.clearcoatNormalMapTransform), t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale), e.side === a && t.clearcoatNormalScale.value.negate()));
          e.iridescence > 0 && (t.iridescence.value = e.iridescence, t.iridescenceIOR.value = e.iridescenceIOR, t.iridescenceThicknessMinimum.value = e.iridescenceThicknessRange[0], t.iridescenceThicknessMaximum.value = e.iridescenceThicknessRange[1], e.iridescenceMap && (t.iridescenceMap.value = e.iridescenceMap, n(e.iridescenceMap, t.iridescenceMapTransform)), e.iridescenceThicknessMap && (t.iridescenceThicknessMap.value = e.iridescenceThicknessMap, n(e.iridescenceThicknessMap, t.iridescenceThicknessMapTransform)));
          e.transmission > 0 && (t.transmission.value = e.transmission, t.transmissionSamplerMap.value = i.texture, t.transmissionSamplerSize.value.set(i.width, i.height), e.transmissionMap && (t.transmissionMap.value = e.transmissionMap, n(e.transmissionMap, t.transmissionMapTransform)), t.thickness.value = e.thickness, e.thicknessMap && (t.thicknessMap.value = e.thicknessMap, n(e.thicknessMap, t.thicknessMapTransform)), t.attenuationDistance.value = e.attenuationDistance, t.attenuationColor.value.copy(e.attenuationColor));
          e.anisotropy > 0 && (t.anisotropyVector.value.set(e.anisotropy * Math.cos(e.anisotropyRotation), e.anisotropy * Math.sin(e.anisotropyRotation)), e.anisotropyMap && (t.anisotropyMap.value = e.anisotropyMap, n(e.anisotropyMap, t.anisotropyMapTransform)));
          t.specularIntensity.value = e.specularIntensity, t.specularColor.value.copy(e.specularColor), e.specularColorMap && (t.specularColorMap.value = e.specularColorMap, n(e.specularColorMap, t.specularColorMapTransform));
          e.specularIntensityMap && (t.specularIntensityMap.value = e.specularIntensityMap, n(e.specularIntensityMap, t.specularIntensityMapTransform));
        }(t, r, l)) : r.isMeshMatcapMaterial ? (i(t, r), function (t, e) {
          e.matcap && (t.matcap.value = e.matcap);
        }(t, r)) : r.isMeshDepthMaterial ? i(t, r) : r.isMeshDistanceMaterial ? (i(t, r), function (t, n) {
          var i = e.get(n).light;
          t.referencePosition.value.setFromMatrixPosition(i.matrixWorld), t.nearDistance.value = i.shadow.camera.near, t.farDistance.value = i.shadow.camera.far;
        }(t, r)) : r.isMeshNormalMaterial ? i(t, r) : r.isLineBasicMaterial ? (function (t, e) {
          t.diffuse.value.copy(e.color), t.opacity.value = e.opacity, e.map && (t.map.value = e.map, n(e.map, t.mapTransform));
        }(t, r), r.isLineDashedMaterial && function (t, e) {
          t.dashSize.value = e.dashSize, t.totalSize.value = e.dashSize + e.gapSize, t.scale.value = e.scale;
        }(t, r)) : r.isPointsMaterial ? function (t, e, i, r) {
          t.diffuse.value.copy(e.color), t.opacity.value = e.opacity, t.size.value = e.size * i, t.scale.value = .5 * r, e.map && (t.map.value = e.map, n(e.map, t.uvTransform));
          e.alphaMap && (t.alphaMap.value = e.alphaMap, n(e.alphaMap, t.alphaMapTransform));
          e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
        }(t, r, s, o) : r.isSpriteMaterial ? function (t, e) {
          t.diffuse.value.copy(e.color), t.opacity.value = e.opacity, t.rotation.value = e.rotation, e.map && (t.map.value = e.map, n(e.map, t.mapTransform));
          e.alphaMap && (t.alphaMap.value = e.alphaMap, n(e.alphaMap, t.alphaMapTransform));
          e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
        }(t, r) : r.isShadowMaterial ? (t.color.value.copy(r.color), t.opacity.value = r.opacity) : r.isShaderMaterial && (r.uniformsNeedUpdate = !1);
      }
    };
  }
  function Wa(t, e, n, i) {
    var r = {},
      s = {},
      a = [];
    var o = n.isWebGL2 ? t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
    function l(t, e, n) {
      var i = t.value;
      if (void 0 === n[e]) {
        if ("number" == typeof i) n[e] = i;else {
          var _t135 = Array.isArray(i) ? i : [i],
            _r75 = [];
          for (var _e118 = 0; _e118 < _t135.length; _e118++) _r75.push(_t135[_e118].clone());
          n[e] = _r75;
        }
        return !0;
      }
      if ("number" == typeof i) {
        if (n[e] !== i) return n[e] = i, !0;
      } else {
        var _t136 = Array.isArray(n[e]) ? n[e] : [n[e]],
          _r76 = Array.isArray(i) ? i : [i];
        for (var _e119 = 0; _e119 < _t136.length; _e119++) {
          var _n111 = _t136[_e119];
          if (!1 === _n111.equals(_r76[_e119])) return _n111.copy(_r76[_e119]), !0;
        }
      }
      return !1;
    }
    function c(t) {
      var e = {
        boundary: 0,
        storage: 0
      };
      return "number" == typeof t ? (e.boundary = 4, e.storage = 4) : t.isVector2 ? (e.boundary = 8, e.storage = 8) : t.isVector3 || t.isColor ? (e.boundary = 16, e.storage = 12) : t.isVector4 ? (e.boundary = 16, e.storage = 16) : t.isMatrix3 ? (e.boundary = 48, e.storage = 48) : t.isMatrix4 ? (e.boundary = 64, e.storage = 64) : t.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", t), e;
    }
    function h(e) {
      var n = e.target;
      n.removeEventListener("dispose", h);
      var i = a.indexOf(n.__bindingPointIndex);
      a.splice(i, 1), t.deleteBuffer(r[n.id]), delete r[n.id], delete s[n.id];
    }
    return {
      bind: function bind(t, e) {
        var n = e.program;
        i.uniformBlockBinding(t, n);
      },
      update: function update(n, u) {
        var d = r[n.id];
        void 0 === d && (!function (t) {
          var e = t.uniforms;
          var n = 0;
          var i = 16;
          var r = 0;
          for (var _t137 = 0, _s41 = e.length; _t137 < _s41; _t137++) {
            var _s42 = e[_t137],
              _a37 = {
                boundary: 0,
                storage: 0
              },
              _o25 = Array.isArray(_s42.value) ? _s42.value : [_s42.value];
            for (var _t138 = 0, _e120 = _o25.length; _t138 < _e120; _t138++) {
              var _e121 = c(_o25[_t138]);
              _a37.boundary += _e121.boundary, _a37.storage += _e121.storage;
            }
            if (_s42.__data = new Float32Array(_a37.storage / Float32Array.BYTES_PER_ELEMENT), _s42.__offset = n, _t137 > 0) {
              r = n % i;
              0 !== r && i - r - _a37.boundary < 0 && (n += i - r, _s42.__offset = n);
            }
            n += _a37.storage;
          }
          r = n % i, r > 0 && (n += i - r);
          t.__size = n, t.__cache = {};
        }(n), d = function (e) {
          var n = function () {
            for (var _t139 = 0; _t139 < o; _t139++) if (-1 === a.indexOf(_t139)) return a.push(_t139), _t139;
            return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
          }();
          e.__bindingPointIndex = n;
          var i = t.createBuffer(),
            r = e.__size,
            s = e.usage;
          return t.bindBuffer(t.UNIFORM_BUFFER, i), t.bufferData(t.UNIFORM_BUFFER, r, s), t.bindBuffer(t.UNIFORM_BUFFER, null), t.bindBufferBase(t.UNIFORM_BUFFER, n, i), i;
        }(n), r[n.id] = d, n.addEventListener("dispose", h));
        var p = u.program;
        i.updateUBOMapping(n, p);
        var m = e.render.frame;
        s[n.id] !== m && (!function (e) {
          var n = r[e.id],
            i = e.uniforms,
            s = e.__cache;
          t.bindBuffer(t.UNIFORM_BUFFER, n);
          for (var _e122 = 0, _n112 = i.length; _e122 < _n112; _e122++) {
            var _n113 = i[_e122];
            if (!0 === l(_n113, _e122, s)) {
              var _e123 = _n113.__offset,
                _i105 = Array.isArray(_n113.value) ? _n113.value : [_n113.value];
              var _r77 = 0;
              for (var _s43 = 0; _s43 < _i105.length; _s43++) {
                var _a38 = _i105[_s43],
                  _o26 = c(_a38);
                "number" == typeof _a38 ? (_n113.__data[0] = _a38, t.bufferSubData(t.UNIFORM_BUFFER, _e123 + _r77, _n113.__data)) : _a38.isMatrix3 ? (_n113.__data[0] = _a38.elements[0], _n113.__data[1] = _a38.elements[1], _n113.__data[2] = _a38.elements[2], _n113.__data[3] = _a38.elements[0], _n113.__data[4] = _a38.elements[3], _n113.__data[5] = _a38.elements[4], _n113.__data[6] = _a38.elements[5], _n113.__data[7] = _a38.elements[0], _n113.__data[8] = _a38.elements[6], _n113.__data[9] = _a38.elements[7], _n113.__data[10] = _a38.elements[8], _n113.__data[11] = _a38.elements[0]) : (_a38.toArray(_n113.__data, _r77), _r77 += _o26.storage / Float32Array.BYTES_PER_ELEMENT);
              }
              t.bufferSubData(t.UNIFORM_BUFFER, _e123, _n113.__data);
            }
          }
          t.bindBuffer(t.UNIFORM_BUFFER, null);
        }(n), s[n.id] = m);
      },
      dispose: function dispose() {
        for (var _e124 in r) t.deleteBuffer(r[_e124]);
        a = [], r = {}, s = {};
      }
    };
  }
  var Xa = /*#__PURE__*/function () {
    function Xa() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, Xa);
      var _t$canvas = t.canvas,
        n = _t$canvas === void 0 ? ge() : _t$canvas,
        _t$context = t.context,
        i = _t$context === void 0 ? null : _t$context,
        _t$depth = t.depth,
        r = _t$depth === void 0 ? !0 : _t$depth,
        _t$stencil = t.stencil,
        o = _t$stencil === void 0 ? !0 : _t$stencil,
        _t$alpha = t.alpha,
        l = _t$alpha === void 0 ? !1 : _t$alpha,
        _t$antialias = t.antialias,
        c = _t$antialias === void 0 ? !1 : _t$antialias,
        _t$premultipliedAlpha = t.premultipliedAlpha,
        h = _t$premultipliedAlpha === void 0 ? !0 : _t$premultipliedAlpha,
        _t$preserveDrawingBuf = t.preserveDrawingBuffer,
        d = _t$preserveDrawingBuf === void 0 ? !1 : _t$preserveDrawingBuf,
        _t$powerPreference = t.powerPreference,
        p = _t$powerPreference === void 0 ? "default" : _t$powerPreference,
        _t$failIfMajorPerform = t.failIfMajorPerformanceCaveat,
        m = _t$failIfMajorPerform === void 0 ? !1 : _t$failIfMajorPerform;
      var f;
      this.isWebGLRenderer = !0, f = null !== i ? i.getContextAttributes().alpha : l;
      var g = new Uint32Array(4),
        _ = new Int32Array(4);
      var v = null,
        y = null;
      var x = [],
        M = [];
      this.domElement = n, this.debug = {
        checkShaderErrors: !0,
        onShaderError: null
      }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = Dt, this._useLegacyLights = !1, this.toneMapping = u, this.toneMappingExposure = 1;
      var S = this;
      var b = !1,
        T = 0,
        E = 0,
        w = null,
        A = -1,
        R = null;
      var C = new Ue(),
        L = new Ue();
      var D = null;
      var V = new ai(0);
      var k = 0,
        q = n.width,
        Y = n.height,
        Z = 1,
        J = null,
        K = null;
      var $ = new Ue(0, 0, q, Y),
        Q = new Ue(0, 0, q, Y);
      var tt = !1;
      var et = new ur();
      var nt = !1,
        it = !1,
        rt = null;
      var st = new gn(),
        at = new ce(),
        ot = new ze(),
        lt = {
          background: null,
          fog: null,
          environment: null,
          overrideMaterial: null,
          isScene: !0
        };
      function ct() {
        return null === w ? Z : 1;
      }
      var ht,
        ut,
        dt,
        pt,
        mt,
        ft,
        gt,
        _t,
        vt,
        yt,
        xt,
        Mt,
        St,
        bt,
        Tt,
        Et,
        wt,
        At,
        Rt,
        Ct,
        Lt,
        Pt,
        It,
        Ut,
        Ot = i;
      function Ft(t, e) {
        for (var _i106 = 0; _i106 < t.length; _i106++) {
          var _r78 = t[_i106],
            _s44 = n.getContext(_r78, e);
          if (null !== _s44) return _s44;
        }
        return null;
      }
      try {
        var _t140 = {
          alpha: !0,
          depth: r,
          stencil: o,
          antialias: c,
          premultipliedAlpha: h,
          preserveDrawingBuffer: d,
          powerPreference: p,
          failIfMajorPerformanceCaveat: m
        };
        if ("setAttribute" in n && n.setAttribute("data-engine", "three.js r".concat(e)), n.addEventListener("webglcontextlost", Ht, !1), n.addEventListener("webglcontextrestored", Gt, !1), n.addEventListener("webglcontextcreationerror", Vt, !1), null === Ot) {
          var _e125 = ["webgl2", "webgl", "experimental-webgl"];
          if (!0 === S.isWebGL1Renderer && _e125.shift(), Ot = Ft(_e125, _t140), null === Ot) throw Ft(_e125) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
        }
        "undefined" != typeof WebGLRenderingContext && Ot instanceof WebGLRenderingContext && console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."), void 0 === Ot.getShaderPrecisionFormat && (Ot.getShaderPrecisionFormat = function () {
          return {
            rangeMin: 1,
            rangeMax: 1,
            precision: 1
          };
        });
      } catch (t) {
        throw console.error("THREE.WebGLRenderer: " + t.message), t;
      }
      function Bt() {
        ht = new Gr(Ot), ut = new Sr(Ot, ht, t), ht.init(ut), Pt = new Oa(Ot, ht, ut), dt = new Da(Ot, ht, ut), pt = new Wr(Ot), mt = new xa(), ft = new Na(Ot, ht, dt, mt, ut, Pt, pt), gt = new Tr(S), _t = new Hr(S), vt = new pr(Ot, ut), It = new xr(Ot, ht, vt, ut), yt = new Vr(Ot, vt, pt, It), xt = new Yr(Ot, yt, vt, pt), Rt = new qr(Ot, ut, ft), Et = new br(mt), Mt = new ya(S, gt, _t, ht, ut, It, Et), St = new ka(S, mt), bt = new Ta(), Tt = new La(ht, ut), At = new yr(S, gt, _t, dt, xt, f, h), wt = new Ua(S, xt, ut), Ut = new Wa(Ot, pt, ut, dt), Ct = new Mr(Ot, ht, pt, ut), Lt = new kr(Ot, ht, pt, ut), pt.programs = Mt.programs, S.capabilities = ut, S.extensions = ht, S.properties = mt, S.renderLists = bt, S.shadowMap = wt, S.state = dt, S.info = pt;
      }
      Bt();
      var zt = new Va(S, Ot);
      function Ht(t) {
        t.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), b = !0;
      }
      function Gt() {
        console.log("THREE.WebGLRenderer: Context Restored."), b = !1;
        var t = pt.autoReset,
          e = wt.enabled,
          n = wt.autoUpdate,
          i = wt.needsUpdate,
          r = wt.type;
        Bt(), pt.autoReset = t, wt.enabled = e, wt.autoUpdate = n, wt.needsUpdate = i, wt.type = r;
      }
      function Vt(t) {
        console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", t.statusMessage);
      }
      function kt(t) {
        var e = t.target;
        e.removeEventListener("dispose", kt), function (t) {
          (function (t) {
            var e = mt.get(t).programs;
            void 0 !== e && (e.forEach(function (t) {
              Mt.releaseProgram(t);
            }), t.isShaderMaterial && Mt.releaseShaderCache(t));
          })(t), mt.remove(t);
        }(e);
      }
      this.xr = zt, this.getContext = function () {
        return Ot;
      }, this.getContextAttributes = function () {
        return Ot.getContextAttributes();
      }, this.forceContextLoss = function () {
        var t = ht.get("WEBGL_lose_context");
        t && t.loseContext();
      }, this.forceContextRestore = function () {
        var t = ht.get("WEBGL_lose_context");
        t && t.restoreContext();
      }, this.getPixelRatio = function () {
        return Z;
      }, this.setPixelRatio = function (t) {
        void 0 !== t && (Z = t, this.setSize(q, Y, !1));
      }, this.getSize = function (t) {
        return t.set(q, Y);
      }, this.setSize = function (t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
        zt.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (q = t, Y = e, n.width = Math.floor(t * Z), n.height = Math.floor(e * Z), !0 === i && (n.style.width = t + "px", n.style.height = e + "px"), this.setViewport(0, 0, t, e));
      }, this.getDrawingBufferSize = function (t) {
        return t.set(q * Z, Y * Z).floor();
      }, this.setDrawingBufferSize = function (t, e, i) {
        q = t, Y = e, Z = i, n.width = Math.floor(t * i), n.height = Math.floor(e * i), this.setViewport(0, 0, t, e);
      }, this.getCurrentViewport = function (t) {
        return t.copy(C);
      }, this.getViewport = function (t) {
        return t.copy($);
      }, this.setViewport = function (t, e, n, i) {
        t.isVector4 ? $.set(t.x, t.y, t.z, t.w) : $.set(t, e, n, i), dt.viewport(C.copy($).multiplyScalar(Z).floor());
      }, this.getScissor = function (t) {
        return t.copy(Q);
      }, this.setScissor = function (t, e, n, i) {
        t.isVector4 ? Q.set(t.x, t.y, t.z, t.w) : Q.set(t, e, n, i), dt.scissor(L.copy(Q).multiplyScalar(Z).floor());
      }, this.getScissorTest = function () {
        return tt;
      }, this.setScissorTest = function (t) {
        dt.setScissorTest(tt = t);
      }, this.setOpaqueSort = function (t) {
        J = t;
      }, this.setTransparentSort = function (t) {
        K = t;
      }, this.getClearColor = function (t) {
        return t.copy(At.getClearColor());
      }, this.setClearColor = function () {
        At.setClearColor.apply(At, arguments);
      }, this.getClearAlpha = function () {
        return At.getClearAlpha();
      }, this.setClearAlpha = function () {
        At.setClearAlpha.apply(At, arguments);
      }, this.clear = function () {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
        var i = 0;
        if (t) {
          var _t141 = !1;
          if (null !== w) {
            var _e126 = w.texture.format;
            _t141 = _e126 === j || _e126 === X || _e126 === W;
          }
          if (_t141) {
            var _t142 = w.texture.type,
              _e127 = _t142 === I || _t142 === N || _t142 === U || _t142 === H || _t142 === B || _t142 === z,
              _n114 = At.getClearColor(),
              _i107 = At.getClearAlpha(),
              _r79 = _n114.r,
              _s45 = _n114.g,
              _a39 = _n114.b;
            _e127 ? (g[0] = _r79, g[1] = _s45, g[2] = _a39, g[3] = _i107, Ot.clearBufferuiv(Ot.COLOR, 0, g)) : (_[0] = _r79, _[1] = _s45, _[2] = _a39, _[3] = _i107, Ot.clearBufferiv(Ot.COLOR, 0, _));
          } else i |= Ot.COLOR_BUFFER_BIT;
        }
        e && (i |= Ot.DEPTH_BUFFER_BIT), n && (i |= Ot.STENCIL_BUFFER_BIT), Ot.clear(i);
      }, this.clearColor = function () {
        this.clear(!0, !1, !1);
      }, this.clearDepth = function () {
        this.clear(!1, !0, !1);
      }, this.clearStencil = function () {
        this.clear(!1, !1, !0);
      }, this.dispose = function () {
        n.removeEventListener("webglcontextlost", Ht, !1), n.removeEventListener("webglcontextrestored", Gt, !1), n.removeEventListener("webglcontextcreationerror", Vt, !1), bt.dispose(), Tt.dispose(), mt.dispose(), gt.dispose(), _t.dispose(), xt.dispose(), It.dispose(), Ut.dispose(), Mt.dispose(), zt.dispose(), zt.removeEventListener("sessionstart", Xt), zt.removeEventListener("sessionend", jt), rt && (rt.dispose(), rt = null), qt.stop();
      }, this.renderBufferDirect = function (t, e, n, i, r, s) {
        null === e && (e = lt);
        var a = r.isMesh && r.matrixWorld.determinant() < 0,
          o = function (t, e, n, i, r) {
            !0 !== e.isScene && (e = lt);
            ft.resetTextureUnits();
            var s = e.fog,
              a = i.isMeshStandardMaterial ? e.environment : null,
              o = null === w ? S.outputColorSpace : !0 === w.isXRRenderTarget ? w.texture.colorSpace : Nt,
              l = (i.isMeshStandardMaterial ? _t : gt).get(i.envMap || a),
              c = !0 === i.vertexColors && !!n.attributes.color && 4 === n.attributes.color.itemSize,
              h = !!n.attributes.tangent && (!!i.normalMap || i.anisotropy > 0),
              d = !!n.morphAttributes.position,
              p = !!n.morphAttributes.normal,
              m = !!n.morphAttributes.color;
            var f = u;
            i.toneMapped && (null !== w && !0 !== w.isXRRenderTarget || (f = S.toneMapping));
            var g = n.morphAttributes.position || n.morphAttributes.normal || n.morphAttributes.color,
              _ = void 0 !== g ? g.length : 0,
              v = mt.get(i),
              x = y.state.lights;
            if (!0 === nt && (!0 === it || t !== R)) {
              var _e128 = t === R && i.id === A;
              Et.setState(i, t, _e128);
            }
            var M = !1;
            i.version === v.__version ? v.needsLights && v.lightsStateVersion !== x.state.version || v.outputColorSpace !== o || r.isInstancedMesh && !1 === v.instancing ? M = !0 : r.isInstancedMesh || !0 !== v.instancing ? r.isSkinnedMesh && !1 === v.skinning ? M = !0 : r.isSkinnedMesh || !0 !== v.skinning ? r.isInstancedMesh && !0 === v.instancingColor && null === r.instanceColor || r.isInstancedMesh && !1 === v.instancingColor && null !== r.instanceColor || v.envMap !== l || !0 === i.fog && v.fog !== s ? M = !0 : void 0 === v.numClippingPlanes || v.numClippingPlanes === Et.numPlanes && v.numIntersection === Et.numIntersection ? (v.vertexAlphas !== c || v.vertexTangents !== h || v.morphTargets !== d || v.morphNormals !== p || v.morphColors !== m || v.toneMapping !== f || !0 === ut.isWebGL2 && v.morphTargetsCount !== _) && (M = !0) : M = !0 : M = !0 : M = !0 : (M = !0, v.__version = i.version);
            var b = v.currentProgram;
            !0 === M && (b = $t(i, e, r));
            var T = !1,
              E = !1,
              C = !1;
            var L = b.getUniforms(),
              P = v.uniforms;
            dt.useProgram(b.program) && (T = !0, E = !0, C = !0);
            i.id !== A && (A = i.id, E = !0);
            if (T || R !== t) {
              L.setValue(Ot, "projectionMatrix", t.projectionMatrix), L.setValue(Ot, "viewMatrix", t.matrixWorldInverse);
              var _e129 = L.map.cameraPosition;
              void 0 !== _e129 && _e129.setValue(Ot, ot.setFromMatrixPosition(t.matrixWorld)), ut.logarithmicDepthBuffer && L.setValue(Ot, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)), (i.isMeshPhongMaterial || i.isMeshToonMaterial || i.isMeshLambertMaterial || i.isMeshBasicMaterial || i.isMeshStandardMaterial || i.isShaderMaterial) && L.setValue(Ot, "isOrthographic", !0 === t.isOrthographicCamera), R !== t && (R = t, E = !0, C = !0);
            }
            if (r.isSkinnedMesh) {
              L.setOptional(Ot, r, "bindMatrix"), L.setOptional(Ot, r, "bindMatrixInverse");
              var _t143 = r.skeleton;
              _t143 && (ut.floatVertexTextures ? (null === _t143.boneTexture && _t143.computeBoneTexture(), L.setValue(Ot, "boneTexture", _t143.boneTexture, ft), L.setValue(Ot, "boneTextureSize", _t143.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
            }
            var I = n.morphAttributes;
            (void 0 !== I.position || void 0 !== I.normal || void 0 !== I.color && !0 === ut.isWebGL2) && Rt.update(r, n, b);
            (E || v.receiveShadow !== r.receiveShadow) && (v.receiveShadow = r.receiveShadow, L.setValue(Ot, "receiveShadow", r.receiveShadow));
            i.isMeshGouraudMaterial && null !== i.envMap && (P.envMap.value = l, P.flipEnvMap.value = l.isCubeTexture && !1 === l.isRenderTargetTexture ? -1 : 1);
            E && (L.setValue(Ot, "toneMappingExposure", S.toneMappingExposure), v.needsLights && (D = C, (U = P).ambientLightColor.needsUpdate = D, U.lightProbe.needsUpdate = D, U.directionalLights.needsUpdate = D, U.directionalLightShadows.needsUpdate = D, U.pointLights.needsUpdate = D, U.pointLightShadows.needsUpdate = D, U.spotLights.needsUpdate = D, U.spotLightShadows.needsUpdate = D, U.rectAreaLights.needsUpdate = D, U.hemisphereLights.needsUpdate = D), s && !0 === i.fog && St.refreshFogUniforms(P, s), St.refreshMaterialUniforms(P, i, Z, Y, rt), $s.upload(Ot, v.uniformsList, P, ft));
            var U, D;
            i.isShaderMaterial && !0 === i.uniformsNeedUpdate && ($s.upload(Ot, v.uniformsList, P, ft), i.uniformsNeedUpdate = !1);
            i.isSpriteMaterial && L.setValue(Ot, "center", r.center);
            if (L.setValue(Ot, "modelViewMatrix", r.modelViewMatrix), L.setValue(Ot, "normalMatrix", r.normalMatrix), L.setValue(Ot, "modelMatrix", r.matrixWorld), i.isShaderMaterial || i.isRawShaderMaterial) {
              var _t144 = i.uniformsGroups;
              for (var _e130 = 0, _n115 = _t144.length; _e130 < _n115; _e130++) if (ut.isWebGL2) {
                var _n116 = _t144[_e130];
                Ut.update(_n116, b), Ut.bind(_n116, b);
              } else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
            }
            return b;
          }(t, e, n, i, r);
        dt.setMaterial(i, a);
        var l = n.index,
          c = 1;
        if (!0 === i.wireframe) {
          if (l = yt.getWireframeAttribute(n), void 0 === l) return;
          c = 2;
        }
        var h = n.drawRange,
          d = n.attributes.position;
        var p = h.start * c,
          m = (h.start + h.count) * c;
        null !== s && (p = Math.max(p, s.start * c), m = Math.min(m, (s.start + s.count) * c)), null !== l ? (p = Math.max(p, 0), m = Math.min(m, l.count)) : null != d && (p = Math.max(p, 0), m = Math.min(m, d.count));
        var f = m - p;
        if (f < 0 || f === 1 / 0) return;
        var g;
        It.setup(r, i, o, n, l);
        var _ = Ct;
        if (null !== l && (g = vt.get(l), _ = Lt, _.setIndex(g)), r.isMesh) !0 === i.wireframe ? (dt.setLineWidth(i.wireframeLinewidth * ct()), _.setMode(Ot.LINES)) : _.setMode(Ot.TRIANGLES);else if (r.isLine) {
          var _t145 = i.linewidth;
          void 0 === _t145 && (_t145 = 1), dt.setLineWidth(_t145 * ct()), r.isLineSegments ? _.setMode(Ot.LINES) : r.isLineLoop ? _.setMode(Ot.LINE_LOOP) : _.setMode(Ot.LINE_STRIP);
        } else r.isPoints ? _.setMode(Ot.POINTS) : r.isSprite && _.setMode(Ot.TRIANGLES);
        if (r.isInstancedMesh) _.renderInstances(p, f, r.count);else if (n.isInstancedBufferGeometry) {
          var _t146 = void 0 !== n._maxInstanceCount ? n._maxInstanceCount : 1 / 0,
            _e131 = Math.min(n.instanceCount, _t146);
          _.renderInstances(p, f, _e131);
        } else _.render(p, f);
      }, this.compile = function (t, e) {
        function n(t, e, n) {
          !0 === t.transparent && 2 === t.side && !1 === t.forceSinglePass ? (t.side = a, t.needsUpdate = !0, $t(t, e, n), t.side = s, t.needsUpdate = !0, $t(t, e, n), t.side = 2) : $t(t, e, n);
        }
        y = Tt.get(t), y.init(), M.push(y), t.traverseVisible(function (t) {
          t.isLight && t.layers.test(e.layers) && (y.pushLight(t), t.castShadow && y.pushShadow(t));
        }), y.setupLights(S._useLegacyLights), t.traverse(function (e) {
          var i = e.material;
          if (i) if (Array.isArray(i)) for (var _r80 = 0; _r80 < i.length; _r80++) {
            n(i[_r80], t, e);
          } else n(i, t, e);
        }), M.pop(), y = null;
      };
      var Wt = null;
      function Xt() {
        qt.stop();
      }
      function jt() {
        qt.start();
      }
      var qt = new dr();
      function Yt(t, e, n, i) {
        if (!1 === t.visible) return;
        if (t.layers.test(e.layers)) if (t.isGroup) n = t.renderOrder;else if (t.isLOD) !0 === t.autoUpdate && t.update(e);else if (t.isLight) y.pushLight(t), t.castShadow && y.pushShadow(t);else if (t.isSprite) {
          if (!t.frustumCulled || et.intersectsSprite(t)) {
            i && ot.setFromMatrixPosition(t.matrixWorld).applyMatrix4(st);
            var _e132 = xt.update(t),
              _r81 = t.material;
            _r81.visible && v.push(t, _e132, _r81, n, ot.z, null);
          }
        } else if ((t.isMesh || t.isLine || t.isPoints) && (!t.frustumCulled || et.intersectsObject(t))) {
          var _e133 = xt.update(t),
            _r82 = t.material;
          if (i && (void 0 !== t.boundingSphere ? (null === t.boundingSphere && t.computeBoundingSphere(), ot.copy(t.boundingSphere.center)) : (null === _e133.boundingSphere && _e133.computeBoundingSphere(), ot.copy(_e133.boundingSphere.center)), ot.applyMatrix4(t.matrixWorld).applyMatrix4(st)), Array.isArray(_r82)) {
            var _i108 = _e133.groups;
            for (var _s46 = 0, _a40 = _i108.length; _s46 < _a40; _s46++) {
              var _a41 = _i108[_s46],
                _o27 = _r82[_a41.materialIndex];
              _o27 && _o27.visible && v.push(t, _e133, _o27, n, ot.z, _a41);
            }
          } else _r82.visible && v.push(t, _e133, _r82, n, ot.z, null);
        }
        var r = t.children;
        for (var _t147 = 0, _s47 = r.length; _t147 < _s47; _t147++) Yt(r[_t147], e, n, i);
      }
      function Zt(t, e, n, i) {
        var r = t.opaque,
          s = t.transmissive,
          o = t.transparent;
        y.setupLightsView(n), !0 === nt && Et.setGlobalState(S.clippingPlanes, n), s.length > 0 && function (t, e, n, i) {
          var r = ut.isWebGL2;
          null === rt && (rt = new Ne(1, 1, {
            generateMipmaps: !0,
            type: ht.has("EXT_color_buffer_half_float") ? F : I,
            minFilter: P,
            samples: r ? 4 : 0
          }));
          S.getDrawingBufferSize(at), r ? rt.setSize(at.x, at.y) : rt.setSize(se(at.x), se(at.y));
          var s = S.getRenderTarget();
          S.setRenderTarget(rt), S.getClearColor(V), k = S.getClearAlpha(), k < 1 && S.setClearColor(16777215, .5);
          S.clear();
          var o = S.toneMapping;
          S.toneMapping = u, Jt(t, n, i), ft.updateMultisampleRenderTarget(rt), ft.updateRenderTargetMipmap(rt);
          var l = !1;
          for (var _t148 = 0, _r83 = e.length; _t148 < _r83; _t148++) {
            var _r84 = e[_t148],
              _s48 = _r84.object,
              _o28 = _r84.geometry,
              _c14 = _r84.material,
              _h10 = _r84.group;
            if (2 === _c14.side && _s48.layers.test(i.layers)) {
              var _t149 = _c14.side;
              _c14.side = a, _c14.needsUpdate = !0, Kt(_s48, n, i, _o28, _c14, _h10), _c14.side = _t149, _c14.needsUpdate = !0, l = !0;
            }
          }
          !0 === l && (ft.updateMultisampleRenderTarget(rt), ft.updateRenderTargetMipmap(rt));
          S.setRenderTarget(s), S.setClearColor(V, k), S.toneMapping = o;
        }(r, s, e, n), i && dt.viewport(C.copy(i)), r.length > 0 && Jt(r, e, n), s.length > 0 && Jt(s, e, n), o.length > 0 && Jt(o, e, n), dt.buffers.depth.setTest(!0), dt.buffers.depth.setMask(!0), dt.buffers.color.setMask(!0), dt.setPolygonOffset(!1);
      }
      function Jt(t, e, n) {
        var i = !0 === e.isScene ? e.overrideMaterial : null;
        for (var _r85 = 0, _s49 = t.length; _r85 < _s49; _r85++) {
          var _s50 = t[_r85],
            _a42 = _s50.object,
            _o29 = _s50.geometry,
            _l12 = null === i ? _s50.material : i,
            _c15 = _s50.group;
          _a42.layers.test(n.layers) && Kt(_a42, e, n, _o29, _l12, _c15);
        }
      }
      function Kt(t, e, n, i, r, o) {
        t.onBeforeRender(S, e, n, i, r, o), t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld), t.normalMatrix.getNormalMatrix(t.modelViewMatrix), r.onBeforeRender(S, e, n, i, t, o), !0 === r.transparent && 2 === r.side && !1 === r.forceSinglePass ? (r.side = a, r.needsUpdate = !0, S.renderBufferDirect(n, e, i, r, t, o), r.side = s, r.needsUpdate = !0, S.renderBufferDirect(n, e, i, r, t, o), r.side = 2) : S.renderBufferDirect(n, e, i, r, t, o), t.onAfterRender(S, e, n, i, r, o);
      }
      function $t(t, e, n) {
        !0 !== e.isScene && (e = lt);
        var i = mt.get(t),
          r = y.state.lights,
          s = y.state.shadowsArray,
          a = r.state.version,
          o = Mt.getParameters(t, r.state, s, e, n),
          l = Mt.getProgramCacheKey(o);
        var c = i.programs;
        i.environment = t.isMeshStandardMaterial ? e.environment : null, i.fog = e.fog, i.envMap = (t.isMeshStandardMaterial ? _t : gt).get(t.envMap || i.environment), void 0 === c && (t.addEventListener("dispose", kt), c = new Map(), i.programs = c);
        var h = c.get(l);
        if (void 0 !== h) {
          if (i.currentProgram === h && i.lightsStateVersion === a) return Qt(t, o), h;
        } else o.uniforms = Mt.getUniforms(t), t.onBuild(n, o, S), t.onBeforeCompile(o, S), h = Mt.acquireProgram(o, l), c.set(l, h), i.uniforms = o.uniforms;
        var u = i.uniforms;
        (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (u.clippingPlanes = Et.uniform), Qt(t, o), i.needsLights = function (t) {
          return t.isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || t.isShaderMaterial && !0 === t.lights;
        }(t), i.lightsStateVersion = a, i.needsLights && (u.ambientLightColor.value = r.state.ambient, u.lightProbe.value = r.state.probe, u.directionalLights.value = r.state.directional, u.directionalLightShadows.value = r.state.directionalShadow, u.spotLights.value = r.state.spot, u.spotLightShadows.value = r.state.spotShadow, u.rectAreaLights.value = r.state.rectArea, u.ltc_1.value = r.state.rectAreaLTC1, u.ltc_2.value = r.state.rectAreaLTC2, u.pointLights.value = r.state.point, u.pointLightShadows.value = r.state.pointShadow, u.hemisphereLights.value = r.state.hemi, u.directionalShadowMap.value = r.state.directionalShadowMap, u.directionalShadowMatrix.value = r.state.directionalShadowMatrix, u.spotShadowMap.value = r.state.spotShadowMap, u.spotLightMatrix.value = r.state.spotLightMatrix, u.spotLightMap.value = r.state.spotLightMap, u.pointShadowMap.value = r.state.pointShadowMap, u.pointShadowMatrix.value = r.state.pointShadowMatrix);
        var d = h.getUniforms(),
          p = $s.seqWithValue(d.seq, u);
        return i.currentProgram = h, i.uniformsList = p, h;
      }
      function Qt(t, e) {
        var n = mt.get(t);
        n.outputColorSpace = e.outputColorSpace, n.instancing = e.instancing, n.instancingColor = e.instancingColor, n.skinning = e.skinning, n.morphTargets = e.morphTargets, n.morphNormals = e.morphNormals, n.morphColors = e.morphColors, n.morphTargetsCount = e.morphTargetsCount, n.numClippingPlanes = e.numClippingPlanes, n.numIntersection = e.numClipIntersection, n.vertexAlphas = e.vertexAlphas, n.vertexTangents = e.vertexTangents, n.toneMapping = e.toneMapping;
      }
      qt.setAnimationLoop(function (t) {
        Wt && Wt(t);
      }), "undefined" != typeof self && qt.setContext(self), this.setAnimationLoop = function (t) {
        Wt = t, zt.setAnimationLoop(t), null === t ? qt.stop() : qt.start();
      }, zt.addEventListener("sessionstart", Xt), zt.addEventListener("sessionend", jt), this.render = function (t, e) {
        if (void 0 !== e && !0 !== e.isCamera) return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        if (!0 === b) return;
        !0 === t.matrixWorldAutoUpdate && t.updateMatrixWorld(), null === e.parent && !0 === e.matrixWorldAutoUpdate && e.updateMatrixWorld(), !0 === zt.enabled && !0 === zt.isPresenting && (!0 === zt.cameraAutoUpdate && zt.updateCamera(e), e = zt.getCamera()), !0 === t.isScene && t.onBeforeRender(S, t, e, w), y = Tt.get(t, M.length), y.init(), M.push(y), st.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), et.setFromProjectionMatrix(st), it = this.localClippingEnabled, nt = Et.init(this.clippingPlanes, it), v = bt.get(t, x.length), v.init(), x.push(v), Yt(t, e, 0, S.sortObjects), v.finish(), !0 === S.sortObjects && v.sort(J, K), this.info.render.frame++, !0 === nt && Et.beginShadows();
        var n = y.state.shadowsArray;
        if (wt.render(n, t, e), !0 === nt && Et.endShadows(), !0 === this.info.autoReset && this.info.reset(), At.render(v, t), y.setupLights(S._useLegacyLights), e.isArrayCamera) {
          var _n117 = e.cameras;
          for (var _e134 = 0, _i109 = _n117.length; _e134 < _i109; _e134++) {
            var _i110 = _n117[_e134];
            Zt(v, t, _i110, _i110.viewport);
          }
        } else Zt(v, t, e);
        null !== w && (ft.updateMultisampleRenderTarget(w), ft.updateRenderTargetMipmap(w)), !0 === t.isScene && t.onAfterRender(S, t, e), It.resetDefaultState(), A = -1, R = null, M.pop(), y = M.length > 0 ? M[M.length - 1] : null, x.pop(), v = x.length > 0 ? x[x.length - 1] : null;
      }, this.getActiveCubeFace = function () {
        return T;
      }, this.getActiveMipmapLevel = function () {
        return E;
      }, this.getRenderTarget = function () {
        return w;
      }, this.setRenderTargetTextures = function (t, e, n) {
        mt.get(t.texture).__webglTexture = e, mt.get(t.depthTexture).__webglTexture = n;
        var i = mt.get(t);
        i.__hasExternalTextures = !0, i.__hasExternalTextures && (i.__autoAllocateDepthBuffer = void 0 === n, i.__autoAllocateDepthBuffer || !0 === ht.has("WEBGL_multisampled_render_to_texture") && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), i.__useRenderToTexture = !1));
      }, this.setRenderTargetFramebuffer = function (t, e) {
        var n = mt.get(t);
        n.__webglFramebuffer = e, n.__useDefaultFramebuffer = void 0 === e;
      }, this.setRenderTarget = function (t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        w = t, T = e, E = n;
        var i = !0,
          r = null,
          s = !1,
          a = !1;
        if (t) {
          var _o30 = mt.get(t);
          void 0 !== _o30.__useDefaultFramebuffer ? (dt.bindFramebuffer(Ot.FRAMEBUFFER, null), i = !1) : void 0 === _o30.__webglFramebuffer ? ft.setupRenderTarget(t) : _o30.__hasExternalTextures && ft.rebindTextures(t, mt.get(t.texture).__webglTexture, mt.get(t.depthTexture).__webglTexture);
          var _l13 = t.texture;
          (_l13.isData3DTexture || _l13.isDataArrayTexture || _l13.isCompressedArrayTexture) && (a = !0);
          var _c16 = mt.get(t).__webglFramebuffer;
          t.isWebGLCubeRenderTarget ? (r = Array.isArray(_c16[e]) ? _c16[e][n] : _c16[e], s = !0) : r = ut.isWebGL2 && t.samples > 0 && !1 === ft.useMultisampledRTT(t) ? mt.get(t).__webglMultisampledFramebuffer : Array.isArray(_c16) ? _c16[n] : _c16, C.copy(t.viewport), L.copy(t.scissor), D = t.scissorTest;
        } else C.copy($).multiplyScalar(Z).floor(), L.copy(Q).multiplyScalar(Z).floor(), D = tt;
        if (dt.bindFramebuffer(Ot.FRAMEBUFFER, r) && ut.drawBuffers && i && dt.drawBuffers(t, r), dt.viewport(C), dt.scissor(L), dt.setScissorTest(D), s) {
          var _i111 = mt.get(t.texture);
          Ot.framebufferTexture2D(Ot.FRAMEBUFFER, Ot.COLOR_ATTACHMENT0, Ot.TEXTURE_CUBE_MAP_POSITIVE_X + e, _i111.__webglTexture, n);
        } else if (a) {
          var _i112 = mt.get(t.texture),
            _r86 = e || 0;
          Ot.framebufferTextureLayer(Ot.FRAMEBUFFER, Ot.COLOR_ATTACHMENT0, _i112.__webglTexture, n || 0, _r86);
        }
        A = -1;
      }, this.readRenderTargetPixels = function (t, e, n, i, r, s, a) {
        if (!t || !t.isWebGLRenderTarget) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        var o = mt.get(t).__webglFramebuffer;
        if (t.isWebGLCubeRenderTarget && void 0 !== a && (o = o[a]), o) {
          dt.bindFramebuffer(Ot.FRAMEBUFFER, o);
          try {
            var _a43 = t.texture,
              _o31 = _a43.format,
              _l14 = _a43.type;
            if (_o31 !== G && Pt.convert(_o31) !== Ot.getParameter(Ot.IMPLEMENTATION_COLOR_READ_FORMAT)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            var _c17 = _l14 === F && (ht.has("EXT_color_buffer_half_float") || ut.isWebGL2 && ht.has("EXT_color_buffer_float"));
            if (!(_l14 === I || Pt.convert(_l14) === Ot.getParameter(Ot.IMPLEMENTATION_COLOR_READ_TYPE) || _l14 === O && (ut.isWebGL2 || ht.has("OES_texture_float") || ht.has("WEBGL_color_buffer_float")) || _c17)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            e >= 0 && e <= t.width - i && n >= 0 && n <= t.height - r && Ot.readPixels(e, n, i, r, Pt.convert(_o31), Pt.convert(_l14), s);
          } finally {
            var _t150 = null !== w ? mt.get(w).__webglFramebuffer : null;
            dt.bindFramebuffer(Ot.FRAMEBUFFER, _t150);
          }
        }
      }, this.copyFramebufferToTexture = function (t, e) {
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var i = Math.pow(2, -n),
          r = Math.floor(e.image.width * i),
          s = Math.floor(e.image.height * i);
        ft.setTexture2D(e, 0), Ot.copyTexSubImage2D(Ot.TEXTURE_2D, n, 0, 0, t.x, t.y, r, s), dt.unbindTexture();
      }, this.copyTextureToTexture = function (t, e, n) {
        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var r = e.image.width,
          s = e.image.height,
          a = Pt.convert(n.format),
          o = Pt.convert(n.type);
        ft.setTexture2D(n, 0), Ot.pixelStorei(Ot.UNPACK_FLIP_Y_WEBGL, n.flipY), Ot.pixelStorei(Ot.UNPACK_PREMULTIPLY_ALPHA_WEBGL, n.premultiplyAlpha), Ot.pixelStorei(Ot.UNPACK_ALIGNMENT, n.unpackAlignment), e.isDataTexture ? Ot.texSubImage2D(Ot.TEXTURE_2D, i, t.x, t.y, r, s, a, o, e.image.data) : e.isCompressedTexture ? Ot.compressedTexSubImage2D(Ot.TEXTURE_2D, i, t.x, t.y, e.mipmaps[0].width, e.mipmaps[0].height, a, e.mipmaps[0].data) : Ot.texSubImage2D(Ot.TEXTURE_2D, i, t.x, t.y, a, o, e.image), 0 === i && n.generateMipmaps && Ot.generateMipmap(Ot.TEXTURE_2D), dt.unbindTexture();
      }, this.copyTextureToTexture3D = function (t, e, n, i) {
        var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        if (S.isWebGL1Renderer) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        var s = t.max.x - t.min.x + 1,
          a = t.max.y - t.min.y + 1,
          o = t.max.z - t.min.z + 1,
          l = Pt.convert(i.format),
          c = Pt.convert(i.type);
        var h;
        if (i.isData3DTexture) ft.setTexture3D(i, 0), h = Ot.TEXTURE_3D;else {
          if (!i.isDataArrayTexture) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
          ft.setTexture2DArray(i, 0), h = Ot.TEXTURE_2D_ARRAY;
        }
        Ot.pixelStorei(Ot.UNPACK_FLIP_Y_WEBGL, i.flipY), Ot.pixelStorei(Ot.UNPACK_PREMULTIPLY_ALPHA_WEBGL, i.premultiplyAlpha), Ot.pixelStorei(Ot.UNPACK_ALIGNMENT, i.unpackAlignment);
        var u = Ot.getParameter(Ot.UNPACK_ROW_LENGTH),
          d = Ot.getParameter(Ot.UNPACK_IMAGE_HEIGHT),
          p = Ot.getParameter(Ot.UNPACK_SKIP_PIXELS),
          m = Ot.getParameter(Ot.UNPACK_SKIP_ROWS),
          f = Ot.getParameter(Ot.UNPACK_SKIP_IMAGES),
          g = n.isCompressedTexture ? n.mipmaps[0] : n.image;
        Ot.pixelStorei(Ot.UNPACK_ROW_LENGTH, g.width), Ot.pixelStorei(Ot.UNPACK_IMAGE_HEIGHT, g.height), Ot.pixelStorei(Ot.UNPACK_SKIP_PIXELS, t.min.x), Ot.pixelStorei(Ot.UNPACK_SKIP_ROWS, t.min.y), Ot.pixelStorei(Ot.UNPACK_SKIP_IMAGES, t.min.z), n.isDataTexture || n.isData3DTexture ? Ot.texSubImage3D(h, r, e.x, e.y, e.z, s, a, o, l, c, g.data) : n.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), Ot.compressedTexSubImage3D(h, r, e.x, e.y, e.z, s, a, o, l, g.data)) : Ot.texSubImage3D(h, r, e.x, e.y, e.z, s, a, o, l, c, g), Ot.pixelStorei(Ot.UNPACK_ROW_LENGTH, u), Ot.pixelStorei(Ot.UNPACK_IMAGE_HEIGHT, d), Ot.pixelStorei(Ot.UNPACK_SKIP_PIXELS, p), Ot.pixelStorei(Ot.UNPACK_SKIP_ROWS, m), Ot.pixelStorei(Ot.UNPACK_SKIP_IMAGES, f), 0 === r && i.generateMipmaps && Ot.generateMipmap(h), dt.unbindTexture();
      }, this.initTexture = function (t) {
        t.isCubeTexture ? ft.setTextureCube(t, 0) : t.isData3DTexture ? ft.setTexture3D(t, 0) : t.isDataArrayTexture || t.isCompressedArrayTexture ? ft.setTexture2DArray(t, 0) : ft.setTexture2D(t, 0), dt.unbindTexture();
      }, this.resetState = function () {
        T = 0, E = 0, w = null, dt.reset(), It.reset();
      }, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
        detail: this
      }));
    }
    _createClass(Xa, [{
      key: "coordinateSystem",
      get: function get() {
        return jt;
      }
    }, {
      key: "outputColorSpace",
      get: function get() {
        return this._outputColorSpace;
      },
      set: function set(t) {
        this._outputColorSpace = t;
        var e = this.getContext();
        e.drawingBufferColorSpace = t === Ot ? "display-p3" : "srgb", e.unpackColorSpace = be.workingColorSpace === Ft ? "display-p3" : "srgb";
      }
    }, {
      key: "physicallyCorrectLights",
      get: function get() {
        return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights;
      },
      set: function set(t) {
        console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !t;
      }
    }, {
      key: "outputEncoding",
      get: function get() {
        return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace === Dt ? It : Pt;
      },
      set: function set(t) {
        console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace = t === It ? Dt : Nt;
      }
    }, {
      key: "useLegacyLights",
      get: function get() {
        return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
      },
      set: function set(t) {
        console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = t;
      }
    }]);
    return Xa;
  }();
  var ja = /*#__PURE__*/function (_Xa) {
    _inherits(ja, _Xa);
    var _super29 = _createSuper(ja);
    function ja() {
      _classCallCheck(this, ja);
      return _super29.apply(this, arguments);
    }
    return _createClass(ja);
  }(Xa);
  ja.prototype.isWebGL1Renderer = !0;
  var qa = /*#__PURE__*/function () {
    function qa(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25e-5;
      _classCallCheck(this, qa);
      this.isFogExp2 = !0, this.name = "", this.color = new ai(t), this.density = e;
    }
    _createClass(qa, [{
      key: "clone",
      value: function clone() {
        return new qa(this.color, this.density);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          type: "FogExp2",
          name: this.name,
          color: this.color.getHex(),
          density: this.density
        };
      }
    }]);
    return qa;
  }();
  var Ya = /*#__PURE__*/function () {
    function Ya(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;
      _classCallCheck(this, Ya);
      this.isFog = !0, this.name = "", this.color = new ai(t), this.near = e, this.far = n;
    }
    _createClass(Ya, [{
      key: "clone",
      value: function clone() {
        return new Ya(this.color, this.near, this.far);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          type: "Fog",
          name: this.name,
          color: this.color.getHex(),
          near: this.near,
          far: this.far
        };
      }
    }]);
    return Ya;
  }();
  var Za = /*#__PURE__*/function (_Gn5) {
    _inherits(Za, _Gn5);
    var _super30 = _createSuper(Za);
    function Za() {
      var _this26;
      _classCallCheck(this, Za);
      _this26 = _super30.call(this), _this26.isScene = !0, _this26.type = "Scene", _this26.background = null, _this26.environment = null, _this26.fog = null, _this26.backgroundBlurriness = 0, _this26.backgroundIntensity = 1, _this26.overrideMaterial = null, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
        detail: _assertThisInitialized(_this26)
      }));
      return _this26;
    }
    _createClass(Za, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Za.prototype), "copy", this).call(this, t, e), null !== t.background && (this.background = t.background.clone()), null !== t.environment && (this.environment = t.environment.clone()), null !== t.fog && (this.fog = t.fog.clone()), this.backgroundBlurriness = t.backgroundBlurriness, this.backgroundIntensity = t.backgroundIntensity, null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()), this.matrixAutoUpdate = t.matrixAutoUpdate, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(Za.prototype), "toJSON", this).call(this, t);
        return null !== this.fog && (e.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (e.object.backgroundBlurriness = this.backgroundBlurriness), 1 !== this.backgroundIntensity && (e.object.backgroundIntensity = this.backgroundIntensity), e;
      }
    }]);
    return Za;
  }(Gn);
  var Ja = /*#__PURE__*/function () {
    function Ja(t, e) {
      _classCallCheck(this, Ja);
      this.isInterleavedBuffer = !0, this.array = t, this.stride = e, this.count = void 0 !== t ? t.length / e : 0, this.usage = kt, this.updateRange = {
        offset: 0,
        count: -1
      }, this.version = 0, this.uuid = Qt();
    }
    _createClass(Ja, [{
      key: "onUploadCallback",
      value: function onUploadCallback() {}
    }, {
      key: "needsUpdate",
      set: function set(t) {
        !0 === t && this.version++;
      }
    }, {
      key: "setUsage",
      value: function setUsage(t) {
        return this.usage = t, this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.array = new t.array.constructor(t.array), this.count = t.count, this.stride = t.stride, this.usage = t.usage, this;
      }
    }, {
      key: "copyAt",
      value: function copyAt(t, e, n) {
        t *= this.stride, n *= e.stride;
        for (var _i113 = 0, _r87 = this.stride; _i113 < _r87; _i113++) this.array[t + _i113] = e.array[n + _i113];
        return this;
      }
    }, {
      key: "set",
      value: function set(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.array.set(t, e), this;
      }
    }, {
      key: "clone",
      value: function clone(t) {
        void 0 === t.arrayBuffers && (t.arrayBuffers = {}), void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = Qt()), void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
        var e = new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),
          n = new this.constructor(e, this.stride);
        return n.setUsage(this.usage), n;
      }
    }, {
      key: "onUpload",
      value: function onUpload(t) {
        return this.onUploadCallback = t, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        return void 0 === t.arrayBuffers && (t.arrayBuffers = {}), void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = Qt()), void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
          uuid: this.uuid,
          buffer: this.array.buffer._uuid,
          type: this.array.constructor.name,
          stride: this.stride
        };
      }
    }]);
    return Ja;
  }();
  var Ka = new ze();
  var $a = /*#__PURE__*/function () {
    function $a(t, e, n) {
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
      _classCallCheck(this, $a);
      this.isInterleavedBufferAttribute = !0, this.name = "", this.data = t, this.itemSize = e, this.offset = n, this.normalized = i;
    }
    _createClass($a, [{
      key: "count",
      get: function get() {
        return this.data.count;
      }
    }, {
      key: "array",
      get: function get() {
        return this.data.array;
      }
    }, {
      key: "needsUpdate",
      set: function set(t) {
        this.data.needsUpdate = t;
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        for (var _e135 = 0, _n118 = this.data.count; _e135 < _n118; _e135++) Ka.fromBufferAttribute(this, _e135), Ka.applyMatrix4(t), this.setXYZ(_e135, Ka.x, Ka.y, Ka.z);
        return this;
      }
    }, {
      key: "applyNormalMatrix",
      value: function applyNormalMatrix(t) {
        for (var _e136 = 0, _n119 = this.count; _e136 < _n119; _e136++) Ka.fromBufferAttribute(this, _e136), Ka.applyNormalMatrix(t), this.setXYZ(_e136, Ka.x, Ka.y, Ka.z);
        return this;
      }
    }, {
      key: "transformDirection",
      value: function transformDirection(t) {
        for (var _e137 = 0, _n120 = this.count; _e137 < _n120; _e137++) Ka.fromBufferAttribute(this, _e137), Ka.transformDirection(t), this.setXYZ(_e137, Ka.x, Ka.y, Ka.z);
        return this;
      }
    }, {
      key: "setX",
      value: function setX(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.data.array[t * this.data.stride + this.offset] = e, this;
      }
    }, {
      key: "setY",
      value: function setY(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.data.array[t * this.data.stride + this.offset + 1] = e, this;
      }
    }, {
      key: "setZ",
      value: function setZ(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.data.array[t * this.data.stride + this.offset + 2] = e, this;
      }
    }, {
      key: "setW",
      value: function setW(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.data.array[t * this.data.stride + this.offset + 3] = e, this;
      }
    }, {
      key: "getX",
      value: function getX(t) {
        var e = this.data.array[t * this.data.stride + this.offset];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "getY",
      value: function getY(t) {
        var e = this.data.array[t * this.data.stride + this.offset + 1];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "getZ",
      value: function getZ(t) {
        var e = this.data.array[t * this.data.stride + this.offset + 2];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "getW",
      value: function getW(t) {
        var e = this.data.array[t * this.data.stride + this.offset + 3];
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setXY",
      value: function setXY(t, e, n) {
        return t = t * this.data.stride + this.offset, this.normalized && (e = oe(e, this.array), n = oe(n, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this;
      }
    }, {
      key: "setXYZ",
      value: function setXYZ(t, e, n, i) {
        return t = t * this.data.stride + this.offset, this.normalized && (e = oe(e, this.array), n = oe(n, this.array), i = oe(i, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = i, this;
      }
    }, {
      key: "setXYZW",
      value: function setXYZW(t, e, n, i, r) {
        return t = t * this.data.stride + this.offset, this.normalized && (e = oe(e, this.array), n = oe(n, this.array), i = oe(i, this.array), r = oe(r, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = i, this.data.array[t + 3] = r, this;
      }
    }, {
      key: "clone",
      value: function clone(t) {
        if (void 0 === t) {
          console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
          var _t151 = [];
          for (var _e138 = 0; _e138 < this.count; _e138++) {
            var _n121 = _e138 * this.data.stride + this.offset;
            for (var _e139 = 0; _e139 < this.itemSize; _e139++) _t151.push(this.data.array[_n121 + _e139]);
          }
          return new gi(new this.array.constructor(_t151), this.itemSize, this.normalized);
        }
        return void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}), void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.clone(t)), new $a(t.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        if (void 0 === t) {
          console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
          var _t152 = [];
          for (var _e140 = 0; _e140 < this.count; _e140++) {
            var _n122 = _e140 * this.data.stride + this.offset;
            for (var _e141 = 0; _e141 < this.itemSize; _e141++) _t152.push(this.data.array[_n122 + _e141]);
          }
          return {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: _t152,
            normalized: this.normalized
          };
        }
        return void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}), void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.toJSON(t)), {
          isInterleavedBufferAttribute: !0,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized
        };
      }
    }]);
    return $a;
  }();
  var Qa = /*#__PURE__*/function (_ei5) {
    _inherits(Qa, _ei5);
    var _super31 = _createSuper(Qa);
    function Qa(t) {
      var _this27;
      _classCallCheck(this, Qa);
      _this27 = _super31.call(this), _this27.isSpriteMaterial = !0, _this27.type = "SpriteMaterial", _this27.color = new ai(16777215), _this27.map = null, _this27.alphaMap = null, _this27.rotation = 0, _this27.sizeAttenuation = !0, _this27.transparent = !0, _this27.fog = !0, _this27.setValues(t);
      return _this27;
    }
    _createClass(Qa, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Qa.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.rotation = t.rotation, this.sizeAttenuation = t.sizeAttenuation, this.fog = t.fog, this;
      }
    }]);
    return Qa;
  }(ei);
  var to;
  var eo = new ze(),
    no = new ze(),
    io = new ze(),
    ro = new ce(),
    so = new ce(),
    ao = new gn(),
    oo = new ze(),
    lo = new ze(),
    co = new ze(),
    ho = new ce(),
    uo = new ce(),
    po = new ce();
  var mo = /*#__PURE__*/function (_Gn6) {
    _inherits(mo, _Gn6);
    var _super32 = _createSuper(mo);
    function mo() {
      var _this28;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Qa();
      _classCallCheck(this, mo);
      if (_this28 = _super32.call(this), _this28.isSprite = !0, _this28.type = "Sprite", void 0 === to) {
        to = new Ai();
        var _t153 = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]),
          _e142 = new Ja(_t153, 5);
        to.setIndex([0, 1, 2, 0, 2, 3]), to.setAttribute("position", new $a(_e142, 3, 0, !1)), to.setAttribute("uv", new $a(_e142, 2, 3, !1));
      }
      _this28.geometry = to, _this28.material = t, _this28.center = new ce(.5, .5);
      return _possibleConstructorReturn(_this28);
    }
    _createClass(mo, [{
      key: "raycast",
      value: function raycast(t, e) {
        null === t.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), no.setFromMatrixScale(this.matrixWorld), ao.copy(t.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld), io.setFromMatrixPosition(this.modelViewMatrix), t.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && no.multiplyScalar(-io.z);
        var n = this.material.rotation;
        var i, r;
        0 !== n && (r = Math.cos(n), i = Math.sin(n));
        var s = this.center;
        fo(oo.set(-.5, -.5, 0), io, s, no, i, r), fo(lo.set(.5, -.5, 0), io, s, no, i, r), fo(co.set(.5, .5, 0), io, s, no, i, r), ho.set(0, 0), uo.set(1, 0), po.set(1, 1);
        var a = t.ray.intersectTriangle(oo, lo, co, !1, eo);
        if (null === a && (fo(lo.set(-.5, .5, 0), io, s, no, i, r), uo.set(0, 1), a = t.ray.intersectTriangle(oo, co, lo, !1, eo), null === a)) return;
        var o = t.ray.origin.distanceTo(eo);
        o < t.near || o > t.far || e.push({
          distance: o,
          point: eo.clone(),
          uv: Qn.getInterpolation(eo, oo, lo, co, ho, uo, po, new ce()),
          face: null,
          object: this
        });
      }
    }, {
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(mo.prototype), "copy", this).call(this, t, e), void 0 !== t.center && this.center.copy(t.center), this.material = t.material, this;
      }
    }]);
    return mo;
  }(Gn);
  function fo(t, e, n, i, r, s) {
    ro.subVectors(t, n).addScalar(.5).multiply(i), void 0 !== r ? (so.x = s * ro.x - r * ro.y, so.y = r * ro.x + s * ro.y) : so.copy(ro), t.copy(e), t.x += so.x, t.y += so.y, t.applyMatrix4(ao);
  }
  var go = new ze(),
    _o = new ze();
  var vo = /*#__PURE__*/function (_Gn7) {
    _inherits(vo, _Gn7);
    var _super33 = _createSuper(vo);
    function vo() {
      var _this29;
      _classCallCheck(this, vo);
      _this29 = _super33.call(this), _this29._currentLevel = 0, _this29.type = "LOD", Object.defineProperties(_assertThisInitialized(_this29), {
        levels: {
          enumerable: !0,
          value: []
        },
        isLOD: {
          value: !0
        }
      }), _this29.autoUpdate = !0;
      return _this29;
    }
    _createClass(vo, [{
      key: "copy",
      value: function copy(t) {
        _get(_getPrototypeOf(vo.prototype), "copy", this).call(this, t, !1);
        var e = t.levels;
        for (var _t154 = 0, _n123 = e.length; _t154 < _n123; _t154++) {
          var _n124 = e[_t154];
          this.addLevel(_n124.object.clone(), _n124.distance, _n124.hysteresis);
        }
        return this.autoUpdate = t.autoUpdate, this;
      }
    }, {
      key: "addLevel",
      value: function addLevel(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        e = Math.abs(e);
        var i = this.levels;
        var r;
        for (r = 0; r < i.length && !(e < i[r].distance); r++);
        return i.splice(r, 0, {
          distance: e,
          hysteresis: n,
          object: t
        }), this.add(t), this;
      }
    }, {
      key: "getCurrentLevel",
      value: function getCurrentLevel() {
        return this._currentLevel;
      }
    }, {
      key: "getObjectForDistance",
      value: function getObjectForDistance(t) {
        var e = this.levels;
        if (e.length > 0) {
          var _n125, _i114;
          for (_n125 = 1, _i114 = e.length; _n125 < _i114; _n125++) {
            var _i115 = e[_n125].distance;
            if (e[_n125].object.visible && (_i115 -= _i115 * e[_n125].hysteresis), t < _i115) break;
          }
          return e[_n125 - 1].object;
        }
        return null;
      }
    }, {
      key: "raycast",
      value: function raycast(t, e) {
        if (this.levels.length > 0) {
          go.setFromMatrixPosition(this.matrixWorld);
          var _n126 = t.ray.origin.distanceTo(go);
          this.getObjectForDistance(_n126).raycast(t, e);
        }
      }
    }, {
      key: "update",
      value: function update(t) {
        var e = this.levels;
        if (e.length > 1) {
          go.setFromMatrixPosition(t.matrixWorld), _o.setFromMatrixPosition(this.matrixWorld);
          var _n127 = go.distanceTo(_o) / t.zoom;
          var _i116, _r88;
          for (e[0].object.visible = !0, _i116 = 1, _r88 = e.length; _i116 < _r88; _i116++) {
            var _t155 = e[_i116].distance;
            if (e[_i116].object.visible && (_t155 -= _t155 * e[_i116].hysteresis), !(_n127 >= _t155)) break;
            e[_i116 - 1].object.visible = !1, e[_i116].object.visible = !0;
          }
          for (this._currentLevel = _i116 - 1; _i116 < _r88; _i116++) e[_i116].object.visible = !1;
        }
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(vo.prototype), "toJSON", this).call(this, t);
        !1 === this.autoUpdate && (e.object.autoUpdate = !1), e.object.levels = [];
        var n = this.levels;
        for (var _t156 = 0, _i117 = n.length; _t156 < _i117; _t156++) {
          var _i118 = n[_t156];
          e.object.levels.push({
            object: _i118.object.uuid,
            distance: _i118.distance,
            hysteresis: _i118.hysteresis
          });
        }
        return e;
      }
    }]);
    return vo;
  }(Gn);
  var yo = new ze(),
    xo = new Ue(),
    Mo = new Ue(),
    So = new ze(),
    bo = new gn(),
    To = new ze(),
    Eo = new on(),
    wo = new gn(),
    Ao = new fn();
  var Ro = /*#__PURE__*/function (_Xi) {
    _inherits(Ro, _Xi);
    var _super34 = _createSuper(Ro);
    function Ro(t, e) {
      var _this30;
      _classCallCheck(this, Ro);
      _this30 = _super34.call(this, t, e), _this30.isSkinnedMesh = !0, _this30.type = "SkinnedMesh", _this30.bindMode = "attached", _this30.bindMatrix = new gn(), _this30.bindMatrixInverse = new gn(), _this30.boundingBox = null, _this30.boundingSphere = null;
      return _this30;
    }
    _createClass(Ro, [{
      key: "computeBoundingBox",
      value: function computeBoundingBox() {
        var t = this.geometry;
        null === this.boundingBox && (this.boundingBox = new Ve()), this.boundingBox.makeEmpty();
        var e = t.getAttribute("position");
        for (var _t157 = 0; _t157 < e.count; _t157++) To.fromBufferAttribute(e, _t157), this.applyBoneTransform(_t157, To), this.boundingBox.expandByPoint(To);
      }
    }, {
      key: "computeBoundingSphere",
      value: function computeBoundingSphere() {
        var t = this.geometry;
        null === this.boundingSphere && (this.boundingSphere = new on()), this.boundingSphere.makeEmpty();
        var e = t.getAttribute("position");
        for (var _t158 = 0; _t158 < e.count; _t158++) To.fromBufferAttribute(e, _t158), this.applyBoneTransform(_t158, To), this.boundingSphere.expandByPoint(To);
      }
    }, {
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Ro.prototype), "copy", this).call(this, t, e), this.bindMode = t.bindMode, this.bindMatrix.copy(t.bindMatrix), this.bindMatrixInverse.copy(t.bindMatrixInverse), this.skeleton = t.skeleton, null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()), null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()), this;
      }
    }, {
      key: "raycast",
      value: function raycast(t, e) {
        var n = this.material,
          i = this.matrixWorld;
        void 0 !== n && (null === this.boundingSphere && this.computeBoundingSphere(), Eo.copy(this.boundingSphere), Eo.applyMatrix4(i), !1 !== t.ray.intersectsSphere(Eo) && (wo.copy(i).invert(), Ao.copy(t.ray).applyMatrix4(wo), null !== this.boundingBox && !1 === Ao.intersectsBox(this.boundingBox) || this._computeIntersections(t, e, Ao)));
      }
    }, {
      key: "getVertexPosition",
      value: function getVertexPosition(t, e) {
        return _get(_getPrototypeOf(Ro.prototype), "getVertexPosition", this).call(this, t, e), this.applyBoneTransform(t, e), e;
      }
    }, {
      key: "bind",
      value: function bind(t, e) {
        this.skeleton = t, void 0 === e && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), e = this.matrixWorld), this.bindMatrix.copy(e), this.bindMatrixInverse.copy(e).invert();
      }
    }, {
      key: "pose",
      value: function pose() {
        this.skeleton.pose();
      }
    }, {
      key: "normalizeSkinWeights",
      value: function normalizeSkinWeights() {
        var t = new Ue(),
          e = this.geometry.attributes.skinWeight;
        for (var _n128 = 0, _i119 = e.count; _n128 < _i119; _n128++) {
          t.fromBufferAttribute(e, _n128);
          var _i120 = 1 / t.manhattanLength();
          _i120 !== 1 / 0 ? t.multiplyScalar(_i120) : t.set(1, 0, 0, 0), e.setXYZW(_n128, t.x, t.y, t.z, t.w);
        }
      }
    }, {
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        _get(_getPrototypeOf(Ro.prototype), "updateMatrixWorld", this).call(this, t), "attached" === this.bindMode ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : "detached" === this.bindMode ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
      }
    }, {
      key: "applyBoneTransform",
      value: function applyBoneTransform(t, e) {
        var n = this.skeleton,
          i = this.geometry;
        xo.fromBufferAttribute(i.attributes.skinIndex, t), Mo.fromBufferAttribute(i.attributes.skinWeight, t), yo.copy(e).applyMatrix4(this.bindMatrix), e.set(0, 0, 0);
        for (var _t159 = 0; _t159 < 4; _t159++) {
          var _i121 = Mo.getComponent(_t159);
          if (0 !== _i121) {
            var _r89 = xo.getComponent(_t159);
            bo.multiplyMatrices(n.bones[_r89].matrixWorld, n.boneInverses[_r89]), e.addScaledVector(So.copy(yo).applyMatrix4(bo), _i121);
          }
        }
        return e.applyMatrix4(this.bindMatrixInverse);
      }
    }, {
      key: "boneTransform",
      value: function boneTransform(t, e) {
        return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(t, e);
      }
    }]);
    return Ro;
  }(Xi);
  var Co = /*#__PURE__*/function (_Gn8) {
    _inherits(Co, _Gn8);
    var _super35 = _createSuper(Co);
    function Co() {
      var _this31;
      _classCallCheck(this, Co);
      _this31 = _super35.call(this), _this31.isBone = !0, _this31.type = "Bone";
      return _this31;
    }
    return _createClass(Co);
  }(Gn);
  var Lo = /*#__PURE__*/function (_Ie5) {
    _inherits(Lo, _Ie5);
    var _super36 = _createSuper(Lo);
    function Lo() {
      var _this32;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 ? arguments[3] : undefined;
      var r = arguments.length > 4 ? arguments[4] : undefined;
      var s = arguments.length > 5 ? arguments[5] : undefined;
      var a = arguments.length > 6 ? arguments[6] : undefined;
      var o = arguments.length > 7 ? arguments[7] : undefined;
      var l = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1003;
      var c = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1003;
      var h = arguments.length > 10 ? arguments[10] : undefined;
      var u = arguments.length > 11 ? arguments[11] : undefined;
      _classCallCheck(this, Lo);
      _this32 = _super36.call(this, null, s, a, o, l, c, i, r, h, u), _this32.isDataTexture = !0, _this32.image = {
        data: t,
        width: e,
        height: n
      }, _this32.generateMipmaps = !1, _this32.flipY = !1, _this32.unpackAlignment = 1;
      return _this32;
    }
    return _createClass(Lo);
  }(Ie);
  var Po = new gn(),
    Io = new gn();
  var Uo = /*#__PURE__*/function () {
    function Uo() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      _classCallCheck(this, Uo);
      this.uuid = Qt(), this.bones = t.slice(0), this.boneInverses = e, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.init();
    }
    _createClass(Uo, [{
      key: "init",
      value: function init() {
        var t = this.bones,
          e = this.boneInverses;
        if (this.boneMatrices = new Float32Array(16 * t.length), 0 === e.length) this.calculateInverses();else if (t.length !== e.length) {
          console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
          for (var _t160 = 0, _e143 = this.bones.length; _t160 < _e143; _t160++) this.boneInverses.push(new gn());
        }
      }
    }, {
      key: "calculateInverses",
      value: function calculateInverses() {
        this.boneInverses.length = 0;
        for (var _t161 = 0, _e144 = this.bones.length; _t161 < _e144; _t161++) {
          var _e145 = new gn();
          this.bones[_t161] && _e145.copy(this.bones[_t161].matrixWorld).invert(), this.boneInverses.push(_e145);
        }
      }
    }, {
      key: "pose",
      value: function pose() {
        for (var _t162 = 0, _e146 = this.bones.length; _t162 < _e146; _t162++) {
          var _e147 = this.bones[_t162];
          _e147 && _e147.matrixWorld.copy(this.boneInverses[_t162]).invert();
        }
        for (var _t163 = 0, _e148 = this.bones.length; _t163 < _e148; _t163++) {
          var _e149 = this.bones[_t163];
          _e149 && (_e149.parent && _e149.parent.isBone ? (_e149.matrix.copy(_e149.parent.matrixWorld).invert(), _e149.matrix.multiply(_e149.matrixWorld)) : _e149.matrix.copy(_e149.matrixWorld), _e149.matrix.decompose(_e149.position, _e149.quaternion, _e149.scale));
        }
      }
    }, {
      key: "update",
      value: function update() {
        var t = this.bones,
          e = this.boneInverses,
          n = this.boneMatrices,
          i = this.boneTexture;
        for (var _i122 = 0, _r90 = t.length; _i122 < _r90; _i122++) {
          var _r91 = t[_i122] ? t[_i122].matrixWorld : Io;
          Po.multiplyMatrices(_r91, e[_i122]), Po.toArray(n, 16 * _i122);
        }
        null !== i && (i.needsUpdate = !0);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new Uo(this.bones, this.boneInverses);
      }
    }, {
      key: "computeBoneTexture",
      value: function computeBoneTexture() {
        var t = Math.sqrt(4 * this.bones.length);
        t = re(t), t = Math.max(t, 4);
        var e = new Float32Array(t * t * 4);
        e.set(this.boneMatrices);
        var n = new Lo(e, t, t, G, O);
        return n.needsUpdate = !0, this.boneMatrices = e, this.boneTexture = n, this.boneTextureSize = t, this;
      }
    }, {
      key: "getBoneByName",
      value: function getBoneByName(t) {
        for (var _e150 = 0, _n129 = this.bones.length; _e150 < _n129; _e150++) {
          var _n130 = this.bones[_e150];
          if (_n130.name === t) return _n130;
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        null !== this.boneTexture && (this.boneTexture.dispose(), this.boneTexture = null);
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t, e) {
        this.uuid = t.uuid;
        for (var _n131 = 0, _i123 = t.bones.length; _n131 < _i123; _n131++) {
          var _i124 = t.bones[_n131];
          var _r92 = e[_i124];
          void 0 === _r92 && (console.warn("THREE.Skeleton: No bone found with UUID:", _i124), _r92 = new Co()), this.bones.push(_r92), this.boneInverses.push(new gn().fromArray(t.boneInverses[_n131]));
        }
        return this.init(), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = {
          metadata: {
            version: 4.6,
            type: "Skeleton",
            generator: "Skeleton.toJSON"
          },
          bones: [],
          boneInverses: []
        };
        t.uuid = this.uuid;
        var e = this.bones,
          n = this.boneInverses;
        for (var _i125 = 0, _r93 = e.length; _i125 < _r93; _i125++) {
          var _r94 = e[_i125];
          t.bones.push(_r94.uuid);
          var _s51 = n[_i125];
          t.boneInverses.push(_s51.toArray());
        }
        return t;
      }
    }]);
    return Uo;
  }();
  var Do = /*#__PURE__*/function (_gi4) {
    _inherits(Do, _gi4);
    var _super37 = _createSuper(Do);
    function Do(t, e, n) {
      var _this33;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      _classCallCheck(this, Do);
      _this33 = _super37.call(this, t, e, n), _this33.isInstancedBufferAttribute = !0, _this33.meshPerAttribute = i;
      return _this33;
    }
    _createClass(Do, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Do.prototype), "copy", this).call(this, t), this.meshPerAttribute = t.meshPerAttribute, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Do.prototype), "toJSON", this).call(this);
        return t.meshPerAttribute = this.meshPerAttribute, t.isInstancedBufferAttribute = !0, t;
      }
    }]);
    return Do;
  }(gi);
  var No = new gn(),
    Oo = new gn(),
    Fo = [],
    Bo = new Ve(),
    zo = new gn(),
    Ho = new Xi(),
    Go = new on();
  var Vo = /*#__PURE__*/function (_Xi2) {
    _inherits(Vo, _Xi2);
    var _super38 = _createSuper(Vo);
    function Vo(t, e, n) {
      var _this34;
      _classCallCheck(this, Vo);
      _this34 = _super38.call(this, t, e), _this34.isInstancedMesh = !0, _this34.instanceMatrix = new Do(new Float32Array(16 * n), 16), _this34.instanceColor = null, _this34.count = n, _this34.boundingBox = null, _this34.boundingSphere = null;
      for (var _t164 = 0; _t164 < n; _t164++) _this34.setMatrixAt(_t164, zo);
      return _this34;
    }
    _createClass(Vo, [{
      key: "computeBoundingBox",
      value: function computeBoundingBox() {
        var t = this.geometry,
          e = this.count;
        null === this.boundingBox && (this.boundingBox = new Ve()), null === t.boundingBox && t.computeBoundingBox(), this.boundingBox.makeEmpty();
        for (var _n132 = 0; _n132 < e; _n132++) this.getMatrixAt(_n132, No), Bo.copy(t.boundingBox).applyMatrix4(No), this.boundingBox.union(Bo);
      }
    }, {
      key: "computeBoundingSphere",
      value: function computeBoundingSphere() {
        var t = this.geometry,
          e = this.count;
        null === this.boundingSphere && (this.boundingSphere = new on()), null === t.boundingSphere && t.computeBoundingSphere(), this.boundingSphere.makeEmpty();
        for (var _n133 = 0; _n133 < e; _n133++) this.getMatrixAt(_n133, No), Go.copy(t.boundingSphere).applyMatrix4(No), this.boundingSphere.union(Go);
      }
    }, {
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Vo.prototype), "copy", this).call(this, t, e), this.instanceMatrix.copy(t.instanceMatrix), null !== t.instanceColor && (this.instanceColor = t.instanceColor.clone()), this.count = t.count, null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()), null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()), this;
      }
    }, {
      key: "getColorAt",
      value: function getColorAt(t, e) {
        e.fromArray(this.instanceColor.array, 3 * t);
      }
    }, {
      key: "getMatrixAt",
      value: function getMatrixAt(t, e) {
        e.fromArray(this.instanceMatrix.array, 16 * t);
      }
    }, {
      key: "raycast",
      value: function raycast(t, e) {
        var n = this.matrixWorld,
          i = this.count;
        if (Ho.geometry = this.geometry, Ho.material = this.material, void 0 !== Ho.material && (null === this.boundingSphere && this.computeBoundingSphere(), Go.copy(this.boundingSphere), Go.applyMatrix4(n), !1 !== t.ray.intersectsSphere(Go))) for (var _r95 = 0; _r95 < i; _r95++) {
          this.getMatrixAt(_r95, No), Oo.multiplyMatrices(n, No), Ho.matrixWorld = Oo, Ho.raycast(t, Fo);
          for (var _t165 = 0, _n134 = Fo.length; _t165 < _n134; _t165++) {
            var _n135 = Fo[_t165];
            _n135.instanceId = _r95, _n135.object = this, e.push(_n135);
          }
          Fo.length = 0;
        }
      }
    }, {
      key: "setColorAt",
      value: function setColorAt(t, e) {
        null === this.instanceColor && (this.instanceColor = new Do(new Float32Array(3 * this.instanceMatrix.count), 3)), e.toArray(this.instanceColor.array, 3 * t);
      }
    }, {
      key: "setMatrixAt",
      value: function setMatrixAt(t, e) {
        e.toArray(this.instanceMatrix.array, 16 * t);
      }
    }, {
      key: "updateMorphTargets",
      value: function updateMorphTargets() {}
    }, {
      key: "dispose",
      value: function dispose() {
        this.dispatchEvent({
          type: "dispose"
        });
      }
    }]);
    return Vo;
  }(Xi);
  var ko = /*#__PURE__*/function (_ei6) {
    _inherits(ko, _ei6);
    var _super39 = _createSuper(ko);
    function ko(t) {
      var _this35;
      _classCallCheck(this, ko);
      _this35 = _super39.call(this), _this35.isLineBasicMaterial = !0, _this35.type = "LineBasicMaterial", _this35.color = new ai(16777215), _this35.map = null, _this35.linewidth = 1, _this35.linecap = "round", _this35.linejoin = "round", _this35.fog = !0, _this35.setValues(t);
      return _this35;
    }
    _createClass(ko, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(ko.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.linewidth = t.linewidth, this.linecap = t.linecap, this.linejoin = t.linejoin, this.fog = t.fog, this;
      }
    }]);
    return ko;
  }(ei);
  var Wo = new ze(),
    Xo = new ze(),
    jo = new gn(),
    qo = new fn(),
    Yo = new on();
  var Zo = /*#__PURE__*/function (_Gn9) {
    _inherits(Zo, _Gn9);
    var _super40 = _createSuper(Zo);
    function Zo() {
      var _this36;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ai();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ko();
      _classCallCheck(this, Zo);
      _this36 = _super40.call(this), _this36.isLine = !0, _this36.type = "Line", _this36.geometry = t, _this36.material = e, _this36.updateMorphTargets();
      return _this36;
    }
    _createClass(Zo, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Zo.prototype), "copy", this).call(this, t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
      }
    }, {
      key: "computeLineDistances",
      value: function computeLineDistances() {
        var t = this.geometry;
        if (null === t.index) {
          var _e151 = t.attributes.position,
            _n136 = [0];
          for (var _t166 = 1, _i126 = _e151.count; _t166 < _i126; _t166++) Wo.fromBufferAttribute(_e151, _t166 - 1), Xo.fromBufferAttribute(_e151, _t166), _n136[_t166] = _n136[_t166 - 1], _n136[_t166] += Wo.distanceTo(Xo);
          t.setAttribute("lineDistance", new yi(_n136, 1));
        } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
      }
    }, {
      key: "raycast",
      value: function raycast(t, e) {
        var n = this.geometry,
          i = this.matrixWorld,
          r = t.params.Line.threshold,
          s = n.drawRange;
        if (null === n.boundingSphere && n.computeBoundingSphere(), Yo.copy(n.boundingSphere), Yo.applyMatrix4(i), Yo.radius += r, !1 === t.ray.intersectsSphere(Yo)) return;
        jo.copy(i).invert(), qo.copy(t.ray).applyMatrix4(jo);
        var a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3),
          o = a * a,
          l = new ze(),
          c = new ze(),
          h = new ze(),
          u = new ze(),
          d = this.isLineSegments ? 2 : 1,
          p = n.index,
          m = n.attributes.position;
        if (null !== p) {
          for (var _n137 = Math.max(0, s.start), _i127 = Math.min(p.count, s.start + s.count) - 1; _n137 < _i127; _n137 += d) {
            var _i128 = p.getX(_n137),
              _r96 = p.getX(_n137 + 1);
            l.fromBufferAttribute(m, _i128), c.fromBufferAttribute(m, _r96);
            if (qo.distanceSqToSegment(l, c, u, h) > o) continue;
            u.applyMatrix4(this.matrixWorld);
            var _s52 = t.ray.origin.distanceTo(u);
            _s52 < t.near || _s52 > t.far || e.push({
              distance: _s52,
              point: h.clone().applyMatrix4(this.matrixWorld),
              index: _n137,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        } else {
          for (var _n138 = Math.max(0, s.start), _i129 = Math.min(m.count, s.start + s.count) - 1; _n138 < _i129; _n138 += d) {
            l.fromBufferAttribute(m, _n138), c.fromBufferAttribute(m, _n138 + 1);
            if (qo.distanceSqToSegment(l, c, u, h) > o) continue;
            u.applyMatrix4(this.matrixWorld);
            var _i130 = t.ray.origin.distanceTo(u);
            _i130 < t.near || _i130 > t.far || e.push({
              distance: _i130,
              point: h.clone().applyMatrix4(this.matrixWorld),
              index: _n138,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        }
      }
    }, {
      key: "updateMorphTargets",
      value: function updateMorphTargets() {
        var t = this.geometry.morphAttributes,
          e = Object.keys(t);
        if (e.length > 0) {
          var _n139 = t[e[0]];
          if (void 0 !== _n139) {
            this.morphTargetInfluences = [], this.morphTargetDictionary = {};
            for (var _t167 = 0, _e152 = _n139.length; _t167 < _e152; _t167++) {
              var _e153 = _n139[_t167].name || String(_t167);
              this.morphTargetInfluences.push(0), this.morphTargetDictionary[_e153] = _t167;
            }
          }
        }
      }
    }]);
    return Zo;
  }(Gn);
  var Jo = new ze(),
    Ko = new ze();
  var $o = /*#__PURE__*/function (_Zo) {
    _inherits($o, _Zo);
    var _super41 = _createSuper($o);
    function $o(t, e) {
      var _this37;
      _classCallCheck(this, $o);
      _this37 = _super41.call(this, t, e), _this37.isLineSegments = !0, _this37.type = "LineSegments";
      return _this37;
    }
    _createClass($o, [{
      key: "computeLineDistances",
      value: function computeLineDistances() {
        var t = this.geometry;
        if (null === t.index) {
          var _e154 = t.attributes.position,
            _n140 = [];
          for (var _t168 = 0, _i131 = _e154.count; _t168 < _i131; _t168 += 2) Jo.fromBufferAttribute(_e154, _t168), Ko.fromBufferAttribute(_e154, _t168 + 1), _n140[_t168] = 0 === _t168 ? 0 : _n140[_t168 - 1], _n140[_t168 + 1] = _n140[_t168] + Jo.distanceTo(Ko);
          t.setAttribute("lineDistance", new yi(_n140, 1));
        } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
      }
    }]);
    return $o;
  }(Zo);
  var Qo = /*#__PURE__*/function (_Zo2) {
    _inherits(Qo, _Zo2);
    var _super42 = _createSuper(Qo);
    function Qo(t, e) {
      var _this38;
      _classCallCheck(this, Qo);
      _this38 = _super42.call(this, t, e), _this38.isLineLoop = !0, _this38.type = "LineLoop";
      return _this38;
    }
    return _createClass(Qo);
  }(Zo);
  var tl = /*#__PURE__*/function (_ei7) {
    _inherits(tl, _ei7);
    var _super43 = _createSuper(tl);
    function tl(t) {
      var _this39;
      _classCallCheck(this, tl);
      _this39 = _super43.call(this), _this39.isPointsMaterial = !0, _this39.type = "PointsMaterial", _this39.color = new ai(16777215), _this39.map = null, _this39.alphaMap = null, _this39.size = 1, _this39.sizeAttenuation = !0, _this39.fog = !0, _this39.setValues(t);
      return _this39;
    }
    _createClass(tl, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(tl.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.size = t.size, this.sizeAttenuation = t.sizeAttenuation, this.fog = t.fog, this;
      }
    }]);
    return tl;
  }(ei);
  var el = new gn(),
    nl = new fn(),
    il = new on(),
    rl = new ze();
  var sl = /*#__PURE__*/function (_Gn10) {
    _inherits(sl, _Gn10);
    var _super44 = _createSuper(sl);
    function sl() {
      var _this40;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ai();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new tl();
      _classCallCheck(this, sl);
      _this40 = _super44.call(this), _this40.isPoints = !0, _this40.type = "Points", _this40.geometry = t, _this40.material = e, _this40.updateMorphTargets();
      return _this40;
    }
    _createClass(sl, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(sl.prototype), "copy", this).call(this, t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
      }
    }, {
      key: "raycast",
      value: function raycast(t, e) {
        var n = this.geometry,
          i = this.matrixWorld,
          r = t.params.Points.threshold,
          s = n.drawRange;
        if (null === n.boundingSphere && n.computeBoundingSphere(), il.copy(n.boundingSphere), il.applyMatrix4(i), il.radius += r, !1 === t.ray.intersectsSphere(il)) return;
        el.copy(i).invert(), nl.copy(t.ray).applyMatrix4(el);
        var a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3),
          o = a * a,
          l = n.index,
          c = n.attributes.position;
        if (null !== l) {
          for (var _n141 = Math.max(0, s.start), _r97 = Math.min(l.count, s.start + s.count); _n141 < _r97; _n141++) {
            var _r98 = l.getX(_n141);
            rl.fromBufferAttribute(c, _r98), al(rl, _r98, o, i, t, e, this);
          }
        } else {
          for (var _n142 = Math.max(0, s.start), _r99 = Math.min(c.count, s.start + s.count); _n142 < _r99; _n142++) rl.fromBufferAttribute(c, _n142), al(rl, _n142, o, i, t, e, this);
        }
      }
    }, {
      key: "updateMorphTargets",
      value: function updateMorphTargets() {
        var t = this.geometry.morphAttributes,
          e = Object.keys(t);
        if (e.length > 0) {
          var _n143 = t[e[0]];
          if (void 0 !== _n143) {
            this.morphTargetInfluences = [], this.morphTargetDictionary = {};
            for (var _t169 = 0, _e155 = _n143.length; _t169 < _e155; _t169++) {
              var _e156 = _n143[_t169].name || String(_t169);
              this.morphTargetInfluences.push(0), this.morphTargetDictionary[_e156] = _t169;
            }
          }
        }
      }
    }]);
    return sl;
  }(Gn);
  function al(t, e, n, i, r, s, a) {
    var o = nl.distanceSqToPoint(t);
    if (o < n) {
      var _n144 = new ze();
      nl.closestPointToPoint(t, _n144), _n144.applyMatrix4(i);
      var _l15 = r.ray.origin.distanceTo(_n144);
      if (_l15 < r.near || _l15 > r.far) return;
      s.push({
        distance: _l15,
        distanceToRay: Math.sqrt(o),
        point: _n144,
        index: e,
        face: null,
        object: a
      });
    }
  }
  var ol = /*#__PURE__*/function (_Ie6) {
    _inherits(ol, _Ie6);
    var _super45 = _createSuper(ol);
    function ol(t, e, n, i, r, s, a, o, l, c, h, u) {
      var _this41;
      _classCallCheck(this, ol);
      _this41 = _super45.call(this, null, s, a, o, l, c, i, r, h, u), _this41.isCompressedTexture = !0, _this41.image = {
        width: e,
        height: n
      }, _this41.mipmaps = t, _this41.flipY = !1, _this41.generateMipmaps = !1;
      return _this41;
    }
    return _createClass(ol);
  }(Ie);
  var ll = /*#__PURE__*/function () {
    function ll() {
      _classCallCheck(this, ll);
      this.type = "Curve", this.arcLengthDivisions = 200;
    }
    _createClass(ll, [{
      key: "getPoint",
      value: function getPoint() {
        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
      }
    }, {
      key: "getPointAt",
      value: function getPointAt(t, e) {
        var n = this.getUtoTmapping(t);
        return this.getPoint(n, e);
      }
    }, {
      key: "getPoints",
      value: function getPoints() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
        var e = [];
        for (var _n145 = 0; _n145 <= t; _n145++) e.push(this.getPoint(_n145 / t));
        return e;
      }
    }, {
      key: "getSpacedPoints",
      value: function getSpacedPoints() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
        var e = [];
        for (var _n146 = 0; _n146 <= t; _n146++) e.push(this.getPointAt(_n146 / t));
        return e;
      }
    }, {
      key: "getLength",
      value: function getLength() {
        var t = this.getLengths();
        return t[t.length - 1];
      }
    }, {
      key: "getLengths",
      value: function getLengths() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.arcLengthDivisions;
        if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = !1;
        var e = [];
        var n,
          i = this.getPoint(0),
          r = 0;
        e.push(0);
        for (var _s53 = 1; _s53 <= t; _s53++) n = this.getPoint(_s53 / t), r += n.distanceTo(i), e.push(r), i = n;
        return this.cacheArcLengths = e, e;
      }
    }, {
      key: "updateArcLengths",
      value: function updateArcLengths() {
        this.needsUpdate = !0, this.getLengths();
      }
    }, {
      key: "getUtoTmapping",
      value: function getUtoTmapping(t, e) {
        var n = this.getLengths();
        var i = 0;
        var r = n.length;
        var s;
        s = e || t * n[r - 1];
        var a,
          o = 0,
          l = r - 1;
        for (; o <= l;) if (i = Math.floor(o + (l - o) / 2), a = n[i] - s, a < 0) o = i + 1;else {
          if (!(a > 0)) {
            l = i;
            break;
          }
          l = i - 1;
        }
        if (i = l, n[i] === s) return i / (r - 1);
        var c = n[i];
        return (i + (s - c) / (n[i + 1] - c)) / (r - 1);
      }
    }, {
      key: "getTangent",
      value: function getTangent(t, e) {
        var n = 1e-4;
        var i = t - n,
          r = t + n;
        i < 0 && (i = 0), r > 1 && (r = 1);
        var s = this.getPoint(i),
          a = this.getPoint(r),
          o = e || (s.isVector2 ? new ce() : new ze());
        return o.copy(a).sub(s).normalize(), o;
      }
    }, {
      key: "getTangentAt",
      value: function getTangentAt(t, e) {
        var n = this.getUtoTmapping(t);
        return this.getTangent(n, e);
      }
    }, {
      key: "computeFrenetFrames",
      value: function computeFrenetFrames(t, e) {
        var n = new ze(),
          i = [],
          r = [],
          s = [],
          a = new ze(),
          o = new gn();
        for (var _e157 = 0; _e157 <= t; _e157++) {
          var _n147 = _e157 / t;
          i[_e157] = this.getTangentAt(_n147, new ze());
        }
        r[0] = new ze(), s[0] = new ze();
        var l = Number.MAX_VALUE;
        var c = Math.abs(i[0].x),
          h = Math.abs(i[0].y),
          u = Math.abs(i[0].z);
        c <= l && (l = c, n.set(1, 0, 0)), h <= l && (l = h, n.set(0, 1, 0)), u <= l && n.set(0, 0, 1), a.crossVectors(i[0], n).normalize(), r[0].crossVectors(i[0], a), s[0].crossVectors(i[0], r[0]);
        for (var _e158 = 1; _e158 <= t; _e158++) {
          if (r[_e158] = r[_e158 - 1].clone(), s[_e158] = s[_e158 - 1].clone(), a.crossVectors(i[_e158 - 1], i[_e158]), a.length() > Number.EPSILON) {
            a.normalize();
            var _t170 = Math.acos(te(i[_e158 - 1].dot(i[_e158]), -1, 1));
            r[_e158].applyMatrix4(o.makeRotationAxis(a, _t170));
          }
          s[_e158].crossVectors(i[_e158], r[_e158]);
        }
        if (!0 === e) {
          var _e159 = Math.acos(te(r[0].dot(r[t]), -1, 1));
          _e159 /= t, i[0].dot(a.crossVectors(r[0], r[t])) > 0 && (_e159 = -_e159);
          for (var _n148 = 1; _n148 <= t; _n148++) r[_n148].applyMatrix4(o.makeRotationAxis(i[_n148], _e159 * _n148)), s[_n148].crossVectors(i[_n148], r[_n148]);
        }
        return {
          tangents: i,
          normals: r,
          binormals: s
        };
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.arcLengthDivisions = t.arcLengthDivisions, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = {
          metadata: {
            version: 4.6,
            type: "Curve",
            generator: "Curve.toJSON"
          }
        };
        return t.arcLengthDivisions = this.arcLengthDivisions, t.type = this.type, t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return this.arcLengthDivisions = t.arcLengthDivisions, this;
      }
    }]);
    return ll;
  }();
  var cl = /*#__PURE__*/function (_ll) {
    _inherits(cl, _ll);
    var _super46 = _createSuper(cl);
    function cl() {
      var _this42;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2 * Math.PI;
      var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : !1;
      var o = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      _classCallCheck(this, cl);
      _this42 = _super46.call(this), _this42.isEllipseCurve = !0, _this42.type = "EllipseCurve", _this42.aX = t, _this42.aY = e, _this42.xRadius = n, _this42.yRadius = i, _this42.aStartAngle = r, _this42.aEndAngle = s, _this42.aClockwise = a, _this42.aRotation = o;
      return _this42;
    }
    _createClass(cl, [{
      key: "getPoint",
      value: function getPoint(t, e) {
        var n = e || new ce(),
          i = 2 * Math.PI;
        var r = this.aEndAngle - this.aStartAngle;
        var s = Math.abs(r) < Number.EPSILON;
        for (; r < 0;) r += i;
        for (; r > i;) r -= i;
        r < Number.EPSILON && (r = s ? 0 : i), !0 !== this.aClockwise || s || (r === i ? r = -i : r -= i);
        var a = this.aStartAngle + t * r;
        var o = this.aX + this.xRadius * Math.cos(a),
          l = this.aY + this.yRadius * Math.sin(a);
        if (0 !== this.aRotation) {
          var _t171 = Math.cos(this.aRotation),
            _e160 = Math.sin(this.aRotation),
            _n149 = o - this.aX,
            _i132 = l - this.aY;
          o = _n149 * _t171 - _i132 * _e160 + this.aX, l = _n149 * _e160 + _i132 * _t171 + this.aY;
        }
        return n.set(o, l);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(cl.prototype), "copy", this).call(this, t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(cl.prototype), "toJSON", this).call(this);
        return t.aX = this.aX, t.aY = this.aY, t.xRadius = this.xRadius, t.yRadius = this.yRadius, t.aStartAngle = this.aStartAngle, t.aEndAngle = this.aEndAngle, t.aClockwise = this.aClockwise, t.aRotation = this.aRotation, t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(cl.prototype), "fromJSON", this).call(this, t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
      }
    }]);
    return cl;
  }(ll);
  var hl = /*#__PURE__*/function (_cl) {
    _inherits(hl, _cl);
    var _super47 = _createSuper(hl);
    function hl(t, e, n, i, r, s) {
      var _this43;
      _classCallCheck(this, hl);
      _this43 = _super47.call(this, t, e, n, n, i, r, s), _this43.isArcCurve = !0, _this43.type = "ArcCurve";
      return _this43;
    }
    return _createClass(hl);
  }(cl);
  function ul() {
    var t = 0,
      e = 0,
      n = 0,
      i = 0;
    function r(r, s, a, o) {
      t = r, e = a, n = -3 * r + 3 * s - 2 * a - o, i = 2 * r - 2 * s + a + o;
    }
    return {
      initCatmullRom: function initCatmullRom(t, e, n, i, s) {
        r(e, n, s * (n - t), s * (i - e));
      },
      initNonuniformCatmullRom: function initNonuniformCatmullRom(t, e, n, i, s, a, o) {
        var l = (e - t) / s - (n - t) / (s + a) + (n - e) / a,
          c = (n - e) / a - (i - e) / (a + o) + (i - n) / o;
        l *= a, c *= a, r(e, n, l, c);
      },
      calc: function calc(r) {
        var s = r * r;
        return t + e * r + n * s + i * (s * r);
      }
    };
  }
  var dl = new ze(),
    pl = new ul(),
    ml = new ul(),
    fl = new ul();
  var gl = /*#__PURE__*/function (_ll2) {
    _inherits(gl, _ll2);
    var _super48 = _createSuper(gl);
    function gl() {
      var _this44;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "centripetal";
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : .5;
      _classCallCheck(this, gl);
      _this44 = _super48.call(this), _this44.isCatmullRomCurve3 = !0, _this44.type = "CatmullRomCurve3", _this44.points = t, _this44.closed = e, _this44.curveType = n, _this44.tension = i;
      return _this44;
    }
    _createClass(gl, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
        var n = e,
          i = this.points,
          r = i.length,
          s = (r - (this.closed ? 0 : 1)) * t;
        var a,
          o,
          l = Math.floor(s),
          c = s - l;
        this.closed ? l += l > 0 ? 0 : (Math.floor(Math.abs(l) / r) + 1) * r : 0 === c && l === r - 1 && (l = r - 2, c = 1), this.closed || l > 0 ? a = i[(l - 1) % r] : (dl.subVectors(i[0], i[1]).add(i[0]), a = dl);
        var h = i[l % r],
          u = i[(l + 1) % r];
        if (this.closed || l + 2 < r ? o = i[(l + 2) % r] : (dl.subVectors(i[r - 1], i[r - 2]).add(i[r - 1]), o = dl), "centripetal" === this.curveType || "chordal" === this.curveType) {
          var _t172 = "chordal" === this.curveType ? .5 : .25;
          var _e161 = Math.pow(a.distanceToSquared(h), _t172),
            _n150 = Math.pow(h.distanceToSquared(u), _t172),
            _i133 = Math.pow(u.distanceToSquared(o), _t172);
          _n150 < 1e-4 && (_n150 = 1), _e161 < 1e-4 && (_e161 = _n150), _i133 < 1e-4 && (_i133 = _n150), pl.initNonuniformCatmullRom(a.x, h.x, u.x, o.x, _e161, _n150, _i133), ml.initNonuniformCatmullRom(a.y, h.y, u.y, o.y, _e161, _n150, _i133), fl.initNonuniformCatmullRom(a.z, h.z, u.z, o.z, _e161, _n150, _i133);
        } else "catmullrom" === this.curveType && (pl.initCatmullRom(a.x, h.x, u.x, o.x, this.tension), ml.initCatmullRom(a.y, h.y, u.y, o.y, this.tension), fl.initCatmullRom(a.z, h.z, u.z, o.z, this.tension));
        return n.set(pl.calc(c), ml.calc(c), fl.calc(c)), n;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        _get(_getPrototypeOf(gl.prototype), "copy", this).call(this, t), this.points = [];
        for (var _e162 = 0, _n151 = t.points.length; _e162 < _n151; _e162++) {
          var _n152 = t.points[_e162];
          this.points.push(_n152.clone());
        }
        return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(gl.prototype), "toJSON", this).call(this);
        t.points = [];
        for (var _e163 = 0, _n153 = this.points.length; _e163 < _n153; _e163++) {
          var _n154 = this.points[_e163];
          t.points.push(_n154.toArray());
        }
        return t.closed = this.closed, t.curveType = this.curveType, t.tension = this.tension, t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        _get(_getPrototypeOf(gl.prototype), "fromJSON", this).call(this, t), this.points = [];
        for (var _e164 = 0, _n155 = t.points.length; _e164 < _n155; _e164++) {
          var _n156 = t.points[_e164];
          this.points.push(new ze().fromArray(_n156));
        }
        return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
      }
    }]);
    return gl;
  }(ll);
  function _l(t, e, n, i, r) {
    var s = .5 * (i - e),
      a = .5 * (r - n),
      o = t * t;
    return (2 * n - 2 * i + s + a) * (t * o) + (-3 * n + 3 * i - 2 * s - a) * o + s * t + n;
  }
  function vl(t, e, n, i) {
    return function (t, e) {
      var n = 1 - t;
      return n * n * e;
    }(t, e) + function (t, e) {
      return 2 * (1 - t) * t * e;
    }(t, n) + function (t, e) {
      return t * t * e;
    }(t, i);
  }
  function yl(t, e, n, i, r) {
    return function (t, e) {
      var n = 1 - t;
      return n * n * n * e;
    }(t, e) + function (t, e) {
      var n = 1 - t;
      return 3 * n * n * t * e;
    }(t, n) + function (t, e) {
      return 3 * (1 - t) * t * t * e;
    }(t, i) + function (t, e) {
      return t * t * t * e;
    }(t, r);
  }
  var xl = /*#__PURE__*/function (_ll3) {
    _inherits(xl, _ll3);
    var _super49 = _createSuper(xl);
    function xl() {
      var _this45;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ce();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ce();
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ce();
      _classCallCheck(this, xl);
      _this45 = _super49.call(this), _this45.isCubicBezierCurve = !0, _this45.type = "CubicBezierCurve", _this45.v0 = t, _this45.v1 = e, _this45.v2 = n, _this45.v3 = i;
      return _this45;
    }
    _createClass(xl, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
        var n = e,
          i = this.v0,
          r = this.v1,
          s = this.v2,
          a = this.v3;
        return n.set(yl(t, i.x, r.x, s.x, a.x), yl(t, i.y, r.y, s.y, a.y)), n;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(xl.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(xl.prototype), "toJSON", this).call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(xl.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
      }
    }]);
    return xl;
  }(ll);
  var Ml = /*#__PURE__*/function (_ll4) {
    _inherits(Ml, _ll4);
    var _super50 = _createSuper(Ml);
    function Ml() {
      var _this46;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ze();
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ze();
      _classCallCheck(this, Ml);
      _this46 = _super50.call(this), _this46.isCubicBezierCurve3 = !0, _this46.type = "CubicBezierCurve3", _this46.v0 = t, _this46.v1 = e, _this46.v2 = n, _this46.v3 = i;
      return _this46;
    }
    _createClass(Ml, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
        var n = e,
          i = this.v0,
          r = this.v1,
          s = this.v2,
          a = this.v3;
        return n.set(yl(t, i.x, r.x, s.x, a.x), yl(t, i.y, r.y, s.y, a.y), yl(t, i.z, r.z, s.z, a.z)), n;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ml.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Ml.prototype), "toJSON", this).call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(Ml.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
      }
    }]);
    return Ml;
  }(ll);
  var Sl = /*#__PURE__*/function (_ll5) {
    _inherits(Sl, _ll5);
    var _super51 = _createSuper(Sl);
    function Sl() {
      var _this47;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ce();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
      _classCallCheck(this, Sl);
      _this47 = _super51.call(this), _this47.isLineCurve = !0, _this47.type = "LineCurve", _this47.v1 = t, _this47.v2 = e;
      return _this47;
    }
    _createClass(Sl, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
        var n = e;
        return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
      }
    }, {
      key: "getPointAt",
      value: function getPointAt(t, e) {
        return this.getPoint(t, e);
      }
    }, {
      key: "getTangent",
      value: function getTangent(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
        return e.subVectors(this.v2, this.v1).normalize();
      }
    }, {
      key: "getTangentAt",
      value: function getTangentAt(t, e) {
        return this.getTangent(t, e);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Sl.prototype), "copy", this).call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Sl.prototype), "toJSON", this).call(this);
        return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(Sl.prototype), "fromJSON", this).call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
      }
    }]);
    return Sl;
  }(ll);
  var bl = /*#__PURE__*/function (_ll6) {
    _inherits(bl, _ll6);
    var _super52 = _createSuper(bl);
    function bl() {
      var _this48;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
      _classCallCheck(this, bl);
      _this48 = _super52.call(this), _this48.isLineCurve3 = !0, _this48.type = "LineCurve3", _this48.v1 = t, _this48.v2 = e;
      return _this48;
    }
    _createClass(bl, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
        var n = e;
        return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
      }
    }, {
      key: "getPointAt",
      value: function getPointAt(t, e) {
        return this.getPoint(t, e);
      }
    }, {
      key: "getTangent",
      value: function getTangent(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
        return e.subVectors(this.v2, this.v1).normalize();
      }
    }, {
      key: "getTangentAt",
      value: function getTangentAt(t, e) {
        return this.getTangent(t, e);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(bl.prototype), "copy", this).call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(bl.prototype), "toJSON", this).call(this);
        return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(bl.prototype), "fromJSON", this).call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
      }
    }]);
    return bl;
  }(ll);
  var Tl = /*#__PURE__*/function (_ll7) {
    _inherits(Tl, _ll7);
    var _super53 = _createSuper(Tl);
    function Tl() {
      var _this49;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ce();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ce();
      _classCallCheck(this, Tl);
      _this49 = _super53.call(this), _this49.isQuadraticBezierCurve = !0, _this49.type = "QuadraticBezierCurve", _this49.v0 = t, _this49.v1 = e, _this49.v2 = n;
      return _this49;
    }
    _createClass(Tl, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
        var n = e,
          i = this.v0,
          r = this.v1,
          s = this.v2;
        return n.set(vl(t, i.x, r.x, s.x), vl(t, i.y, r.y, s.y)), n;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Tl.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Tl.prototype), "toJSON", this).call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(Tl.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
      }
    }]);
    return Tl;
  }(ll);
  var El = /*#__PURE__*/function (_ll8) {
    _inherits(El, _ll8);
    var _super54 = _createSuper(El);
    function El() {
      var _this50;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ze();
      _classCallCheck(this, El);
      _this50 = _super54.call(this), _this50.isQuadraticBezierCurve3 = !0, _this50.type = "QuadraticBezierCurve3", _this50.v0 = t, _this50.v1 = e, _this50.v2 = n;
      return _this50;
    }
    _createClass(El, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
        var n = e,
          i = this.v0,
          r = this.v1,
          s = this.v2;
        return n.set(vl(t, i.x, r.x, s.x), vl(t, i.y, r.y, s.y), vl(t, i.z, r.z, s.z)), n;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(El.prototype), "copy", this).call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(El.prototype), "toJSON", this).call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(El.prototype), "fromJSON", this).call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
      }
    }]);
    return El;
  }(ll);
  var wl = /*#__PURE__*/function (_ll9) {
    _inherits(wl, _ll9);
    var _super55 = _createSuper(wl);
    function wl() {
      var _this51;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      _classCallCheck(this, wl);
      _this51 = _super55.call(this), _this51.isSplineCurve = !0, _this51.type = "SplineCurve", _this51.points = t;
      return _this51;
    }
    _createClass(wl, [{
      key: "getPoint",
      value: function getPoint(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce();
        var n = e,
          i = this.points,
          r = (i.length - 1) * t,
          s = Math.floor(r),
          a = r - s,
          o = i[0 === s ? s : s - 1],
          l = i[s],
          c = i[s > i.length - 2 ? i.length - 1 : s + 1],
          h = i[s > i.length - 3 ? i.length - 1 : s + 2];
        return n.set(_l(a, o.x, l.x, c.x, h.x), _l(a, o.y, l.y, c.y, h.y)), n;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        _get(_getPrototypeOf(wl.prototype), "copy", this).call(this, t), this.points = [];
        for (var _e165 = 0, _n157 = t.points.length; _e165 < _n157; _e165++) {
          var _n158 = t.points[_e165];
          this.points.push(_n158.clone());
        }
        return this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(wl.prototype), "toJSON", this).call(this);
        t.points = [];
        for (var _e166 = 0, _n159 = this.points.length; _e166 < _n159; _e166++) {
          var _n160 = this.points[_e166];
          t.points.push(_n160.toArray());
        }
        return t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        _get(_getPrototypeOf(wl.prototype), "fromJSON", this).call(this, t), this.points = [];
        for (var _e167 = 0, _n161 = t.points.length; _e167 < _n161; _e167++) {
          var _n162 = t.points[_e167];
          this.points.push(new ce().fromArray(_n162));
        }
        return this;
      }
    }]);
    return wl;
  }(ll);
  var Al = Object.freeze({
    __proto__: null,
    ArcCurve: hl,
    CatmullRomCurve3: gl,
    CubicBezierCurve: xl,
    CubicBezierCurve3: Ml,
    EllipseCurve: cl,
    LineCurve: Sl,
    LineCurve3: bl,
    QuadraticBezierCurve: Tl,
    QuadraticBezierCurve3: El,
    SplineCurve: wl
  });
  var Rl = /*#__PURE__*/function (_ll10) {
    _inherits(Rl, _ll10);
    var _super56 = _createSuper(Rl);
    function Rl() {
      var _this52;
      _classCallCheck(this, Rl);
      _this52 = _super56.call(this), _this52.type = "CurvePath", _this52.curves = [], _this52.autoClose = !1;
      return _this52;
    }
    _createClass(Rl, [{
      key: "add",
      value: function add(t) {
        this.curves.push(t);
      }
    }, {
      key: "closePath",
      value: function closePath() {
        var t = this.curves[0].getPoint(0),
          e = this.curves[this.curves.length - 1].getPoint(1);
        if (!t.equals(e)) {
          var _n163 = !0 === t.isVector2 ? "LineCurve" : "LineCurve3";
          this.curves.push(new Al[_n163](e, t));
        }
        return this;
      }
    }, {
      key: "getPoint",
      value: function getPoint(t, e) {
        var n = t * this.getLength(),
          i = this.getCurveLengths();
        var r = 0;
        for (; r < i.length;) {
          if (i[r] >= n) {
            var _t173 = i[r] - n,
              _s54 = this.curves[r],
              _a44 = _s54.getLength(),
              _o32 = 0 === _a44 ? 0 : 1 - _t173 / _a44;
            return _s54.getPointAt(_o32, e);
          }
          r++;
        }
        return null;
      }
    }, {
      key: "getLength",
      value: function getLength() {
        var t = this.getCurveLengths();
        return t[t.length - 1];
      }
    }, {
      key: "updateArcLengths",
      value: function updateArcLengths() {
        this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
      }
    }, {
      key: "getCurveLengths",
      value: function getCurveLengths() {
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        var t = [];
        var e = 0;
        for (var _n164 = 0, _i134 = this.curves.length; _n164 < _i134; _n164++) e += this.curves[_n164].getLength(), t.push(e);
        return this.cacheLengths = t, t;
      }
    }, {
      key: "getSpacedPoints",
      value: function getSpacedPoints() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 40;
        var e = [];
        for (var _n165 = 0; _n165 <= t; _n165++) e.push(this.getPoint(_n165 / t));
        return this.autoClose && e.push(e[0]), e;
      }
    }, {
      key: "getPoints",
      value: function getPoints() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;
        var e = [];
        var n;
        for (var _i135 = 0, _r100 = this.curves; _i135 < _r100.length; _i135++) {
          var _s55 = _r100[_i135],
            _a45 = _s55.isEllipseCurve ? 2 * t : _s55.isLineCurve || _s55.isLineCurve3 ? 1 : _s55.isSplineCurve ? t * _s55.points.length : t,
            _o33 = _s55.getPoints(_a45);
          for (var _t174 = 0; _t174 < _o33.length; _t174++) {
            var _i136 = _o33[_t174];
            n && n.equals(_i136) || (e.push(_i136), n = _i136);
          }
        }
        return this.autoClose && e.length > 1 && !e[e.length - 1].equals(e[0]) && e.push(e[0]), e;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        _get(_getPrototypeOf(Rl.prototype), "copy", this).call(this, t), this.curves = [];
        for (var _e168 = 0, _n166 = t.curves.length; _e168 < _n166; _e168++) {
          var _n167 = t.curves[_e168];
          this.curves.push(_n167.clone());
        }
        return this.autoClose = t.autoClose, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Rl.prototype), "toJSON", this).call(this);
        t.autoClose = this.autoClose, t.curves = [];
        for (var _e169 = 0, _n168 = this.curves.length; _e169 < _n168; _e169++) {
          var _n169 = this.curves[_e169];
          t.curves.push(_n169.toJSON());
        }
        return t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        _get(_getPrototypeOf(Rl.prototype), "fromJSON", this).call(this, t), this.autoClose = t.autoClose, this.curves = [];
        for (var _e170 = 0, _n170 = t.curves.length; _e170 < _n170; _e170++) {
          var _n171 = t.curves[_e170];
          this.curves.push(new Al[_n171.type]().fromJSON(_n171));
        }
        return this;
      }
    }]);
    return Rl;
  }(ll);
  var Cl = /*#__PURE__*/function (_Rl) {
    _inherits(Cl, _Rl);
    var _super57 = _createSuper(Cl);
    function Cl(t) {
      var _this53;
      _classCallCheck(this, Cl);
      _this53 = _super57.call(this), _this53.type = "Path", _this53.currentPoint = new ce(), t && _this53.setFromPoints(t);
      return _this53;
    }
    _createClass(Cl, [{
      key: "setFromPoints",
      value: function setFromPoints(t) {
        this.moveTo(t[0].x, t[0].y);
        for (var _e171 = 1, _n172 = t.length; _e171 < _n172; _e171++) this.lineTo(t[_e171].x, t[_e171].y);
        return this;
      }
    }, {
      key: "moveTo",
      value: function moveTo(t, e) {
        return this.currentPoint.set(t, e), this;
      }
    }, {
      key: "lineTo",
      value: function lineTo(t, e) {
        var n = new Sl(this.currentPoint.clone(), new ce(t, e));
        return this.curves.push(n), this.currentPoint.set(t, e), this;
      }
    }, {
      key: "quadraticCurveTo",
      value: function quadraticCurveTo(t, e, n, i) {
        var r = new Tl(this.currentPoint.clone(), new ce(t, e), new ce(n, i));
        return this.curves.push(r), this.currentPoint.set(n, i), this;
      }
    }, {
      key: "bezierCurveTo",
      value: function bezierCurveTo(t, e, n, i, r, s) {
        var a = new xl(this.currentPoint.clone(), new ce(t, e), new ce(n, i), new ce(r, s));
        return this.curves.push(a), this.currentPoint.set(r, s), this;
      }
    }, {
      key: "splineThru",
      value: function splineThru(t) {
        var e = [this.currentPoint.clone()].concat(t),
          n = new wl(e);
        return this.curves.push(n), this.currentPoint.copy(t[t.length - 1]), this;
      }
    }, {
      key: "arc",
      value: function arc(t, e, n, i, r, s) {
        var a = this.currentPoint.x,
          o = this.currentPoint.y;
        return this.absarc(t + a, e + o, n, i, r, s), this;
      }
    }, {
      key: "absarc",
      value: function absarc(t, e, n, i, r, s) {
        return this.absellipse(t, e, n, n, i, r, s), this;
      }
    }, {
      key: "ellipse",
      value: function ellipse(t, e, n, i, r, s, a, o) {
        var l = this.currentPoint.x,
          c = this.currentPoint.y;
        return this.absellipse(t + l, e + c, n, i, r, s, a, o), this;
      }
    }, {
      key: "absellipse",
      value: function absellipse(t, e, n, i, r, s, a, o) {
        var l = new cl(t, e, n, i, r, s, a, o);
        if (this.curves.length > 0) {
          var _t175 = l.getPoint(0);
          _t175.equals(this.currentPoint) || this.lineTo(_t175.x, _t175.y);
        }
        this.curves.push(l);
        var c = l.getPoint(1);
        return this.currentPoint.copy(c), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Cl.prototype), "copy", this).call(this, t), this.currentPoint.copy(t.currentPoint), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Cl.prototype), "toJSON", this).call(this);
        return t.currentPoint = this.currentPoint.toArray(), t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return _get(_getPrototypeOf(Cl.prototype), "fromJSON", this).call(this, t), this.currentPoint.fromArray(t.currentPoint), this;
      }
    }]);
    return Cl;
  }(Rl);
  var Ll = /*#__PURE__*/function (_Ai3) {
    _inherits(Ll, _Ai3);
    var _super58 = _createSuper(Ll);
    function Ll() {
      var _this54;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new ce(0, -.5), new ce(.5, 0), new ce(0, .5)];
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2 * Math.PI;
      _classCallCheck(this, Ll);
      _this54 = _super58.call(this), _this54.type = "LatheGeometry", _this54.parameters = {
        points: t,
        segments: e,
        phiStart: n,
        phiLength: i
      }, e = Math.floor(e), i = te(i, 0, 2 * Math.PI);
      var r = [],
        s = [],
        a = [],
        o = [],
        l = [],
        c = 1 / e,
        h = new ze(),
        u = new ce(),
        d = new ze(),
        p = new ze(),
        m = new ze();
      var f = 0,
        g = 0;
      for (var _e172 = 0; _e172 <= t.length - 1; _e172++) switch (_e172) {
        case 0:
          f = t[_e172 + 1].x - t[_e172].x, g = t[_e172 + 1].y - t[_e172].y, d.x = 1 * g, d.y = -f, d.z = 0 * g, m.copy(d), d.normalize(), o.push(d.x, d.y, d.z);
          break;
        case t.length - 1:
          o.push(m.x, m.y, m.z);
          break;
        default:
          f = t[_e172 + 1].x - t[_e172].x, g = t[_e172 + 1].y - t[_e172].y, d.x = 1 * g, d.y = -f, d.z = 0 * g, p.copy(d), d.x += m.x, d.y += m.y, d.z += m.z, d.normalize(), o.push(d.x, d.y, d.z), m.copy(p);
      }
      for (var _r101 = 0; _r101 <= e; _r101++) {
        var _d10 = n + _r101 * c * i,
          _p9 = Math.sin(_d10),
          _m6 = Math.cos(_d10);
        for (var _n173 = 0; _n173 <= t.length - 1; _n173++) {
          h.x = t[_n173].x * _p9, h.y = t[_n173].y, h.z = t[_n173].x * _m6, s.push(h.x, h.y, h.z), u.x = _r101 / e, u.y = _n173 / (t.length - 1), a.push(u.x, u.y);
          var _i137 = o[3 * _n173 + 0] * _p9,
            _c18 = o[3 * _n173 + 1],
            _d11 = o[3 * _n173 + 0] * _m6;
          l.push(_i137, _c18, _d11);
        }
      }
      for (var _n174 = 0; _n174 < e; _n174++) for (var _e173 = 0; _e173 < t.length - 1; _e173++) {
        var _i138 = _e173 + _n174 * t.length,
          _s56 = _i138,
          _a46 = _i138 + t.length,
          _o34 = _i138 + t.length + 1,
          _l16 = _i138 + 1;
        r.push(_s56, _a46, _l16), r.push(_o34, _l16, _a46);
      }
      _this54.setIndex(r), _this54.setAttribute("position", new yi(s, 3)), _this54.setAttribute("uv", new yi(a, 2)), _this54.setAttribute("normal", new yi(l, 3));
      return _this54;
    }
    _createClass(Ll, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ll.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Ll(t.points, t.segments, t.phiStart, t.phiLength);
      }
    }]);
    return Ll;
  }(Ai);
  var Pl = /*#__PURE__*/function (_Ll) {
    _inherits(Pl, _Ll);
    var _super59 = _createSuper(Pl);
    function Pl() {
      var _this55;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
      _classCallCheck(this, Pl);
      var r = new Cl();
      r.absarc(0, -e / 2, t, 1.5 * Math.PI, 0), r.absarc(0, e / 2, t, 0, .5 * Math.PI), _this55 = _super59.call(this, r.getPoints(n), i), _this55.type = "CapsuleGeometry", _this55.parameters = {
        radius: t,
        length: e,
        capSegments: n,
        radialSegments: i
      };
      return _this55;
    }
    _createClass(Pl, null, [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Pl(t.radius, t.length, t.capSegments, t.radialSegments);
      }
    }]);
    return Pl;
  }(Ll);
  var Il = /*#__PURE__*/function (_Ai4) {
    _inherits(Il, _Ai4);
    var _super60 = _createSuper(Il);
    function Il() {
      var _this56;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2 * Math.PI;
      _classCallCheck(this, Il);
      _this56 = _super60.call(this), _this56.type = "CircleGeometry", _this56.parameters = {
        radius: t,
        segments: e,
        thetaStart: n,
        thetaLength: i
      }, e = Math.max(3, e);
      var r = [],
        s = [],
        a = [],
        o = [],
        l = new ze(),
        c = new ce();
      s.push(0, 0, 0), a.push(0, 0, 1), o.push(.5, .5);
      for (var _r102 = 0, _h11 = 3; _r102 <= e; _r102++, _h11 += 3) {
        var _u8 = n + _r102 / e * i;
        l.x = t * Math.cos(_u8), l.y = t * Math.sin(_u8), s.push(l.x, l.y, l.z), a.push(0, 0, 1), c.x = (s[_h11] / t + 1) / 2, c.y = (s[_h11 + 1] / t + 1) / 2, o.push(c.x, c.y);
      }
      for (var _t176 = 1; _t176 <= e; _t176++) r.push(_t176, _t176 + 1, 0);
      _this56.setIndex(r), _this56.setAttribute("position", new yi(s, 3)), _this56.setAttribute("normal", new yi(a, 3)), _this56.setAttribute("uv", new yi(o, 2));
      return _this56;
    }
    _createClass(Il, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Il.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Il(t.radius, t.segments, t.thetaStart, t.thetaLength);
      }
    }]);
    return Il;
  }(Ai);
  var Ul = /*#__PURE__*/function (_Ai5) {
    _inherits(Ul, _Ai5);
    var _super61 = _createSuper(Ul);
    function Ul() {
      var _this57;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;
      var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var o = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 2 * Math.PI;
      _classCallCheck(this, Ul);
      _this57 = _super61.call(this), _this57.type = "CylinderGeometry", _this57.parameters = {
        radiusTop: t,
        radiusBottom: e,
        height: n,
        radialSegments: i,
        heightSegments: r,
        openEnded: s,
        thetaStart: a,
        thetaLength: o
      };
      var l = _assertThisInitialized(_this57);
      i = Math.floor(i), r = Math.floor(r);
      var c = [],
        h = [],
        u = [],
        d = [];
      var p = 0;
      var m = [],
        f = n / 2;
      var g = 0;
      function _(n) {
        var r = p,
          s = new ce(),
          m = new ze();
        var _ = 0;
        var v = !0 === n ? t : e,
          y = !0 === n ? 1 : -1;
        for (var _t177 = 1; _t177 <= i; _t177++) h.push(0, f * y, 0), u.push(0, y, 0), d.push(.5, .5), p++;
        var x = p;
        for (var _t178 = 0; _t178 <= i; _t178++) {
          var _e174 = _t178 / i * o + a,
            _n175 = Math.cos(_e174),
            _r103 = Math.sin(_e174);
          m.x = v * _r103, m.y = f * y, m.z = v * _n175, h.push(m.x, m.y, m.z), u.push(0, y, 0), s.x = .5 * _n175 + .5, s.y = .5 * _r103 * y + .5, d.push(s.x, s.y), p++;
        }
        for (var _t179 = 0; _t179 < i; _t179++) {
          var _e175 = r + _t179,
            _i139 = x + _t179;
          !0 === n ? c.push(_i139, _i139 + 1, _e175) : c.push(_i139 + 1, _i139, _e175), _ += 3;
        }
        l.addGroup(g, _, !0 === n ? 1 : 2), g += _;
      }
      !function () {
        var s = new ze(),
          _ = new ze();
        var v = 0;
        var y = (e - t) / n;
        for (var _l17 = 0; _l17 <= r; _l17++) {
          var _c19 = [],
            _g6 = _l17 / r,
            _v6 = _g6 * (e - t) + t;
          for (var _t180 = 0; _t180 <= i; _t180++) {
            var _e176 = _t180 / i,
              _r104 = _e176 * o + a,
              _l18 = Math.sin(_r104),
              _m7 = Math.cos(_r104);
            _.x = _v6 * _l18, _.y = -_g6 * n + f, _.z = _v6 * _m7, h.push(_.x, _.y, _.z), s.set(_l18, y, _m7).normalize(), u.push(s.x, s.y, s.z), d.push(_e176, 1 - _g6), _c19.push(p++);
          }
          m.push(_c19);
        }
        for (var _t181 = 0; _t181 < i; _t181++) for (var _e177 = 0; _e177 < r; _e177++) {
          var _n176 = m[_e177][_t181],
            _i140 = m[_e177 + 1][_t181],
            _r105 = m[_e177 + 1][_t181 + 1],
            _s57 = m[_e177][_t181 + 1];
          c.push(_n176, _i140, _s57), c.push(_i140, _r105, _s57), v += 6;
        }
        l.addGroup(g, v, 0), g += v;
      }(), !1 === s && (t > 0 && _(!0), e > 0 && _(!1)), _this57.setIndex(c), _this57.setAttribute("position", new yi(h, 3)), _this57.setAttribute("normal", new yi(u, 3)), _this57.setAttribute("uv", new yi(d, 2));
      return _this57;
    }
    _createClass(Ul, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ul.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Ul(t.radiusTop, t.radiusBottom, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength);
      }
    }]);
    return Ul;
  }(Ai);
  var Dl = /*#__PURE__*/function (_Ul) {
    _inherits(Dl, _Ul);
    var _super62 = _createSuper(Dl);
    function Dl() {
      var _this58;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2 * Math.PI;
      _classCallCheck(this, Dl);
      _this58 = _super62.call(this, 0, t, e, n, i, r, s, a), _this58.type = "ConeGeometry", _this58.parameters = {
        radius: t,
        height: e,
        radialSegments: n,
        heightSegments: i,
        openEnded: r,
        thetaStart: s,
        thetaLength: a
      };
      return _this58;
    }
    _createClass(Dl, null, [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Dl(t.radius, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength);
      }
    }]);
    return Dl;
  }(Ul);
  var Nl = /*#__PURE__*/function (_Ai6) {
    _inherits(Nl, _Ai6);
    var _super63 = _createSuper(Nl);
    function Nl() {
      var _this59;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      _classCallCheck(this, Nl);
      _this59 = _super63.call(this), _this59.type = "PolyhedronGeometry", _this59.parameters = {
        vertices: t,
        indices: e,
        radius: n,
        detail: i
      };
      var r = [],
        s = [];
      function a(t, e, n, i) {
        var r = i + 1,
          s = [];
        for (var _i141 = 0; _i141 <= r; _i141++) {
          s[_i141] = [];
          var _a47 = t.clone().lerp(n, _i141 / r),
            _o35 = e.clone().lerp(n, _i141 / r),
            _l19 = r - _i141;
          for (var _t182 = 0; _t182 <= _l19; _t182++) s[_i141][_t182] = 0 === _t182 && _i141 === r ? _a47 : _a47.clone().lerp(_o35, _t182 / _l19);
        }
        for (var _t183 = 0; _t183 < r; _t183++) for (var _e178 = 0; _e178 < 2 * (r - _t183) - 1; _e178++) {
          var _n177 = Math.floor(_e178 / 2);
          _e178 % 2 == 0 ? (o(s[_t183][_n177 + 1]), o(s[_t183 + 1][_n177]), o(s[_t183][_n177])) : (o(s[_t183][_n177 + 1]), o(s[_t183 + 1][_n177 + 1]), o(s[_t183 + 1][_n177]));
        }
      }
      function o(t) {
        r.push(t.x, t.y, t.z);
      }
      function l(e, n) {
        var i = 3 * e;
        n.x = t[i + 0], n.y = t[i + 1], n.z = t[i + 2];
      }
      function c(t, e, n, i) {
        i < 0 && 1 === t.x && (s[e] = t.x - 1), 0 === n.x && 0 === n.z && (s[e] = i / 2 / Math.PI + .5);
      }
      function h(t) {
        return Math.atan2(t.z, -t.x);
      }
      !function (t) {
        var n = new ze(),
          i = new ze(),
          r = new ze();
        for (var _s58 = 0; _s58 < e.length; _s58 += 3) l(e[_s58 + 0], n), l(e[_s58 + 1], i), l(e[_s58 + 2], r), a(n, i, r, t);
      }(i), function (t) {
        var e = new ze();
        for (var _n178 = 0; _n178 < r.length; _n178 += 3) e.x = r[_n178 + 0], e.y = r[_n178 + 1], e.z = r[_n178 + 2], e.normalize().multiplyScalar(t), r[_n178 + 0] = e.x, r[_n178 + 1] = e.y, r[_n178 + 2] = e.z;
      }(n), function () {
        var t = new ze();
        for (var _n179 = 0; _n179 < r.length; _n179 += 3) {
          t.x = r[_n179 + 0], t.y = r[_n179 + 1], t.z = r[_n179 + 2];
          var _i142 = h(t) / 2 / Math.PI + .5,
            _a48 = (e = t, Math.atan2(-e.y, Math.sqrt(e.x * e.x + e.z * e.z)) / Math.PI + .5);
          s.push(_i142, 1 - _a48);
        }
        var e;
        (function () {
          var t = new ze(),
            e = new ze(),
            n = new ze(),
            i = new ze(),
            a = new ce(),
            o = new ce(),
            l = new ce();
          for (var _u9 = 0, _d12 = 0; _u9 < r.length; _u9 += 9, _d12 += 6) {
            t.set(r[_u9 + 0], r[_u9 + 1], r[_u9 + 2]), e.set(r[_u9 + 3], r[_u9 + 4], r[_u9 + 5]), n.set(r[_u9 + 6], r[_u9 + 7], r[_u9 + 8]), a.set(s[_d12 + 0], s[_d12 + 1]), o.set(s[_d12 + 2], s[_d12 + 3]), l.set(s[_d12 + 4], s[_d12 + 5]), i.copy(t).add(e).add(n).divideScalar(3);
            var _p10 = h(i);
            c(a, _d12 + 0, t, _p10), c(o, _d12 + 2, e, _p10), c(l, _d12 + 4, n, _p10);
          }
        })(), function () {
          for (var _t184 = 0; _t184 < s.length; _t184 += 6) {
            var _e179 = s[_t184 + 0],
              _n180 = s[_t184 + 2],
              _i143 = s[_t184 + 4],
              _r106 = Math.max(_e179, _n180, _i143),
              _a49 = Math.min(_e179, _n180, _i143);
            _r106 > .9 && _a49 < .1 && (_e179 < .2 && (s[_t184 + 0] += 1), _n180 < .2 && (s[_t184 + 2] += 1), _i143 < .2 && (s[_t184 + 4] += 1));
          }
        }();
      }(), _this59.setAttribute("position", new yi(r, 3)), _this59.setAttribute("normal", new yi(r.slice(), 3)), _this59.setAttribute("uv", new yi(s, 2)), 0 === i ? _this59.computeVertexNormals() : _this59.normalizeNormals();
      return _this59;
    }
    _createClass(Nl, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Nl.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Nl(t.vertices, t.indices, t.radius, t.details);
      }
    }]);
    return Nl;
  }(Ai);
  var Ol = /*#__PURE__*/function (_Nl) {
    _inherits(Ol, _Nl);
    var _super64 = _createSuper(Ol);
    function Ol() {
      var _this60;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _classCallCheck(this, Ol);
      var n = (1 + Math.sqrt(5)) / 2,
        i = 1 / n;
      _this60 = _super64.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, 0, -n, 0, -i, n, 0, -i, -n, 0, i, n, 0, i], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], t, e), _this60.type = "DodecahedronGeometry", _this60.parameters = {
        radius: t,
        detail: e
      };
      return _this60;
    }
    _createClass(Ol, null, [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Ol(t.radius, t.detail);
      }
    }]);
    return Ol;
  }(Nl);
  var Fl = new ze(),
    Bl = new ze(),
    zl = new ze(),
    Hl = new Qn();
  var Gl = /*#__PURE__*/function (_Ai7) {
    _inherits(Gl, _Ai7);
    var _super65 = _createSuper(Gl);
    function Gl() {
      var _this61;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      _classCallCheck(this, Gl);
      if (_this61 = _super65.call(this), _this61.type = "EdgesGeometry", _this61.parameters = {
        geometry: t,
        thresholdAngle: e
      }, null !== t) {
        var _n181 = 4,
          _i144 = Math.pow(10, _n181),
          _r107 = Math.cos(Kt * e),
          _s59 = t.getIndex(),
          _a50 = t.getAttribute("position"),
          _o36 = _s59 ? _s59.count : _a50.count,
          _l20 = [0, 0, 0],
          _c20 = ["a", "b", "c"],
          _h12 = new Array(3),
          _u10 = {},
          _d13 = [];
        for (var _t185 = 0; _t185 < _o36; _t185 += 3) {
          _s59 ? (_l20[0] = _s59.getX(_t185), _l20[1] = _s59.getX(_t185 + 1), _l20[2] = _s59.getX(_t185 + 2)) : (_l20[0] = _t185, _l20[1] = _t185 + 1, _l20[2] = _t185 + 2);
          var _e180 = Hl.a,
            _n182 = Hl.b,
            _o37 = Hl.c;
          if (_e180.fromBufferAttribute(_a50, _l20[0]), _n182.fromBufferAttribute(_a50, _l20[1]), _o37.fromBufferAttribute(_a50, _l20[2]), Hl.getNormal(zl), _h12[0] = "".concat(Math.round(_e180.x * _i144), ",").concat(Math.round(_e180.y * _i144), ",").concat(Math.round(_e180.z * _i144)), _h12[1] = "".concat(Math.round(_n182.x * _i144), ",").concat(Math.round(_n182.y * _i144), ",").concat(Math.round(_n182.z * _i144)), _h12[2] = "".concat(Math.round(_o37.x * _i144), ",").concat(Math.round(_o37.y * _i144), ",").concat(Math.round(_o37.z * _i144)), _h12[0] !== _h12[1] && _h12[1] !== _h12[2] && _h12[2] !== _h12[0]) for (var _t186 = 0; _t186 < 3; _t186++) {
            var _e181 = (_t186 + 1) % 3,
              _n183 = _h12[_t186],
              _i145 = _h12[_e181],
              _s60 = Hl[_c20[_t186]],
              _a51 = Hl[_c20[_e181]],
              _o38 = "".concat(_n183, "_").concat(_i145),
              _p11 = "".concat(_i145, "_").concat(_n183);
            _p11 in _u10 && _u10[_p11] ? (zl.dot(_u10[_p11].normal) <= _r107 && (_d13.push(_s60.x, _s60.y, _s60.z), _d13.push(_a51.x, _a51.y, _a51.z)), _u10[_p11] = null) : _o38 in _u10 || (_u10[_o38] = {
              index0: _l20[_t186],
              index1: _l20[_e181],
              normal: zl.clone()
            });
          }
        }
        for (var _t187 in _u10) if (_u10[_t187]) {
          var _u10$_t = _u10[_t187],
            _e182 = _u10$_t.index0,
            _n184 = _u10$_t.index1;
          Fl.fromBufferAttribute(_a50, _e182), Bl.fromBufferAttribute(_a50, _n184), _d13.push(Fl.x, Fl.y, Fl.z), _d13.push(Bl.x, Bl.y, Bl.z);
        }
        _this61.setAttribute("position", new yi(_d13, 3));
      }
      return _possibleConstructorReturn(_this61);
    }
    _createClass(Gl, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Gl.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }]);
    return Gl;
  }(Ai);
  var Vl = /*#__PURE__*/function (_Cl) {
    _inherits(Vl, _Cl);
    var _super66 = _createSuper(Vl);
    function Vl(t) {
      var _this62;
      _classCallCheck(this, Vl);
      _this62 = _super66.call(this, t), _this62.uuid = Qt(), _this62.type = "Shape", _this62.holes = [];
      return _this62;
    }
    _createClass(Vl, [{
      key: "getPointsHoles",
      value: function getPointsHoles(t) {
        var e = [];
        for (var _n185 = 0, _i146 = this.holes.length; _n185 < _i146; _n185++) e[_n185] = this.holes[_n185].getPoints(t);
        return e;
      }
    }, {
      key: "extractPoints",
      value: function extractPoints(t) {
        return {
          shape: this.getPoints(t),
          holes: this.getPointsHoles(t)
        };
      }
    }, {
      key: "copy",
      value: function copy(t) {
        _get(_getPrototypeOf(Vl.prototype), "copy", this).call(this, t), this.holes = [];
        for (var _e183 = 0, _n186 = t.holes.length; _e183 < _n186; _e183++) {
          var _n187 = t.holes[_e183];
          this.holes.push(_n187.clone());
        }
        return this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Vl.prototype), "toJSON", this).call(this);
        t.uuid = this.uuid, t.holes = [];
        for (var _e184 = 0, _n188 = this.holes.length; _e184 < _n188; _e184++) {
          var _n189 = this.holes[_e184];
          t.holes.push(_n189.toJSON());
        }
        return t;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        _get(_getPrototypeOf(Vl.prototype), "fromJSON", this).call(this, t), this.uuid = t.uuid, this.holes = [];
        for (var _e185 = 0, _n190 = t.holes.length; _e185 < _n190; _e185++) {
          var _n191 = t.holes[_e185];
          this.holes.push(new Cl().fromJSON(_n191));
        }
        return this;
      }
    }]);
    return Vl;
  }(Cl);
  var kl = function kl(t, e) {
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    var i = e && e.length,
      r = i ? e[0] * n : t.length;
    var s = Wl(t, 0, r, n, !0);
    var a = [];
    if (!s || s.next === s.prev) return a;
    var o, l, c, h, u, d, p;
    if (i && (s = function (t, e, n, i) {
      var r = [];
      var s, a, o, l, c;
      for (s = 0, a = e.length; s < a; s++) o = e[s] * i, l = s < a - 1 ? e[s + 1] * i : t.length, c = Wl(t, o, l, i, !1), c === c.next && (c.steiner = !0), r.push(ec(c));
      for (r.sort(Kl), s = 0; s < r.length; s++) n = $l(r[s], n);
      return n;
    }(t, e, s, n)), t.length > 80 * n) {
      o = c = t[0], l = h = t[1];
      for (var _e186 = n; _e186 < r; _e186 += n) u = t[_e186], d = t[_e186 + 1], u < o && (o = u), d < l && (l = d), u > c && (c = u), d > h && (h = d);
      p = Math.max(c - o, h - l), p = 0 !== p ? 32767 / p : 0;
    }
    return jl(s, a, n, o, l, p, 0), a;
  };
  function Wl(t, e, n, i, r) {
    var s, a;
    if (r === function (t, e, n, i) {
      var r = 0;
      for (var _s61 = e, _a52 = n - i; _s61 < n; _s61 += i) r += (t[_a52] - t[_s61]) * (t[_s61 + 1] + t[_a52 + 1]), _a52 = _s61;
      return r;
    }(t, e, n, i) > 0) for (s = e; s < n; s += i) a = uc(s, t[s], t[s + 1], a);else for (s = n - i; s >= e; s -= i) a = uc(s, t[s], t[s + 1], a);
    return a && sc(a, a.next) && (dc(a), a = a.next), a;
  }
  function Xl(t, e) {
    if (!t) return t;
    e || (e = t);
    var n,
      i = t;
    do {
      if (n = !1, i.steiner || !sc(i, i.next) && 0 !== rc(i.prev, i, i.next)) i = i.next;else {
        if (dc(i), i = e = i.prev, i === i.next) break;
        n = !0;
      }
    } while (n || i !== e);
    return e;
  }
  function jl(t, e, n, i, r, s, a) {
    if (!t) return;
    !a && s && function (t, e, n, i) {
      var r = t;
      do {
        0 === r.z && (r.z = tc(r.x, r.y, e, n, i)), r.prevZ = r.prev, r.nextZ = r.next, r = r.next;
      } while (r !== t);
      r.prevZ.nextZ = null, r.prevZ = null, function (t) {
        var e,
          n,
          i,
          r,
          s,
          a,
          o,
          l,
          c = 1;
        do {
          for (n = t, t = null, s = null, a = 0; n;) {
            for (a++, i = n, o = 0, e = 0; e < c && (o++, i = i.nextZ, i); e++);
            for (l = c; o > 0 || l > 0 && i;) 0 !== o && (0 === l || !i || n.z <= i.z) ? (r = n, n = n.nextZ, o--) : (r = i, i = i.nextZ, l--), s ? s.nextZ = r : t = r, r.prevZ = s, s = r;
            n = i;
          }
          s.nextZ = null, c *= 2;
        } while (a > 1);
      }(r);
    }(t, i, r, s);
    var o,
      l,
      c = t;
    for (; t.prev !== t.next;) if (o = t.prev, l = t.next, s ? Yl(t, i, r, s) : ql(t)) e.push(o.i / n | 0), e.push(t.i / n | 0), e.push(l.i / n | 0), dc(t), t = l.next, c = l.next;else if ((t = l) === c) {
      a ? 1 === a ? jl(t = Zl(Xl(t), e, n), e, n, i, r, s, 2) : 2 === a && Jl(t, e, n, i, r, s) : jl(Xl(t), e, n, i, r, s, 1);
      break;
    }
  }
  function ql(t) {
    var e = t.prev,
      n = t,
      i = t.next;
    if (rc(e, n, i) >= 0) return !1;
    var r = e.x,
      s = n.x,
      a = i.x,
      o = e.y,
      l = n.y,
      c = i.y,
      h = r < s ? r < a ? r : a : s < a ? s : a,
      u = o < l ? o < c ? o : c : l < c ? l : c,
      d = r > s ? r > a ? r : a : s > a ? s : a,
      p = o > l ? o > c ? o : c : l > c ? l : c;
    var m = i.next;
    for (; m !== e;) {
      if (m.x >= h && m.x <= d && m.y >= u && m.y <= p && nc(r, o, s, l, a, c, m.x, m.y) && rc(m.prev, m, m.next) >= 0) return !1;
      m = m.next;
    }
    return !0;
  }
  function Yl(t, e, n, i) {
    var r = t.prev,
      s = t,
      a = t.next;
    if (rc(r, s, a) >= 0) return !1;
    var o = r.x,
      l = s.x,
      c = a.x,
      h = r.y,
      u = s.y,
      d = a.y,
      p = o < l ? o < c ? o : c : l < c ? l : c,
      m = h < u ? h < d ? h : d : u < d ? u : d,
      f = o > l ? o > c ? o : c : l > c ? l : c,
      g = h > u ? h > d ? h : d : u > d ? u : d,
      _ = tc(p, m, e, n, i),
      v = tc(f, g, e, n, i);
    var y = t.prevZ,
      x = t.nextZ;
    for (; y && y.z >= _ && x && x.z <= v;) {
      if (y.x >= p && y.x <= f && y.y >= m && y.y <= g && y !== r && y !== a && nc(o, h, l, u, c, d, y.x, y.y) && rc(y.prev, y, y.next) >= 0) return !1;
      if (y = y.prevZ, x.x >= p && x.x <= f && x.y >= m && x.y <= g && x !== r && x !== a && nc(o, h, l, u, c, d, x.x, x.y) && rc(x.prev, x, x.next) >= 0) return !1;
      x = x.nextZ;
    }
    for (; y && y.z >= _;) {
      if (y.x >= p && y.x <= f && y.y >= m && y.y <= g && y !== r && y !== a && nc(o, h, l, u, c, d, y.x, y.y) && rc(y.prev, y, y.next) >= 0) return !1;
      y = y.prevZ;
    }
    for (; x && x.z <= v;) {
      if (x.x >= p && x.x <= f && x.y >= m && x.y <= g && x !== r && x !== a && nc(o, h, l, u, c, d, x.x, x.y) && rc(x.prev, x, x.next) >= 0) return !1;
      x = x.nextZ;
    }
    return !0;
  }
  function Zl(t, e, n) {
    var i = t;
    do {
      var _r108 = i.prev,
        _s62 = i.next.next;
      !sc(_r108, _s62) && ac(_r108, i, i.next, _s62) && cc(_r108, _s62) && cc(_s62, _r108) && (e.push(_r108.i / n | 0), e.push(i.i / n | 0), e.push(_s62.i / n | 0), dc(i), dc(i.next), i = t = _s62), i = i.next;
    } while (i !== t);
    return Xl(i);
  }
  function Jl(t, e, n, i, r, s) {
    var a = t;
    do {
      var _t188 = a.next.next;
      for (; _t188 !== a.prev;) {
        if (a.i !== _t188.i && ic(a, _t188)) {
          var _o39 = hc(a, _t188);
          return a = Xl(a, a.next), _o39 = Xl(_o39, _o39.next), jl(a, e, n, i, r, s, 0), void jl(_o39, e, n, i, r, s, 0);
        }
        _t188 = _t188.next;
      }
      a = a.next;
    } while (a !== t);
  }
  function Kl(t, e) {
    return t.x - e.x;
  }
  function $l(t, e) {
    var n = function (t, e) {
      var n,
        i = e,
        r = -1 / 0;
      var s = t.x,
        a = t.y;
      do {
        if (a <= i.y && a >= i.next.y && i.next.y !== i.y) {
          var _t189 = i.x + (a - i.y) * (i.next.x - i.x) / (i.next.y - i.y);
          if (_t189 <= s && _t189 > r && (r = _t189, n = i.x < i.next.x ? i : i.next, _t189 === s)) return n;
        }
        i = i.next;
      } while (i !== e);
      if (!n) return null;
      var o = n,
        l = n.x,
        c = n.y;
      var h,
        u = 1 / 0;
      i = n;
      do {
        s >= i.x && i.x >= l && s !== i.x && nc(a < c ? s : r, a, l, c, a < c ? r : s, a, i.x, i.y) && (h = Math.abs(a - i.y) / (s - i.x), cc(i, t) && (h < u || h === u && (i.x > n.x || i.x === n.x && Ql(n, i))) && (n = i, u = h)), i = i.next;
      } while (i !== o);
      return n;
    }(t, e);
    if (!n) return e;
    var i = hc(n, t);
    return Xl(i, i.next), Xl(n, n.next);
  }
  function Ql(t, e) {
    return rc(t.prev, t, e.prev) < 0 && rc(e.next, t, t.next) < 0;
  }
  function tc(t, e, n, i, r) {
    return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = (t - n) * r | 0) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = (e - i) * r | 0) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
  }
  function ec(t) {
    var e = t,
      n = t;
    do {
      (e.x < n.x || e.x === n.x && e.y < n.y) && (n = e), e = e.next;
    } while (e !== t);
    return n;
  }
  function nc(t, e, n, i, r, s, a, o) {
    return (r - a) * (e - o) >= (t - a) * (s - o) && (t - a) * (i - o) >= (n - a) * (e - o) && (n - a) * (s - o) >= (r - a) * (i - o);
  }
  function ic(t, e) {
    return t.next.i !== e.i && t.prev.i !== e.i && !function (t, e) {
      var n = t;
      do {
        if (n.i !== t.i && n.next.i !== t.i && n.i !== e.i && n.next.i !== e.i && ac(n, n.next, t, e)) return !0;
        n = n.next;
      } while (n !== t);
      return !1;
    }(t, e) && (cc(t, e) && cc(e, t) && function (t, e) {
      var n = t,
        i = !1;
      var r = (t.x + e.x) / 2,
        s = (t.y + e.y) / 2;
      do {
        n.y > s != n.next.y > s && n.next.y !== n.y && r < (n.next.x - n.x) * (s - n.y) / (n.next.y - n.y) + n.x && (i = !i), n = n.next;
      } while (n !== t);
      return i;
    }(t, e) && (rc(t.prev, t, e.prev) || rc(t, e.prev, e)) || sc(t, e) && rc(t.prev, t, t.next) > 0 && rc(e.prev, e, e.next) > 0);
  }
  function rc(t, e, n) {
    return (e.y - t.y) * (n.x - e.x) - (e.x - t.x) * (n.y - e.y);
  }
  function sc(t, e) {
    return t.x === e.x && t.y === e.y;
  }
  function ac(t, e, n, i) {
    var r = lc(rc(t, e, n)),
      s = lc(rc(t, e, i)),
      a = lc(rc(n, i, t)),
      o = lc(rc(n, i, e));
    return r !== s && a !== o || !(0 !== r || !oc(t, n, e)) || !(0 !== s || !oc(t, i, e)) || !(0 !== a || !oc(n, t, i)) || !(0 !== o || !oc(n, e, i));
  }
  function oc(t, e, n) {
    return e.x <= Math.max(t.x, n.x) && e.x >= Math.min(t.x, n.x) && e.y <= Math.max(t.y, n.y) && e.y >= Math.min(t.y, n.y);
  }
  function lc(t) {
    return t > 0 ? 1 : t < 0 ? -1 : 0;
  }
  function cc(t, e) {
    return rc(t.prev, t, t.next) < 0 ? rc(t, e, t.next) >= 0 && rc(t, t.prev, e) >= 0 : rc(t, e, t.prev) < 0 || rc(t, t.next, e) < 0;
  }
  function hc(t, e) {
    var n = new pc(t.i, t.x, t.y),
      i = new pc(e.i, e.x, e.y),
      r = t.next,
      s = e.prev;
    return t.next = e, e.prev = t, n.next = r, r.prev = n, i.next = n, n.prev = i, s.next = i, i.prev = s, i;
  }
  function uc(t, e, n, i) {
    var r = new pc(t, e, n);
    return i ? (r.next = i.next, r.prev = i, i.next.prev = r, i.next = r) : (r.prev = r, r.next = r), r;
  }
  function dc(t) {
    t.next.prev = t.prev, t.prev.next = t.next, t.prevZ && (t.prevZ.nextZ = t.nextZ), t.nextZ && (t.nextZ.prevZ = t.prevZ);
  }
  function pc(t, e, n) {
    this.i = t, this.x = e, this.y = n, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
  }
  var mc = /*#__PURE__*/function () {
    function mc() {
      _classCallCheck(this, mc);
    }
    _createClass(mc, null, [{
      key: "area",
      value: function area(t) {
        var e = t.length;
        var n = 0;
        for (var _i147 = e - 1, _r109 = 0; _r109 < e; _i147 = _r109++) n += t[_i147].x * t[_r109].y - t[_r109].x * t[_i147].y;
        return .5 * n;
      }
    }, {
      key: "isClockWise",
      value: function isClockWise(t) {
        return mc.area(t) < 0;
      }
    }, {
      key: "triangulateShape",
      value: function triangulateShape(t, e) {
        var n = [],
          i = [],
          r = [];
        fc(t), gc(n, t);
        var s = t.length;
        e.forEach(fc);
        for (var _t190 = 0; _t190 < e.length; _t190++) i.push(s), s += e[_t190].length, gc(n, e[_t190]);
        var a = kl(n, i);
        for (var _t191 = 0; _t191 < a.length; _t191 += 3) r.push(a.slice(_t191, _t191 + 3));
        return r;
      }
    }]);
    return mc;
  }();
  function fc(t) {
    var e = t.length;
    e > 2 && t[e - 1].equals(t[0]) && t.pop();
  }
  function gc(t, e) {
    for (var _n192 = 0; _n192 < e.length; _n192++) t.push(e[_n192].x), t.push(e[_n192].y);
  }
  var _c = /*#__PURE__*/function (_Ai8) {
    _inherits(_c, _Ai8);
    var _super67 = _createSuper(_c);
    function _c() {
      var _this63;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vl([new ce(.5, .5), new ce(-.5, .5), new ce(-.5, -.5), new ce(.5, -.5)]);
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, _c);
      _this63 = _super67.call(this), _this63.type = "ExtrudeGeometry", _this63.parameters = {
        shapes: t,
        options: e
      }, t = Array.isArray(t) ? t : [t];
      var n = _assertThisInitialized(_this63),
        i = [],
        r = [];
      for (var _e187 = 0, _n193 = t.length; _e187 < _n193; _e187++) {
        s(t[_e187]);
      }
      function s(t) {
        var s = [],
          a = void 0 !== e.curveSegments ? e.curveSegments : 12,
          o = void 0 !== e.steps ? e.steps : 1,
          l = void 0 !== e.depth ? e.depth : 1;
        var c = void 0 === e.bevelEnabled || e.bevelEnabled,
          h = void 0 !== e.bevelThickness ? e.bevelThickness : .2,
          u = void 0 !== e.bevelSize ? e.bevelSize : h - .1,
          d = void 0 !== e.bevelOffset ? e.bevelOffset : 0,
          p = void 0 !== e.bevelSegments ? e.bevelSegments : 3;
        var m = e.extrudePath,
          f = void 0 !== e.UVGenerator ? e.UVGenerator : vc;
        var g,
          _,
          v,
          y,
          x,
          M = !1;
        m && (g = m.getSpacedPoints(o), M = !0, c = !1, _ = m.computeFrenetFrames(o, !1), v = new ze(), y = new ze(), x = new ze()), c || (p = 0, h = 0, u = 0, d = 0);
        var S = t.extractPoints(a);
        var b = S.shape;
        var T = S.holes;
        if (!mc.isClockWise(b)) {
          b = b.reverse();
          for (var _t192 = 0, _e188 = T.length; _t192 < _e188; _t192++) {
            var _e189 = T[_t192];
            mc.isClockWise(_e189) && (T[_t192] = _e189.reverse());
          }
        }
        var E = mc.triangulateShape(b, T),
          w = b;
        for (var _t193 = 0, _e190 = T.length; _t193 < _e190; _t193++) {
          var _e191 = T[_t193];
          b = b.concat(_e191);
        }
        function A(t, e, n) {
          return e || console.error("THREE.ExtrudeGeometry: vec does not exist"), t.clone().addScaledVector(e, n);
        }
        var R = b.length,
          C = E.length;
        function L(t, e, n) {
          var i, r, s;
          var a = t.x - e.x,
            o = t.y - e.y,
            l = n.x - t.x,
            c = n.y - t.y,
            h = a * a + o * o,
            u = a * c - o * l;
          if (Math.abs(u) > Number.EPSILON) {
            var _u11 = Math.sqrt(h),
              _d14 = Math.sqrt(l * l + c * c),
              _p12 = e.x - o / _u11,
              _m8 = e.y + a / _u11,
              _f6 = ((n.x - c / _d14 - _p12) * c - (n.y + l / _d14 - _m8) * l) / (a * c - o * l);
            i = _p12 + a * _f6 - t.x, r = _m8 + o * _f6 - t.y;
            var _g7 = i * i + r * r;
            if (_g7 <= 2) return new ce(i, r);
            s = Math.sqrt(_g7 / 2);
          } else {
            var _t194 = !1;
            a > Number.EPSILON ? l > Number.EPSILON && (_t194 = !0) : a < -Number.EPSILON ? l < -Number.EPSILON && (_t194 = !0) : Math.sign(o) === Math.sign(c) && (_t194 = !0), _t194 ? (i = -o, r = a, s = Math.sqrt(h)) : (i = a, r = o, s = Math.sqrt(h / 2));
          }
          return new ce(i / s, r / s);
        }
        var P = [];
        for (var _t195 = 0, _e192 = w.length, _n194 = _e192 - 1, _i148 = _t195 + 1; _t195 < _e192; _t195++, _n194++, _i148++) _n194 === _e192 && (_n194 = 0), _i148 === _e192 && (_i148 = 0), P[_t195] = L(w[_t195], w[_n194], w[_i148]);
        var I = [];
        var U,
          D = P.concat();
        for (var _t196 = 0, _e193 = T.length; _t196 < _e193; _t196++) {
          var _e194 = T[_t196];
          U = [];
          for (var _t197 = 0, _n195 = _e194.length, _i149 = _n195 - 1, _r110 = _t197 + 1; _t197 < _n195; _t197++, _i149++, _r110++) _i149 === _n195 && (_i149 = 0), _r110 === _n195 && (_r110 = 0), U[_t197] = L(_e194[_t197], _e194[_i149], _e194[_r110]);
          I.push(U), D = D.concat(U);
        }
        for (var _t198 = 0; _t198 < p; _t198++) {
          var _e195 = _t198 / p,
            _n196 = h * Math.cos(_e195 * Math.PI / 2),
            _i150 = u * Math.sin(_e195 * Math.PI / 2) + d;
          for (var _t199 = 0, _e196 = w.length; _t199 < _e196; _t199++) {
            var _e197 = A(w[_t199], P[_t199], _i150);
            F(_e197.x, _e197.y, -_n196);
          }
          for (var _t200 = 0, _e198 = T.length; _t200 < _e198; _t200++) {
            var _e199 = T[_t200];
            U = I[_t200];
            for (var _t201 = 0, _r111 = _e199.length; _t201 < _r111; _t201++) {
              var _r112 = A(_e199[_t201], U[_t201], _i150);
              F(_r112.x, _r112.y, -_n196);
            }
          }
        }
        var N = u + d;
        for (var _t202 = 0; _t202 < R; _t202++) {
          var _e200 = c ? A(b[_t202], D[_t202], N) : b[_t202];
          M ? (y.copy(_.normals[0]).multiplyScalar(_e200.x), v.copy(_.binormals[0]).multiplyScalar(_e200.y), x.copy(g[0]).add(y).add(v), F(x.x, x.y, x.z)) : F(_e200.x, _e200.y, 0);
        }
        for (var _t203 = 1; _t203 <= o; _t203++) for (var _e201 = 0; _e201 < R; _e201++) {
          var _n197 = c ? A(b[_e201], D[_e201], N) : b[_e201];
          M ? (y.copy(_.normals[_t203]).multiplyScalar(_n197.x), v.copy(_.binormals[_t203]).multiplyScalar(_n197.y), x.copy(g[_t203]).add(y).add(v), F(x.x, x.y, x.z)) : F(_n197.x, _n197.y, l / o * _t203);
        }
        for (var _t204 = p - 1; _t204 >= 0; _t204--) {
          var _e202 = _t204 / p,
            _n198 = h * Math.cos(_e202 * Math.PI / 2),
            _i151 = u * Math.sin(_e202 * Math.PI / 2) + d;
          for (var _t205 = 0, _e203 = w.length; _t205 < _e203; _t205++) {
            var _e204 = A(w[_t205], P[_t205], _i151);
            F(_e204.x, _e204.y, l + _n198);
          }
          for (var _t206 = 0, _e205 = T.length; _t206 < _e205; _t206++) {
            var _e206 = T[_t206];
            U = I[_t206];
            for (var _t207 = 0, _r113 = _e206.length; _t207 < _r113; _t207++) {
              var _r114 = A(_e206[_t207], U[_t207], _i151);
              M ? F(_r114.x, _r114.y + g[o - 1].y, g[o - 1].x + _n198) : F(_r114.x, _r114.y, l + _n198);
            }
          }
        }
        function O(t, e) {
          var n = t.length;
          for (; --n >= 0;) {
            var _i152 = n;
            var _r115 = n - 1;
            _r115 < 0 && (_r115 = t.length - 1);
            for (var _t208 = 0, _n199 = o + 2 * p; _t208 < _n199; _t208++) {
              var _n200 = R * _t208,
                _s63 = R * (_t208 + 1);
              z(e + _i152 + _n200, e + _r115 + _n200, e + _r115 + _s63, e + _i152 + _s63);
            }
          }
        }
        function F(t, e, n) {
          s.push(t), s.push(e), s.push(n);
        }
        function B(t, e, r) {
          H(t), H(e), H(r);
          var s = i.length / 3,
            a = f.generateTopUV(n, i, s - 3, s - 2, s - 1);
          G(a[0]), G(a[1]), G(a[2]);
        }
        function z(t, e, r, s) {
          H(t), H(e), H(s), H(e), H(r), H(s);
          var a = i.length / 3,
            o = f.generateSideWallUV(n, i, a - 6, a - 3, a - 2, a - 1);
          G(o[0]), G(o[1]), G(o[3]), G(o[1]), G(o[2]), G(o[3]);
        }
        function H(t) {
          i.push(s[3 * t + 0]), i.push(s[3 * t + 1]), i.push(s[3 * t + 2]);
        }
        function G(t) {
          r.push(t.x), r.push(t.y);
        }
        !function () {
          var t = i.length / 3;
          if (c) {
            var _t209 = 0,
              _e207 = R * _t209;
            for (var _t210 = 0; _t210 < C; _t210++) {
              var _n201 = E[_t210];
              B(_n201[2] + _e207, _n201[1] + _e207, _n201[0] + _e207);
            }
            _t209 = o + 2 * p, _e207 = R * _t209;
            for (var _t211 = 0; _t211 < C; _t211++) {
              var _n202 = E[_t211];
              B(_n202[0] + _e207, _n202[1] + _e207, _n202[2] + _e207);
            }
          } else {
            for (var _t212 = 0; _t212 < C; _t212++) {
              var _e208 = E[_t212];
              B(_e208[2], _e208[1], _e208[0]);
            }
            for (var _t213 = 0; _t213 < C; _t213++) {
              var _e209 = E[_t213];
              B(_e209[0] + R * o, _e209[1] + R * o, _e209[2] + R * o);
            }
          }
          n.addGroup(t, i.length / 3 - t, 0);
        }(), function () {
          var t = i.length / 3;
          var e = 0;
          O(w, e), e += w.length;
          for (var _t214 = 0, _n203 = T.length; _t214 < _n203; _t214++) {
            var _n204 = T[_t214];
            O(_n204, e), e += _n204.length;
          }
          n.addGroup(t, i.length / 3 - t, 1);
        }();
      }
      _this63.setAttribute("position", new yi(i, 3)), _this63.setAttribute("uv", new yi(r, 2)), _this63.computeVertexNormals();
      return _this63;
    }
    _createClass(_c, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(_c.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(_c.prototype), "toJSON", this).call(this);
        return function (t, e, n) {
          if (n.shapes = [], Array.isArray(t)) for (var _e210 = 0, _i153 = t.length; _e210 < _i153; _e210++) {
            var _i154 = t[_e210];
            n.shapes.push(_i154.uuid);
          } else n.shapes.push(t.uuid);
          n.options = Object.assign({}, e), void 0 !== e.extrudePath && (n.options.extrudePath = e.extrudePath.toJSON());
          return n;
        }(this.parameters.shapes, this.parameters.options, t);
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t, e) {
        var n = [];
        for (var _i155 = 0, _r116 = t.shapes.length; _i155 < _r116; _i155++) {
          var _r117 = e[t.shapes[_i155]];
          n.push(_r117);
        }
        var i = t.options.extrudePath;
        return void 0 !== i && (t.options.extrudePath = new Al[i.type]().fromJSON(i)), new _c(n, t.options);
      }
    }]);
    return _c;
  }(Ai);
  var vc = {
    generateTopUV: function generateTopUV(t, e, n, i, r) {
      var s = e[3 * n],
        a = e[3 * n + 1],
        o = e[3 * i],
        l = e[3 * i + 1],
        c = e[3 * r],
        h = e[3 * r + 1];
      return [new ce(s, a), new ce(o, l), new ce(c, h)];
    },
    generateSideWallUV: function generateSideWallUV(t, e, n, i, r, s) {
      var a = e[3 * n],
        o = e[3 * n + 1],
        l = e[3 * n + 2],
        c = e[3 * i],
        h = e[3 * i + 1],
        u = e[3 * i + 2],
        d = e[3 * r],
        p = e[3 * r + 1],
        m = e[3 * r + 2],
        f = e[3 * s],
        g = e[3 * s + 1],
        _ = e[3 * s + 2];
      return Math.abs(o - h) < Math.abs(a - c) ? [new ce(a, 1 - l), new ce(c, 1 - u), new ce(d, 1 - m), new ce(f, 1 - _)] : [new ce(o, 1 - l), new ce(h, 1 - u), new ce(p, 1 - m), new ce(g, 1 - _)];
    }
  };
  var yc = /*#__PURE__*/function (_Nl2) {
    _inherits(yc, _Nl2);
    var _super68 = _createSuper(yc);
    function yc() {
      var _this64;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _classCallCheck(this, yc);
      var n = (1 + Math.sqrt(5)) / 2;
      _this64 = _super68.call(this, [-1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, 0, 0, -1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, n, 0, -1, n, 0, 1, -n, 0, -1, -n, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], t, e), _this64.type = "IcosahedronGeometry", _this64.parameters = {
        radius: t,
        detail: e
      };
      return _this64;
    }
    _createClass(yc, null, [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new yc(t.radius, t.detail);
      }
    }]);
    return yc;
  }(Nl);
  var xc = /*#__PURE__*/function (_Nl3) {
    _inherits(xc, _Nl3);
    var _super69 = _createSuper(xc);
    function xc() {
      var _this65;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _classCallCheck(this, xc);
      _this65 = _super69.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], t, e), _this65.type = "OctahedronGeometry", _this65.parameters = {
        radius: t,
        detail: e
      };
      return _this65;
    }
    _createClass(xc, null, [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new xc(t.radius, t.detail);
      }
    }]);
    return xc;
  }(Nl);
  var Mc = /*#__PURE__*/function (_Ai9) {
    _inherits(Mc, _Ai9);
    var _super70 = _createSuper(Mc);
    function Mc() {
      var _this66;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : .5;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2 * Math.PI;
      _classCallCheck(this, Mc);
      _this66 = _super70.call(this), _this66.type = "RingGeometry", _this66.parameters = {
        innerRadius: t,
        outerRadius: e,
        thetaSegments: n,
        phiSegments: i,
        thetaStart: r,
        thetaLength: s
      }, n = Math.max(3, n);
      var a = [],
        o = [],
        l = [],
        c = [];
      var h = t;
      var u = (e - t) / (i = Math.max(1, i)),
        d = new ze(),
        p = new ce();
      for (var _t215 = 0; _t215 <= i; _t215++) {
        for (var _t216 = 0; _t216 <= n; _t216++) {
          var _i156 = r + _t216 / n * s;
          d.x = h * Math.cos(_i156), d.y = h * Math.sin(_i156), o.push(d.x, d.y, d.z), l.push(0, 0, 1), p.x = (d.x / e + 1) / 2, p.y = (d.y / e + 1) / 2, c.push(p.x, p.y);
        }
        h += u;
      }
      for (var _t217 = 0; _t217 < i; _t217++) {
        var _e211 = _t217 * (n + 1);
        for (var _t218 = 0; _t218 < n; _t218++) {
          var _i157 = _t218 + _e211,
            _r118 = _i157,
            _s64 = _i157 + n + 1,
            _o40 = _i157 + n + 2,
            _l21 = _i157 + 1;
          a.push(_r118, _s64, _l21), a.push(_s64, _o40, _l21);
        }
      }
      _this66.setIndex(a), _this66.setAttribute("position", new yi(o, 3)), _this66.setAttribute("normal", new yi(l, 3)), _this66.setAttribute("uv", new yi(c, 2));
      return _this66;
    }
    _createClass(Mc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Mc.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Mc(t.innerRadius, t.outerRadius, t.thetaSegments, t.phiSegments, t.thetaStart, t.thetaLength);
      }
    }]);
    return Mc;
  }(Ai);
  var Sc = /*#__PURE__*/function (_Ai10) {
    _inherits(Sc, _Ai10);
    var _super71 = _createSuper(Sc);
    function Sc() {
      var _this67;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vl([new ce(0, .5), new ce(-.5, -.5), new ce(.5, -.5)]);
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;
      _classCallCheck(this, Sc);
      _this67 = _super71.call(this), _this67.type = "ShapeGeometry", _this67.parameters = {
        shapes: t,
        curveSegments: e
      };
      var n = [],
        i = [],
        r = [],
        s = [];
      var a = 0,
        o = 0;
      if (!1 === Array.isArray(t)) l(t);else for (var _e212 = 0; _e212 < t.length; _e212++) l(t[_e212]), _this67.addGroup(a, o, _e212), a += o, o = 0;
      function l(t) {
        var a = i.length / 3,
          l = t.extractPoints(e);
        var c = l.shape;
        var h = l.holes;
        !1 === mc.isClockWise(c) && (c = c.reverse());
        for (var _t219 = 0, _e213 = h.length; _t219 < _e213; _t219++) {
          var _e214 = h[_t219];
          !0 === mc.isClockWise(_e214) && (h[_t219] = _e214.reverse());
        }
        var u = mc.triangulateShape(c, h);
        for (var _t220 = 0, _e215 = h.length; _t220 < _e215; _t220++) {
          var _e216 = h[_t220];
          c = c.concat(_e216);
        }
        for (var _t221 = 0, _e217 = c.length; _t221 < _e217; _t221++) {
          var _e218 = c[_t221];
          i.push(_e218.x, _e218.y, 0), r.push(0, 0, 1), s.push(_e218.x, _e218.y);
        }
        for (var _t222 = 0, _e219 = u.length; _t222 < _e219; _t222++) {
          var _e220 = u[_t222],
            _i158 = _e220[0] + a,
            _r119 = _e220[1] + a,
            _s65 = _e220[2] + a;
          n.push(_i158, _r119, _s65), o += 3;
        }
      }
      _this67.setIndex(n), _this67.setAttribute("position", new yi(i, 3)), _this67.setAttribute("normal", new yi(r, 3)), _this67.setAttribute("uv", new yi(s, 2));
      return _this67;
    }
    _createClass(Sc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Sc.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Sc.prototype), "toJSON", this).call(this);
        return function (t, e) {
          if (e.shapes = [], Array.isArray(t)) for (var _n205 = 0, _i159 = t.length; _n205 < _i159; _n205++) {
            var _i160 = t[_n205];
            e.shapes.push(_i160.uuid);
          } else e.shapes.push(t.uuid);
          return e;
        }(this.parameters.shapes, t);
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t, e) {
        var n = [];
        for (var _i161 = 0, _r120 = t.shapes.length; _i161 < _r120; _i161++) {
          var _r121 = e[t.shapes[_i161]];
          n.push(_r121);
        }
        return new Sc(n, t.curveSegments);
      }
    }]);
    return Sc;
  }(Ai);
  var bc = /*#__PURE__*/function (_Ai11) {
    _inherits(bc, _Ai11);
    var _super72 = _createSuper(bc);
    function bc() {
      var _this68;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2 * Math.PI;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;
      _classCallCheck(this, bc);
      _this68 = _super72.call(this), _this68.type = "SphereGeometry", _this68.parameters = {
        radius: t,
        widthSegments: e,
        heightSegments: n,
        phiStart: i,
        phiLength: r,
        thetaStart: s,
        thetaLength: a
      }, e = Math.max(3, Math.floor(e)), n = Math.max(2, Math.floor(n));
      var o = Math.min(s + a, Math.PI);
      var l = 0;
      var c = [],
        h = new ze(),
        u = new ze(),
        d = [],
        p = [],
        m = [],
        f = [];
      for (var _d15 = 0; _d15 <= n; _d15++) {
        var _g8 = [],
          _8 = _d15 / n;
        var _v7 = 0;
        0 === _d15 && 0 === s ? _v7 = .5 / e : _d15 === n && o === Math.PI && (_v7 = -.5 / e);
        for (var _n206 = 0; _n206 <= e; _n206++) {
          var _o41 = _n206 / e;
          h.x = -t * Math.cos(i + _o41 * r) * Math.sin(s + _8 * a), h.y = t * Math.cos(s + _8 * a), h.z = t * Math.sin(i + _o41 * r) * Math.sin(s + _8 * a), p.push(h.x, h.y, h.z), u.copy(h).normalize(), m.push(u.x, u.y, u.z), f.push(_o41 + _v7, 1 - _8), _g8.push(l++);
        }
        c.push(_g8);
      }
      for (var _t223 = 0; _t223 < n; _t223++) for (var _i162 = 0; _i162 < e; _i162++) {
        var _e221 = c[_t223][_i162 + 1],
          _r122 = c[_t223][_i162],
          _a53 = c[_t223 + 1][_i162],
          _l22 = c[_t223 + 1][_i162 + 1];
        (0 !== _t223 || s > 0) && d.push(_e221, _r122, _l22), (_t223 !== n - 1 || o < Math.PI) && d.push(_r122, _a53, _l22);
      }
      _this68.setIndex(d), _this68.setAttribute("position", new yi(p, 3)), _this68.setAttribute("normal", new yi(m, 3)), _this68.setAttribute("uv", new yi(f, 2));
      return _this68;
    }
    _createClass(bc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(bc.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new bc(t.radius, t.widthSegments, t.heightSegments, t.phiStart, t.phiLength, t.thetaStart, t.thetaLength);
      }
    }]);
    return bc;
  }(Ai);
  var Tc = /*#__PURE__*/function (_Nl4) {
    _inherits(Tc, _Nl4);
    var _super73 = _createSuper(Tc);
    function Tc() {
      var _this69;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _classCallCheck(this, Tc);
      _this69 = _super73.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], t, e), _this69.type = "TetrahedronGeometry", _this69.parameters = {
        radius: t,
        detail: e
      };
      return _this69;
    }
    _createClass(Tc, null, [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Tc(t.radius, t.detail);
      }
    }]);
    return Tc;
  }(Nl);
  var Ec = /*#__PURE__*/function (_Ai12) {
    _inherits(Ec, _Ai12);
    var _super74 = _createSuper(Ec);
    function Ec() {
      var _this70;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .4;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 48;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2 * Math.PI;
      _classCallCheck(this, Ec);
      _this70 = _super74.call(this), _this70.type = "TorusGeometry", _this70.parameters = {
        radius: t,
        tube: e,
        radialSegments: n,
        tubularSegments: i,
        arc: r
      }, n = Math.floor(n), i = Math.floor(i);
      var s = [],
        a = [],
        o = [],
        l = [],
        c = new ze(),
        h = new ze(),
        u = new ze();
      for (var _s66 = 0; _s66 <= n; _s66++) for (var _d16 = 0; _d16 <= i; _d16++) {
        var _p13 = _d16 / i * r,
          _m9 = _s66 / n * Math.PI * 2;
        h.x = (t + e * Math.cos(_m9)) * Math.cos(_p13), h.y = (t + e * Math.cos(_m9)) * Math.sin(_p13), h.z = e * Math.sin(_m9), a.push(h.x, h.y, h.z), c.x = t * Math.cos(_p13), c.y = t * Math.sin(_p13), u.subVectors(h, c).normalize(), o.push(u.x, u.y, u.z), l.push(_d16 / i), l.push(_s66 / n);
      }
      for (var _t224 = 1; _t224 <= n; _t224++) for (var _e222 = 1; _e222 <= i; _e222++) {
        var _n207 = (i + 1) * _t224 + _e222 - 1,
          _r123 = (i + 1) * (_t224 - 1) + _e222 - 1,
          _a54 = (i + 1) * (_t224 - 1) + _e222,
          _o42 = (i + 1) * _t224 + _e222;
        s.push(_n207, _r123, _o42), s.push(_r123, _a54, _o42);
      }
      _this70.setIndex(s), _this70.setAttribute("position", new yi(a, 3)), _this70.setAttribute("normal", new yi(o, 3)), _this70.setAttribute("uv", new yi(l, 2));
      return _this70;
    }
    _createClass(Ec, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ec.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Ec(t.radius, t.tube, t.radialSegments, t.tubularSegments, t.arc);
      }
    }]);
    return Ec;
  }(Ai);
  var wc = /*#__PURE__*/function (_Ai13) {
    _inherits(wc, _Ai13);
    var _super75 = _createSuper(wc);
    function wc() {
      var _this71;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .4;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;
      _classCallCheck(this, wc);
      _this71 = _super75.call(this), _this71.type = "TorusKnotGeometry", _this71.parameters = {
        radius: t,
        tube: e,
        tubularSegments: n,
        radialSegments: i,
        p: r,
        q: s
      }, n = Math.floor(n), i = Math.floor(i);
      var a = [],
        o = [],
        l = [],
        c = [],
        h = new ze(),
        u = new ze(),
        d = new ze(),
        p = new ze(),
        m = new ze(),
        f = new ze(),
        g = new ze();
      for (var _a55 = 0; _a55 <= n; ++_a55) {
        var _v8 = _a55 / n * r * Math.PI * 2;
        _(_v8, r, s, t, d), _(_v8 + .01, r, s, t, p), f.subVectors(p, d), g.addVectors(p, d), m.crossVectors(f, g), g.crossVectors(m, f), m.normalize(), g.normalize();
        for (var _t225 = 0; _t225 <= i; ++_t225) {
          var _r124 = _t225 / i * Math.PI * 2,
            _s67 = -e * Math.cos(_r124),
            _p14 = e * Math.sin(_r124);
          h.x = d.x + (_s67 * g.x + _p14 * m.x), h.y = d.y + (_s67 * g.y + _p14 * m.y), h.z = d.z + (_s67 * g.z + _p14 * m.z), o.push(h.x, h.y, h.z), u.subVectors(h, d).normalize(), l.push(u.x, u.y, u.z), c.push(_a55 / n), c.push(_t225 / i);
        }
      }
      for (var _t226 = 1; _t226 <= n; _t226++) for (var _e223 = 1; _e223 <= i; _e223++) {
        var _n208 = (i + 1) * (_t226 - 1) + (_e223 - 1),
          _r125 = (i + 1) * _t226 + (_e223 - 1),
          _s68 = (i + 1) * _t226 + _e223,
          _o43 = (i + 1) * (_t226 - 1) + _e223;
        a.push(_n208, _r125, _o43), a.push(_r125, _s68, _o43);
      }
      function _(t, e, n, i, r) {
        var s = Math.cos(t),
          a = Math.sin(t),
          o = n / e * t,
          l = Math.cos(o);
        r.x = i * (2 + l) * .5 * s, r.y = i * (2 + l) * a * .5, r.z = i * Math.sin(o) * .5;
      }
      _this71.setIndex(a), _this71.setAttribute("position", new yi(o, 3)), _this71.setAttribute("normal", new yi(l, 3)), _this71.setAttribute("uv", new yi(c, 2));
      return _this71;
    }
    _createClass(wc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(wc.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new wc(t.radius, t.tube, t.tubularSegments, t.radialSegments, t.p, t.q);
      }
    }]);
    return wc;
  }(Ai);
  var Ac = /*#__PURE__*/function (_Ai14) {
    _inherits(Ac, _Ai14);
    var _super76 = _createSuper(Ac);
    function Ac() {
      var _this72;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new El(new ze(-1, -1, 0), new ze(-1, 1, 0), new ze(1, 1, 0));
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
      _classCallCheck(this, Ac);
      _this72 = _super76.call(this), _this72.type = "TubeGeometry", _this72.parameters = {
        path: t,
        tubularSegments: e,
        radius: n,
        radialSegments: i,
        closed: r
      };
      var s = t.computeFrenetFrames(e, r);
      _this72.tangents = s.tangents, _this72.normals = s.normals, _this72.binormals = s.binormals;
      var a = new ze(),
        o = new ze(),
        l = new ce();
      var c = new ze();
      var h = [],
        u = [],
        d = [],
        p = [];
      function m(r) {
        c = t.getPointAt(r / e, c);
        var l = s.normals[r],
          d = s.binormals[r];
        for (var _t227 = 0; _t227 <= i; _t227++) {
          var _e224 = _t227 / i * Math.PI * 2,
            _r126 = Math.sin(_e224),
            _s69 = -Math.cos(_e224);
          o.x = _s69 * l.x + _r126 * d.x, o.y = _s69 * l.y + _r126 * d.y, o.z = _s69 * l.z + _r126 * d.z, o.normalize(), u.push(o.x, o.y, o.z), a.x = c.x + n * o.x, a.y = c.y + n * o.y, a.z = c.z + n * o.z, h.push(a.x, a.y, a.z);
        }
      }
      !function () {
        for (var _t228 = 0; _t228 < e; _t228++) m(_t228);
        m(!1 === r ? e : 0), function () {
          for (var _t229 = 0; _t229 <= e; _t229++) for (var _n209 = 0; _n209 <= i; _n209++) l.x = _t229 / e, l.y = _n209 / i, d.push(l.x, l.y);
        }(), function () {
          for (var _t230 = 1; _t230 <= e; _t230++) for (var _e225 = 1; _e225 <= i; _e225++) {
            var _n210 = (i + 1) * (_t230 - 1) + (_e225 - 1),
              _r127 = (i + 1) * _t230 + (_e225 - 1),
              _s70 = (i + 1) * _t230 + _e225,
              _a56 = (i + 1) * (_t230 - 1) + _e225;
            p.push(_n210, _r127, _a56), p.push(_r127, _s70, _a56);
          }
        }();
      }(), _this72.setIndex(p), _this72.setAttribute("position", new yi(h, 3)), _this72.setAttribute("normal", new yi(u, 3)), _this72.setAttribute("uv", new yi(d, 2));
      return _this72;
    }
    _createClass(Ac, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ac.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Ac.prototype), "toJSON", this).call(this);
        return t.path = this.parameters.path.toJSON(), t;
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(t) {
        return new Ac(new Al[t.path.type]().fromJSON(t.path), t.tubularSegments, t.radius, t.radialSegments, t.closed);
      }
    }]);
    return Ac;
  }(Ai);
  var Rc = /*#__PURE__*/function (_Ai15) {
    _inherits(Rc, _Ai15);
    var _super77 = _createSuper(Rc);
    function Rc() {
      var _this73;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      _classCallCheck(this, Rc);
      if (_this73 = _super77.call(this), _this73.type = "WireframeGeometry", _this73.parameters = {
        geometry: t
      }, null !== t) {
        var _e226 = [],
          _n211 = new Set(),
          _i163 = new ze(),
          _r128 = new ze();
        if (null !== t.index) {
          var _s71 = t.attributes.position,
            _a57 = t.index;
          var _o44 = t.groups;
          0 === _o44.length && (_o44 = [{
            start: 0,
            count: _a57.count,
            materialIndex: 0
          }]);
          for (var _t231 = 0, _l23 = _o44.length; _t231 < _l23; ++_t231) {
            var _l24 = _o44[_t231],
              _c21 = _l24.start;
            for (var _t232 = _c21, _o45 = _c21 + _l24.count; _t232 < _o45; _t232 += 3) for (var _o46 = 0; _o46 < 3; _o46++) {
              var _l25 = _a57.getX(_t232 + _o46),
                _c22 = _a57.getX(_t232 + (_o46 + 1) % 3);
              _i163.fromBufferAttribute(_s71, _l25), _r128.fromBufferAttribute(_s71, _c22), !0 === Cc(_i163, _r128, _n211) && (_e226.push(_i163.x, _i163.y, _i163.z), _e226.push(_r128.x, _r128.y, _r128.z));
            }
          }
        } else {
          var _s72 = t.attributes.position;
          for (var _t233 = 0, _a58 = _s72.count / 3; _t233 < _a58; _t233++) for (var _a59 = 0; _a59 < 3; _a59++) {
            var _o47 = 3 * _t233 + _a59,
              _l26 = 3 * _t233 + (_a59 + 1) % 3;
            _i163.fromBufferAttribute(_s72, _o47), _r128.fromBufferAttribute(_s72, _l26), !0 === Cc(_i163, _r128, _n211) && (_e226.push(_i163.x, _i163.y, _i163.z), _e226.push(_r128.x, _r128.y, _r128.z));
          }
        }
        _this73.setAttribute("position", new yi(_e226, 3));
      }
      return _possibleConstructorReturn(_this73);
    }
    _createClass(Rc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Rc.prototype), "copy", this).call(this, t), this.parameters = Object.assign({}, t.parameters), this;
      }
    }]);
    return Rc;
  }(Ai);
  function Cc(t, e, n) {
    var i = "".concat(t.x, ",").concat(t.y, ",").concat(t.z, "-").concat(e.x, ",").concat(e.y, ",").concat(e.z),
      r = "".concat(e.x, ",").concat(e.y, ",").concat(e.z, "-").concat(t.x, ",").concat(t.y, ",").concat(t.z);
    return !0 !== n.has(i) && !0 !== n.has(r) && (n.add(i), n.add(r), !0);
  }
  var Lc = Object.freeze({
    __proto__: null,
    BoxGeometry: qi,
    CapsuleGeometry: Pl,
    CircleGeometry: Il,
    ConeGeometry: Dl,
    CylinderGeometry: Ul,
    DodecahedronGeometry: Ol,
    EdgesGeometry: Gl,
    ExtrudeGeometry: _c,
    IcosahedronGeometry: yc,
    LatheGeometry: Ll,
    OctahedronGeometry: xc,
    PlaneGeometry: mr,
    PolyhedronGeometry: Nl,
    RingGeometry: Mc,
    ShapeGeometry: Sc,
    SphereGeometry: bc,
    TetrahedronGeometry: Tc,
    TorusGeometry: Ec,
    TorusKnotGeometry: wc,
    TubeGeometry: Ac,
    WireframeGeometry: Rc
  });
  var Pc = /*#__PURE__*/function (_ei8) {
    _inherits(Pc, _ei8);
    var _super78 = _createSuper(Pc);
    function Pc(t) {
      var _this74;
      _classCallCheck(this, Pc);
      _this74 = _super78.call(this), _this74.isShadowMaterial = !0, _this74.type = "ShadowMaterial", _this74.color = new ai(0), _this74.transparent = !0, _this74.fog = !0, _this74.setValues(t);
      return _this74;
    }
    _createClass(Pc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Pc.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.fog = t.fog, this;
      }
    }]);
    return Pc;
  }(ei);
  var Ic = /*#__PURE__*/function (_$i) {
    _inherits(Ic, _$i);
    var _super79 = _createSuper(Ic);
    function Ic(t) {
      var _this75;
      _classCallCheck(this, Ic);
      _this75 = _super79.call(this, t), _this75.isRawShaderMaterial = !0, _this75.type = "RawShaderMaterial";
      return _this75;
    }
    return _createClass(Ic);
  }($i);
  var Uc = /*#__PURE__*/function (_ei9) {
    _inherits(Uc, _ei9);
    var _super80 = _createSuper(Uc);
    function Uc(t) {
      var _this76;
      _classCallCheck(this, Uc);
      _this76 = _super80.call(this), _this76.isMeshStandardMaterial = !0, _this76.defines = {
        STANDARD: ""
      }, _this76.type = "MeshStandardMaterial", _this76.color = new ai(16777215), _this76.roughness = 1, _this76.metalness = 0, _this76.map = null, _this76.lightMap = null, _this76.lightMapIntensity = 1, _this76.aoMap = null, _this76.aoMapIntensity = 1, _this76.emissive = new ai(0), _this76.emissiveIntensity = 1, _this76.emissiveMap = null, _this76.bumpMap = null, _this76.bumpScale = 1, _this76.normalMap = null, _this76.normalMapType = 0, _this76.normalScale = new ce(1, 1), _this76.displacementMap = null, _this76.displacementScale = 1, _this76.displacementBias = 0, _this76.roughnessMap = null, _this76.metalnessMap = null, _this76.alphaMap = null, _this76.envMap = null, _this76.envMapIntensity = 1, _this76.wireframe = !1, _this76.wireframeLinewidth = 1, _this76.wireframeLinecap = "round", _this76.wireframeLinejoin = "round", _this76.flatShading = !1, _this76.fog = !0, _this76.setValues(t);
      return _this76;
    }
    _createClass(Uc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Uc.prototype), "copy", this).call(this, t), this.defines = {
          STANDARD: ""
        }, this.color.copy(t.color), this.roughness = t.roughness, this.metalness = t.metalness, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.roughnessMap = t.roughnessMap, this.metalnessMap = t.metalnessMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapIntensity = t.envMapIntensity, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
      }
    }]);
    return Uc;
  }(ei);
  var Dc = /*#__PURE__*/function (_Uc) {
    _inherits(Dc, _Uc);
    var _super81 = _createSuper(Dc);
    function Dc(t) {
      var _this77;
      _classCallCheck(this, Dc);
      _this77 = _super81.call(this), _this77.isMeshPhysicalMaterial = !0, _this77.defines = {
        STANDARD: "",
        PHYSICAL: ""
      }, _this77.type = "MeshPhysicalMaterial", _this77.anisotropyRotation = 0, _this77.anisotropyMap = null, _this77.clearcoatMap = null, _this77.clearcoatRoughness = 0, _this77.clearcoatRoughnessMap = null, _this77.clearcoatNormalScale = new ce(1, 1), _this77.clearcoatNormalMap = null, _this77.ior = 1.5, Object.defineProperty(_assertThisInitialized(_this77), "reflectivity", {
        get: function get() {
          return te(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
        },
        set: function set(t) {
          this.ior = (1 + .4 * t) / (1 - .4 * t);
        }
      }), _this77.iridescenceMap = null, _this77.iridescenceIOR = 1.3, _this77.iridescenceThicknessRange = [100, 400], _this77.iridescenceThicknessMap = null, _this77.sheenColor = new ai(0), _this77.sheenColorMap = null, _this77.sheenRoughness = 1, _this77.sheenRoughnessMap = null, _this77.transmissionMap = null, _this77.thickness = 0, _this77.thicknessMap = null, _this77.attenuationDistance = 1 / 0, _this77.attenuationColor = new ai(1, 1, 1), _this77.specularIntensity = 1, _this77.specularIntensityMap = null, _this77.specularColor = new ai(1, 1, 1), _this77.specularColorMap = null, _this77._anisotropy = 0, _this77._clearcoat = 0, _this77._iridescence = 0, _this77._sheen = 0, _this77._transmission = 0, _this77.setValues(t);
      return _this77;
    }
    _createClass(Dc, [{
      key: "anisotropy",
      get: function get() {
        return this._anisotropy;
      },
      set: function set(t) {
        this._anisotropy > 0 != t > 0 && this.version++, this._anisotropy = t;
      }
    }, {
      key: "clearcoat",
      get: function get() {
        return this._clearcoat;
      },
      set: function set(t) {
        this._clearcoat > 0 != t > 0 && this.version++, this._clearcoat = t;
      }
    }, {
      key: "iridescence",
      get: function get() {
        return this._iridescence;
      },
      set: function set(t) {
        this._iridescence > 0 != t > 0 && this.version++, this._iridescence = t;
      }
    }, {
      key: "sheen",
      get: function get() {
        return this._sheen;
      },
      set: function set(t) {
        this._sheen > 0 != t > 0 && this.version++, this._sheen = t;
      }
    }, {
      key: "transmission",
      get: function get() {
        return this._transmission;
      },
      set: function set(t) {
        this._transmission > 0 != t > 0 && this.version++, this._transmission = t;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Dc.prototype), "copy", this).call(this, t), this.defines = {
          STANDARD: "",
          PHYSICAL: ""
        }, this.anisotropy = t.anisotropy, this.anisotropyRotation = t.anisotropyRotation, this.anisotropyMap = t.anisotropyMap, this.clearcoat = t.clearcoat, this.clearcoatMap = t.clearcoatMap, this.clearcoatRoughness = t.clearcoatRoughness, this.clearcoatRoughnessMap = t.clearcoatRoughnessMap, this.clearcoatNormalMap = t.clearcoatNormalMap, this.clearcoatNormalScale.copy(t.clearcoatNormalScale), this.ior = t.ior, this.iridescence = t.iridescence, this.iridescenceMap = t.iridescenceMap, this.iridescenceIOR = t.iridescenceIOR, this.iridescenceThicknessRange = _toConsumableArray(t.iridescenceThicknessRange), this.iridescenceThicknessMap = t.iridescenceThicknessMap, this.sheen = t.sheen, this.sheenColor.copy(t.sheenColor), this.sheenColorMap = t.sheenColorMap, this.sheenRoughness = t.sheenRoughness, this.sheenRoughnessMap = t.sheenRoughnessMap, this.transmission = t.transmission, this.transmissionMap = t.transmissionMap, this.thickness = t.thickness, this.thicknessMap = t.thicknessMap, this.attenuationDistance = t.attenuationDistance, this.attenuationColor.copy(t.attenuationColor), this.specularIntensity = t.specularIntensity, this.specularIntensityMap = t.specularIntensityMap, this.specularColor.copy(t.specularColor), this.specularColorMap = t.specularColorMap, this;
      }
    }]);
    return Dc;
  }(Uc);
  var Nc = /*#__PURE__*/function (_ei10) {
    _inherits(Nc, _ei10);
    var _super82 = _createSuper(Nc);
    function Nc(t) {
      var _this78;
      _classCallCheck(this, Nc);
      _this78 = _super82.call(this), _this78.isMeshPhongMaterial = !0, _this78.type = "MeshPhongMaterial", _this78.color = new ai(16777215), _this78.specular = new ai(1118481), _this78.shininess = 30, _this78.map = null, _this78.lightMap = null, _this78.lightMapIntensity = 1, _this78.aoMap = null, _this78.aoMapIntensity = 1, _this78.emissive = new ai(0), _this78.emissiveIntensity = 1, _this78.emissiveMap = null, _this78.bumpMap = null, _this78.bumpScale = 1, _this78.normalMap = null, _this78.normalMapType = 0, _this78.normalScale = new ce(1, 1), _this78.displacementMap = null, _this78.displacementScale = 1, _this78.displacementBias = 0, _this78.specularMap = null, _this78.alphaMap = null, _this78.envMap = null, _this78.combine = l, _this78.reflectivity = 1, _this78.refractionRatio = .98, _this78.wireframe = !1, _this78.wireframeLinewidth = 1, _this78.wireframeLinecap = "round", _this78.wireframeLinejoin = "round", _this78.flatShading = !1, _this78.fog = !0, _this78.setValues(t);
      return _this78;
    }
    _createClass(Nc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Nc.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.specular.copy(t.specular), this.shininess = t.shininess, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
      }
    }]);
    return Nc;
  }(ei);
  var Oc = /*#__PURE__*/function (_ei11) {
    _inherits(Oc, _ei11);
    var _super83 = _createSuper(Oc);
    function Oc(t) {
      var _this79;
      _classCallCheck(this, Oc);
      _this79 = _super83.call(this), _this79.isMeshToonMaterial = !0, _this79.defines = {
        TOON: ""
      }, _this79.type = "MeshToonMaterial", _this79.color = new ai(16777215), _this79.map = null, _this79.gradientMap = null, _this79.lightMap = null, _this79.lightMapIntensity = 1, _this79.aoMap = null, _this79.aoMapIntensity = 1, _this79.emissive = new ai(0), _this79.emissiveIntensity = 1, _this79.emissiveMap = null, _this79.bumpMap = null, _this79.bumpScale = 1, _this79.normalMap = null, _this79.normalMapType = 0, _this79.normalScale = new ce(1, 1), _this79.displacementMap = null, _this79.displacementScale = 1, _this79.displacementBias = 0, _this79.alphaMap = null, _this79.wireframe = !1, _this79.wireframeLinewidth = 1, _this79.wireframeLinecap = "round", _this79.wireframeLinejoin = "round", _this79.fog = !0, _this79.setValues(t);
      return _this79;
    }
    _createClass(Oc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Oc.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.gradientMap = t.gradientMap, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this;
      }
    }]);
    return Oc;
  }(ei);
  var Fc = /*#__PURE__*/function (_ei12) {
    _inherits(Fc, _ei12);
    var _super84 = _createSuper(Fc);
    function Fc(t) {
      var _this80;
      _classCallCheck(this, Fc);
      _this80 = _super84.call(this), _this80.isMeshNormalMaterial = !0, _this80.type = "MeshNormalMaterial", _this80.bumpMap = null, _this80.bumpScale = 1, _this80.normalMap = null, _this80.normalMapType = 0, _this80.normalScale = new ce(1, 1), _this80.displacementMap = null, _this80.displacementScale = 1, _this80.displacementBias = 0, _this80.wireframe = !1, _this80.wireframeLinewidth = 1, _this80.flatShading = !1, _this80.setValues(t);
      return _this80;
    }
    _createClass(Fc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Fc.prototype), "copy", this).call(this, t), this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.flatShading = t.flatShading, this;
      }
    }]);
    return Fc;
  }(ei);
  var Bc = /*#__PURE__*/function (_ei13) {
    _inherits(Bc, _ei13);
    var _super85 = _createSuper(Bc);
    function Bc(t) {
      var _this81;
      _classCallCheck(this, Bc);
      _this81 = _super85.call(this), _this81.isMeshLambertMaterial = !0, _this81.type = "MeshLambertMaterial", _this81.color = new ai(16777215), _this81.map = null, _this81.lightMap = null, _this81.lightMapIntensity = 1, _this81.aoMap = null, _this81.aoMapIntensity = 1, _this81.emissive = new ai(0), _this81.emissiveIntensity = 1, _this81.emissiveMap = null, _this81.bumpMap = null, _this81.bumpScale = 1, _this81.normalMap = null, _this81.normalMapType = 0, _this81.normalScale = new ce(1, 1), _this81.displacementMap = null, _this81.displacementScale = 1, _this81.displacementBias = 0, _this81.specularMap = null, _this81.alphaMap = null, _this81.envMap = null, _this81.combine = l, _this81.reflectivity = 1, _this81.refractionRatio = .98, _this81.wireframe = !1, _this81.wireframeLinewidth = 1, _this81.wireframeLinecap = "round", _this81.wireframeLinejoin = "round", _this81.flatShading = !1, _this81.fog = !0, _this81.setValues(t);
      return _this81;
    }
    _createClass(Bc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Bc.prototype), "copy", this).call(this, t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
      }
    }]);
    return Bc;
  }(ei);
  var zc = /*#__PURE__*/function (_ei14) {
    _inherits(zc, _ei14);
    var _super86 = _createSuper(zc);
    function zc(t) {
      var _this82;
      _classCallCheck(this, zc);
      _this82 = _super86.call(this), _this82.isMeshMatcapMaterial = !0, _this82.defines = {
        MATCAP: ""
      }, _this82.type = "MeshMatcapMaterial", _this82.color = new ai(16777215), _this82.matcap = null, _this82.map = null, _this82.bumpMap = null, _this82.bumpScale = 1, _this82.normalMap = null, _this82.normalMapType = 0, _this82.normalScale = new ce(1, 1), _this82.displacementMap = null, _this82.displacementScale = 1, _this82.displacementBias = 0, _this82.alphaMap = null, _this82.flatShading = !1, _this82.fog = !0, _this82.setValues(t);
      return _this82;
    }
    _createClass(zc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(zc.prototype), "copy", this).call(this, t), this.defines = {
          MATCAP: ""
        }, this.color.copy(t.color), this.matcap = t.matcap, this.map = t.map, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.flatShading = t.flatShading, this.fog = t.fog, this;
      }
    }]);
    return zc;
  }(ei);
  var Hc = /*#__PURE__*/function (_ko) {
    _inherits(Hc, _ko);
    var _super87 = _createSuper(Hc);
    function Hc(t) {
      var _this83;
      _classCallCheck(this, Hc);
      _this83 = _super87.call(this), _this83.isLineDashedMaterial = !0, _this83.type = "LineDashedMaterial", _this83.scale = 1, _this83.dashSize = 3, _this83.gapSize = 1, _this83.setValues(t);
      return _this83;
    }
    _createClass(Hc, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Hc.prototype), "copy", this).call(this, t), this.scale = t.scale, this.dashSize = t.dashSize, this.gapSize = t.gapSize, this;
      }
    }]);
    return Hc;
  }(ko);
  function Gc(t, e, n) {
    return !t || !n && t.constructor === e ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t);
  }
  function Vc(t) {
    return ArrayBuffer.isView(t) && !(t instanceof DataView);
  }
  function kc(t) {
    var e = t.length,
      n = new Array(e);
    for (var _t234 = 0; _t234 !== e; ++_t234) n[_t234] = _t234;
    return n.sort(function (e, n) {
      return t[e] - t[n];
    }), n;
  }
  function Wc(t, e, n) {
    var i = t.length,
      r = new t.constructor(i);
    for (var _s73 = 0, _a60 = 0; _a60 !== i; ++_s73) {
      var _i164 = n[_s73] * e;
      for (var _n212 = 0; _n212 !== e; ++_n212) r[_a60++] = t[_i164 + _n212];
    }
    return r;
  }
  function Xc(t, e, n, i) {
    var r = 1,
      s = t[0];
    for (; void 0 !== s && void 0 === s[i];) s = t[r++];
    if (void 0 === s) return;
    var a = s[i];
    if (void 0 !== a) if (Array.isArray(a)) do {
      a = s[i], void 0 !== a && (e.push(s.time), n.push.apply(n, a)), s = t[r++];
    } while (void 0 !== s);else if (void 0 !== a.toArray) do {
      a = s[i], void 0 !== a && (e.push(s.time), a.toArray(n, n.length)), s = t[r++];
    } while (void 0 !== s);else do {
      a = s[i], void 0 !== a && (e.push(s.time), n.push(a)), s = t[r++];
    } while (void 0 !== s);
  }
  var jc = {
    convertArray: Gc,
    isTypedArray: Vc,
    getKeyframeOrder: kc,
    sortedArray: Wc,
    flattenJSON: Xc,
    subclip: function subclip(t, e, n, i) {
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;
      var s = t.clone();
      s.name = e;
      var a = [];
      for (var _t235 = 0; _t235 < s.tracks.length; ++_t235) {
        var _e227 = s.tracks[_t235],
          _o48 = _e227.getValueSize(),
          _l27 = [],
          _c23 = [];
        for (var _t236 = 0; _t236 < _e227.times.length; ++_t236) {
          var _s74 = _e227.times[_t236] * r;
          if (!(_s74 < n || _s74 >= i)) {
            _l27.push(_e227.times[_t236]);
            for (var _n213 = 0; _n213 < _o48; ++_n213) _c23.push(_e227.values[_t236 * _o48 + _n213]);
          }
        }
        0 !== _l27.length && (_e227.times = Gc(_l27, _e227.times.constructor), _e227.values = Gc(_c23, _e227.values.constructor), a.push(_e227));
      }
      s.tracks = a;
      var o = 1 / 0;
      for (var _t237 = 0; _t237 < s.tracks.length; ++_t237) o > s.tracks[_t237].times[0] && (o = s.tracks[_t237].times[0]);
      for (var _t238 = 0; _t238 < s.tracks.length; ++_t238) s.tracks[_t238].shift(-1 * o);
      return s.resetDuration(), s;
    },
    makeClipAdditive: function makeClipAdditive(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;
      i <= 0 && (i = 30);
      var r = n.tracks.length,
        s = e / i;
      var _loop = function _loop() {
          var i = n.tracks[_e228],
            r = i.ValueTypeName;
          if ("bool" === r || "string" === r) return 0; // continue
          var a = t.tracks.find(function (t) {
            return t.name === i.name && t.ValueTypeName === r;
          });
          if (void 0 === a) return 0; // continue
          var o = 0;
          var l = i.getValueSize();
          i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (o = l / 3);
          var c = 0;
          var h = a.getValueSize();
          a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (c = h / 3);
          var u = i.times.length - 1;
          var d;
          if (s <= i.times[0]) {
            var _t239 = o,
              _e229 = l - o;
            d = i.values.slice(_t239, _e229);
          } else if (s >= i.times[u]) {
            var _t240 = u * l + o,
              _e230 = _t240 + l - o;
            d = i.values.slice(_t240, _e230);
          } else {
            var _t241 = i.createInterpolant(),
              _e231 = o,
              _n214 = l - o;
            _t241.evaluate(s), d = _t241.resultBuffer.slice(_e231, _n214);
          }
          if ("quaternion" === r) {
            new Be().fromArray(d).normalize().conjugate().toArray(d);
          }
          var p = a.times.length;
          for (var _t242 = 0; _t242 < p; ++_t242) {
            var _e232 = _t242 * h + c;
            if ("quaternion" === r) Be.multiplyQuaternionsFlat(a.values, _e232, d, 0, a.values, _e232);else {
              var _t243 = h - 2 * c;
              for (var _n215 = 0; _n215 < _t243; ++_n215) a.values[_e232 + _n215] -= d[_n215];
            }
          }
        },
        _ret;
      for (var _e228 = 0; _e228 < r; ++_e228) {
        _ret = _loop();
        if (_ret === 0) continue;
      }
      return t.blendMode = Lt, t;
    }
  };
  var qc = /*#__PURE__*/function () {
    function qc(t, e, n, i) {
      _classCallCheck(this, qc);
      this.parameterPositions = t, this._cachedIndex = 0, this.resultBuffer = void 0 !== i ? i : new e.constructor(n), this.sampleValues = e, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
    }
    _createClass(qc, [{
      key: "evaluate",
      value: function evaluate(t) {
        var e = this.parameterPositions;
        var n = this._cachedIndex,
          i = e[n],
          r = e[n - 1];
        t: {
          e: {
            var _s75;
            n: {
              i: if (!(t < i)) {
                for (var _s76 = n + 2;;) {
                  if (void 0 === i) {
                    if (t < r) break i;
                    return n = e.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                  }
                  if (n === _s76) break;
                  if (r = i, i = e[++n], t < i) break e;
                }
                _s75 = e.length;
                break n;
              }
              if (t >= r) break t;
              {
                var _a61 = e[1];
                t < _a61 && (n = 2, r = _a61);
                for (var _s77 = n - 2;;) {
                  if (void 0 === r) return this._cachedIndex = 0, this.copySampleValue_(0);
                  if (n === _s77) break;
                  if (i = r, r = e[--n - 1], t >= r) break e;
                }
                _s75 = n, n = 0;
              }
            }
            for (; n < _s75;) {
              var _i165 = n + _s75 >>> 1;
              t < e[_i165] ? _s75 = _i165 : n = _i165 + 1;
            }
            if (i = e[n], r = e[n - 1], void 0 === r) return this._cachedIndex = 0, this.copySampleValue_(0);
            if (void 0 === i) return n = e.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
          }
          this._cachedIndex = n, this.intervalChanged_(n, r, i);
        }
        return this.interpolate_(n, r, t, i);
      }
    }, {
      key: "getSettings_",
      value: function getSettings_() {
        return this.settings || this.DefaultSettings_;
      }
    }, {
      key: "copySampleValue_",
      value: function copySampleValue_(t) {
        var e = this.resultBuffer,
          n = this.sampleValues,
          i = this.valueSize,
          r = t * i;
        for (var _t244 = 0; _t244 !== i; ++_t244) e[_t244] = n[r + _t244];
        return e;
      }
    }, {
      key: "interpolate_",
      value: function interpolate_() {
        throw new Error("call to abstract method");
      }
    }, {
      key: "intervalChanged_",
      value: function intervalChanged_() {}
    }]);
    return qc;
  }();
  var Yc = /*#__PURE__*/function (_qc) {
    _inherits(Yc, _qc);
    var _super88 = _createSuper(Yc);
    function Yc(t, e, n, i) {
      var _this84;
      _classCallCheck(this, Yc);
      _this84 = _super88.call(this, t, e, n, i), _this84._weightPrev = -0, _this84._offsetPrev = -0, _this84._weightNext = -0, _this84._offsetNext = -0, _this84.DefaultSettings_ = {
        endingStart: wt,
        endingEnd: wt
      };
      return _this84;
    }
    _createClass(Yc, [{
      key: "intervalChanged_",
      value: function intervalChanged_(t, e, n) {
        var i = this.parameterPositions;
        var r = t - 2,
          s = t + 1,
          a = i[r],
          o = i[s];
        if (void 0 === a) switch (this.getSettings_().endingStart) {
          case At:
            r = t, a = 2 * e - n;
            break;
          case Rt:
            r = i.length - 2, a = e + i[r] - i[r + 1];
            break;
          default:
            r = t, a = n;
        }
        if (void 0 === o) switch (this.getSettings_().endingEnd) {
          case At:
            s = t, o = 2 * n - e;
            break;
          case Rt:
            s = 1, o = n + i[1] - i[0];
            break;
          default:
            s = t - 1, o = e;
        }
        var l = .5 * (n - e),
          c = this.valueSize;
        this._weightPrev = l / (e - a), this._weightNext = l / (o - n), this._offsetPrev = r * c, this._offsetNext = s * c;
      }
    }, {
      key: "interpolate_",
      value: function interpolate_(t, e, n, i) {
        var r = this.resultBuffer,
          s = this.sampleValues,
          a = this.valueSize,
          o = t * a,
          l = o - a,
          c = this._offsetPrev,
          h = this._offsetNext,
          u = this._weightPrev,
          d = this._weightNext,
          p = (n - e) / (i - e),
          m = p * p,
          f = m * p,
          g = -u * f + 2 * u * m - u * p,
          _ = (1 + u) * f + (-1.5 - 2 * u) * m + (-.5 + u) * p + 1,
          v = (-1 - d) * f + (1.5 + d) * m + .5 * p,
          y = d * f - d * m;
        for (var _t245 = 0; _t245 !== a; ++_t245) r[_t245] = g * s[c + _t245] + _ * s[l + _t245] + v * s[o + _t245] + y * s[h + _t245];
        return r;
      }
    }]);
    return Yc;
  }(qc);
  var Zc = /*#__PURE__*/function (_qc2) {
    _inherits(Zc, _qc2);
    var _super89 = _createSuper(Zc);
    function Zc(t, e, n, i) {
      _classCallCheck(this, Zc);
      return _super89.call(this, t, e, n, i);
    }
    _createClass(Zc, [{
      key: "interpolate_",
      value: function interpolate_(t, e, n, i) {
        var r = this.resultBuffer,
          s = this.sampleValues,
          a = this.valueSize,
          o = t * a,
          l = o - a,
          c = (n - e) / (i - e),
          h = 1 - c;
        for (var _t246 = 0; _t246 !== a; ++_t246) r[_t246] = s[l + _t246] * h + s[o + _t246] * c;
        return r;
      }
    }]);
    return Zc;
  }(qc);
  var Jc = /*#__PURE__*/function (_qc3) {
    _inherits(Jc, _qc3);
    var _super90 = _createSuper(Jc);
    function Jc(t, e, n, i) {
      _classCallCheck(this, Jc);
      return _super90.call(this, t, e, n, i);
    }
    _createClass(Jc, [{
      key: "interpolate_",
      value: function interpolate_(t) {
        return this.copySampleValue_(t - 1);
      }
    }]);
    return Jc;
  }(qc);
  var Kc = /*#__PURE__*/function () {
    function Kc(t, e, n, i) {
      _classCallCheck(this, Kc);
      if (void 0 === t) throw new Error("THREE.KeyframeTrack: track name is undefined");
      if (void 0 === e || 0 === e.length) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
      this.name = t, this.times = Gc(e, this.TimeBufferType), this.values = Gc(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation);
    }
    _createClass(Kc, [{
      key: "InterpolantFactoryMethodDiscrete",
      value: function InterpolantFactoryMethodDiscrete(t) {
        return new Jc(this.times, this.values, this.getValueSize(), t);
      }
    }, {
      key: "InterpolantFactoryMethodLinear",
      value: function InterpolantFactoryMethodLinear(t) {
        return new Zc(this.times, this.values, this.getValueSize(), t);
      }
    }, {
      key: "InterpolantFactoryMethodSmooth",
      value: function InterpolantFactoryMethodSmooth(t) {
        return new Yc(this.times, this.values, this.getValueSize(), t);
      }
    }, {
      key: "setInterpolation",
      value: function setInterpolation(t) {
        var e;
        switch (t) {
          case bt:
            e = this.InterpolantFactoryMethodDiscrete;
            break;
          case Tt:
            e = this.InterpolantFactoryMethodLinear;
            break;
          case Et:
            e = this.InterpolantFactoryMethodSmooth;
        }
        if (void 0 === e) {
          var _e233 = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
          if (void 0 === this.createInterpolant) {
            if (t === this.DefaultInterpolation) throw new Error(_e233);
            this.setInterpolation(this.DefaultInterpolation);
          }
          return console.warn("THREE.KeyframeTrack:", _e233), this;
        }
        return this.createInterpolant = e, this;
      }
    }, {
      key: "getInterpolation",
      value: function getInterpolation() {
        switch (this.createInterpolant) {
          case this.InterpolantFactoryMethodDiscrete:
            return bt;
          case this.InterpolantFactoryMethodLinear:
            return Tt;
          case this.InterpolantFactoryMethodSmooth:
            return Et;
        }
      }
    }, {
      key: "getValueSize",
      value: function getValueSize() {
        return this.values.length / this.times.length;
      }
    }, {
      key: "shift",
      value: function shift(t) {
        if (0 !== t) {
          var _e234 = this.times;
          for (var _n216 = 0, _i166 = _e234.length; _n216 !== _i166; ++_n216) _e234[_n216] += t;
        }
        return this;
      }
    }, {
      key: "scale",
      value: function scale(t) {
        if (1 !== t) {
          var _e235 = this.times;
          for (var _n217 = 0, _i167 = _e235.length; _n217 !== _i167; ++_n217) _e235[_n217] *= t;
        }
        return this;
      }
    }, {
      key: "trim",
      value: function trim(t, e) {
        var n = this.times,
          i = n.length;
        var r = 0,
          s = i - 1;
        for (; r !== i && n[r] < t;) ++r;
        for (; -1 !== s && n[s] > e;) --s;
        if (++s, 0 !== r || s !== i) {
          r >= s && (s = Math.max(s, 1), r = s - 1);
          var _t247 = this.getValueSize();
          this.times = n.slice(r, s), this.values = this.values.slice(r * _t247, s * _t247);
        }
        return this;
      }
    }, {
      key: "validate",
      value: function validate() {
        var t = !0;
        var e = this.getValueSize();
        e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), t = !1);
        var n = this.times,
          i = this.values,
          r = n.length;
        0 === r && (console.error("THREE.KeyframeTrack: Track is empty.", this), t = !1);
        var s = null;
        for (var _e236 = 0; _e236 !== r; _e236++) {
          var _i168 = n[_e236];
          if ("number" == typeof _i168 && isNaN(_i168)) {
            console.error("THREE.KeyframeTrack: Time is not a valid number.", this, _e236, _i168), t = !1;
            break;
          }
          if (null !== s && s > _i168) {
            console.error("THREE.KeyframeTrack: Out of order keys.", this, _e236, _i168, s), t = !1;
            break;
          }
          s = _i168;
        }
        if (void 0 !== i && Vc(i)) for (var _e237 = 0, _n218 = i.length; _e237 !== _n218; ++_e237) {
          var _n219 = i[_e237];
          if (isNaN(_n219)) {
            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, _e237, _n219), t = !1;
            break;
          }
        }
        return t;
      }
    }, {
      key: "optimize",
      value: function optimize() {
        var t = this.times.slice(),
          e = this.values.slice(),
          n = this.getValueSize(),
          i = this.getInterpolation() === Et,
          r = t.length - 1;
        var s = 1;
        for (var _a62 = 1; _a62 < r; ++_a62) {
          var _r129 = !1;
          var _o49 = t[_a62];
          if (_o49 !== t[_a62 + 1] && (1 !== _a62 || _o49 !== t[0])) if (i) _r129 = !0;else {
            var _t248 = _a62 * n,
              _i169 = _t248 - n,
              _s78 = _t248 + n;
            for (var _a63 = 0; _a63 !== n; ++_a63) {
              var _n220 = e[_t248 + _a63];
              if (_n220 !== e[_i169 + _a63] || _n220 !== e[_s78 + _a63]) {
                _r129 = !0;
                break;
              }
            }
          }
          if (_r129) {
            if (_a62 !== s) {
              t[s] = t[_a62];
              var _i170 = _a62 * n,
                _r130 = s * n;
              for (var _t249 = 0; _t249 !== n; ++_t249) e[_r130 + _t249] = e[_i170 + _t249];
            }
            ++s;
          }
        }
        if (r > 0) {
          t[s] = t[r];
          for (var _t250 = r * n, _i171 = s * n, _a64 = 0; _a64 !== n; ++_a64) e[_i171 + _a64] = e[_t250 + _a64];
          ++s;
        }
        return s !== t.length ? (this.times = t.slice(0, s), this.values = e.slice(0, s * n)) : (this.times = t, this.values = e), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        var t = this.times.slice(),
          e = this.values.slice(),
          n = new (0, this.constructor)(this.name, t, e);
        return n.createInterpolant = this.createInterpolant, n;
      }
    }], [{
      key: "toJSON",
      value: function toJSON(t) {
        var e = t.constructor;
        var n;
        if (e.toJSON !== this.toJSON) n = e.toJSON(t);else {
          n = {
            name: t.name,
            times: Gc(t.times, Array),
            values: Gc(t.values, Array)
          };
          var _e238 = t.getInterpolation();
          _e238 !== t.DefaultInterpolation && (n.interpolation = _e238);
        }
        return n.type = t.ValueTypeName, n;
      }
    }]);
    return Kc;
  }();
  Kc.prototype.TimeBufferType = Float32Array, Kc.prototype.ValueBufferType = Float32Array, Kc.prototype.DefaultInterpolation = Tt;
  var $c = /*#__PURE__*/function (_Kc) {
    _inherits($c, _Kc);
    var _super91 = _createSuper($c);
    function $c() {
      _classCallCheck(this, $c);
      return _super91.apply(this, arguments);
    }
    return _createClass($c);
  }(Kc);
  $c.prototype.ValueTypeName = "bool", $c.prototype.ValueBufferType = Array, $c.prototype.DefaultInterpolation = bt, $c.prototype.InterpolantFactoryMethodLinear = void 0, $c.prototype.InterpolantFactoryMethodSmooth = void 0;
  var Qc = /*#__PURE__*/function (_Kc2) {
    _inherits(Qc, _Kc2);
    var _super92 = _createSuper(Qc);
    function Qc() {
      _classCallCheck(this, Qc);
      return _super92.apply(this, arguments);
    }
    return _createClass(Qc);
  }(Kc);
  Qc.prototype.ValueTypeName = "color";
  var th = /*#__PURE__*/function (_Kc3) {
    _inherits(th, _Kc3);
    var _super93 = _createSuper(th);
    function th() {
      _classCallCheck(this, th);
      return _super93.apply(this, arguments);
    }
    return _createClass(th);
  }(Kc);
  th.prototype.ValueTypeName = "number";
  var eh = /*#__PURE__*/function (_qc4) {
    _inherits(eh, _qc4);
    var _super94 = _createSuper(eh);
    function eh(t, e, n, i) {
      _classCallCheck(this, eh);
      return _super94.call(this, t, e, n, i);
    }
    _createClass(eh, [{
      key: "interpolate_",
      value: function interpolate_(t, e, n, i) {
        var r = this.resultBuffer,
          s = this.sampleValues,
          a = this.valueSize,
          o = (n - e) / (i - e);
        var l = t * a;
        for (var _t251 = l + a; l !== _t251; l += 4) Be.slerpFlat(r, 0, s, l - a, s, l, o);
        return r;
      }
    }]);
    return eh;
  }(qc);
  var nh = /*#__PURE__*/function (_Kc4) {
    _inherits(nh, _Kc4);
    var _super95 = _createSuper(nh);
    function nh() {
      _classCallCheck(this, nh);
      return _super95.apply(this, arguments);
    }
    _createClass(nh, [{
      key: "InterpolantFactoryMethodLinear",
      value: function InterpolantFactoryMethodLinear(t) {
        return new eh(this.times, this.values, this.getValueSize(), t);
      }
    }]);
    return nh;
  }(Kc);
  nh.prototype.ValueTypeName = "quaternion", nh.prototype.DefaultInterpolation = Tt, nh.prototype.InterpolantFactoryMethodSmooth = void 0;
  var ih = /*#__PURE__*/function (_Kc5) {
    _inherits(ih, _Kc5);
    var _super96 = _createSuper(ih);
    function ih() {
      _classCallCheck(this, ih);
      return _super96.apply(this, arguments);
    }
    return _createClass(ih);
  }(Kc);
  ih.prototype.ValueTypeName = "string", ih.prototype.ValueBufferType = Array, ih.prototype.DefaultInterpolation = bt, ih.prototype.InterpolantFactoryMethodLinear = void 0, ih.prototype.InterpolantFactoryMethodSmooth = void 0;
  var rh = /*#__PURE__*/function (_Kc6) {
    _inherits(rh, _Kc6);
    var _super97 = _createSuper(rh);
    function rh() {
      _classCallCheck(this, rh);
      return _super97.apply(this, arguments);
    }
    return _createClass(rh);
  }(Kc);
  rh.prototype.ValueTypeName = "vector";
  var sh = /*#__PURE__*/function () {
    function sh(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var n = arguments.length > 2 ? arguments[2] : undefined;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2500;
      _classCallCheck(this, sh);
      this.name = t, this.tracks = n, this.duration = e, this.blendMode = i, this.uuid = Qt(), this.duration < 0 && this.resetDuration();
    }
    _createClass(sh, [{
      key: "resetDuration",
      value: function resetDuration() {
        var t = 0;
        for (var _e239 = 0, _n221 = this.tracks.length; _e239 !== _n221; ++_e239) {
          var _n222 = this.tracks[_e239];
          t = Math.max(t, _n222.times[_n222.times.length - 1]);
        }
        return this.duration = t, this;
      }
    }, {
      key: "trim",
      value: function trim() {
        for (var _t252 = 0; _t252 < this.tracks.length; _t252++) this.tracks[_t252].trim(0, this.duration);
        return this;
      }
    }, {
      key: "validate",
      value: function validate() {
        var t = !0;
        for (var _e240 = 0; _e240 < this.tracks.length; _e240++) t = t && this.tracks[_e240].validate();
        return t;
      }
    }, {
      key: "optimize",
      value: function optimize() {
        for (var _t253 = 0; _t253 < this.tracks.length; _t253++) this.tracks[_t253].optimize();
        return this;
      }
    }, {
      key: "clone",
      value: function clone() {
        var t = [];
        for (var _e241 = 0; _e241 < this.tracks.length; _e241++) t.push(this.tracks[_e241].clone());
        return new this.constructor(this.name, this.duration, t, this.blendMode);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.constructor.toJSON(this);
      }
    }], [{
      key: "parse",
      value: function parse(t) {
        var e = [],
          n = t.tracks,
          i = 1 / (t.fps || 1);
        for (var _t254 = 0, _r131 = n.length; _t254 !== _r131; ++_t254) e.push(ah(n[_t254]).scale(i));
        var r = new this(t.name, t.duration, e, t.blendMode);
        return r.uuid = t.uuid, r;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = [],
          n = t.tracks,
          i = {
            name: t.name,
            duration: t.duration,
            tracks: e,
            uuid: t.uuid,
            blendMode: t.blendMode
          };
        for (var _t255 = 0, _i172 = n.length; _t255 !== _i172; ++_t255) e.push(Kc.toJSON(n[_t255]));
        return i;
      }
    }, {
      key: "CreateFromMorphTargetSequence",
      value: function CreateFromMorphTargetSequence(t, e, n, i) {
        var r = e.length,
          s = [];
        for (var _t256 = 0; _t256 < r; _t256++) {
          var _a65 = [],
            _o50 = [];
          _a65.push((_t256 + r - 1) % r, _t256, (_t256 + 1) % r), _o50.push(0, 1, 0);
          var _l28 = kc(_a65);
          _a65 = Wc(_a65, 1, _l28), _o50 = Wc(_o50, 1, _l28), i || 0 !== _a65[0] || (_a65.push(r), _o50.push(_o50[0])), s.push(new th(".morphTargetInfluences[" + e[_t256].name + "]", _a65, _o50).scale(1 / n));
        }
        return new this(t, -1, s);
      }
    }, {
      key: "findByName",
      value: function findByName(t, e) {
        var n = t;
        if (!Array.isArray(t)) {
          var _e242 = t;
          n = _e242.geometry && _e242.geometry.animations || _e242.animations;
        }
        for (var _t257 = 0; _t257 < n.length; _t257++) if (n[_t257].name === e) return n[_t257];
        return null;
      }
    }, {
      key: "CreateClipsFromMorphTargetSequences",
      value: function CreateClipsFromMorphTargetSequences(t, e, n) {
        var i = {},
          r = /^([\w-]*?)([\d]+)$/;
        for (var _e243 = 0, _n223 = t.length; _e243 < _n223; _e243++) {
          var _n224 = t[_e243],
            _s79 = _n224.name.match(r);
          if (_s79 && _s79.length > 1) {
            var _t258 = _s79[1];
            var _e244 = i[_t258];
            _e244 || (i[_t258] = _e244 = []), _e244.push(_n224);
          }
        }
        var s = [];
        for (var _t259 in i) s.push(this.CreateFromMorphTargetSequence(_t259, i[_t259], e, n));
        return s;
      }
    }, {
      key: "parseAnimation",
      value: function parseAnimation(t, e) {
        if (!t) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
        var n = function n(t, e, _n225, i, r) {
            if (0 !== _n225.length) {
              var _s80 = [],
                _a66 = [];
              Xc(_n225, _s80, _a66, i), 0 !== _s80.length && r.push(new t(e, _s80, _a66));
            }
          },
          i = [],
          r = t.name || "default",
          s = t.fps || 30,
          a = t.blendMode;
        var o = t.length || -1;
        var l = t.hierarchy || [];
        for (var _t260 = 0; _t260 < l.length; _t260++) {
          var _r132 = l[_t260].keys;
          if (_r132 && 0 !== _r132.length) if (_r132[0].morphTargets) {
            var _t261 = {};
            var _e245 = void 0;
            for (_e245 = 0; _e245 < _r132.length; _e245++) if (_r132[_e245].morphTargets) for (var _n226 = 0; _n226 < _r132[_e245].morphTargets.length; _n226++) _t261[_r132[_e245].morphTargets[_n226]] = -1;
            for (var _n227 in _t261) {
              var _t262 = [],
                _s81 = [];
              for (var _i173 = 0; _i173 !== _r132[_e245].morphTargets.length; ++_i173) {
                var _i174 = _r132[_e245];
                _t262.push(_i174.time), _s81.push(_i174.morphTarget === _n227 ? 1 : 0);
              }
              i.push(new th(".morphTargetInfluence[" + _n227 + "]", _t262, _s81));
            }
            o = _t261.length * s;
          } else {
            var _s82 = ".bones[" + e[_t260].name + "]";
            n(rh, _s82 + ".position", _r132, "pos", i), n(nh, _s82 + ".quaternion", _r132, "rot", i), n(rh, _s82 + ".scale", _r132, "scl", i);
          }
        }
        if (0 === i.length) return null;
        return new this(r, o, i, a);
      }
    }]);
    return sh;
  }();
  function ah(t) {
    if (void 0 === t.type) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    var e = function (t) {
      switch (t.toLowerCase()) {
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
          return th;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
          return rh;
        case "color":
          return Qc;
        case "quaternion":
          return nh;
        case "bool":
        case "boolean":
          return $c;
        case "string":
          return ih;
      }
      throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t);
    }(t.type);
    if (void 0 === t.times) {
      var _e246 = [],
        _n228 = [];
      Xc(t.keys, _e246, _n228, "value"), t.times = _e246, t.values = _n228;
    }
    return void 0 !== e.parse ? e.parse(t) : new e(t.name, t.times, t.values, t.interpolation);
  }
  var oh = {
    enabled: !1,
    files: {},
    add: function add(t, e) {
      !1 !== this.enabled && (this.files[t] = e);
    },
    get: function get(t) {
      if (!1 !== this.enabled) return this.files[t];
    },
    remove: function remove(t) {
      delete this.files[t];
    },
    clear: function clear() {
      this.files = {};
    }
  };
  var lh = /*#__PURE__*/_createClass(function lh(t, e, n) {
    _classCallCheck(this, lh);
    var i = this;
    var r,
      s = !1,
      a = 0,
      o = 0;
    var l = [];
    this.onStart = void 0, this.onLoad = t, this.onProgress = e, this.onError = n, this.itemStart = function (t) {
      o++, !1 === s && void 0 !== i.onStart && i.onStart(t, a, o), s = !0;
    }, this.itemEnd = function (t) {
      a++, void 0 !== i.onProgress && i.onProgress(t, a, o), a === o && (s = !1, void 0 !== i.onLoad && i.onLoad());
    }, this.itemError = function (t) {
      void 0 !== i.onError && i.onError(t);
    }, this.resolveURL = function (t) {
      return r ? r(t) : t;
    }, this.setURLModifier = function (t) {
      return r = t, this;
    }, this.addHandler = function (t, e) {
      return l.push(t, e), this;
    }, this.removeHandler = function (t) {
      var e = l.indexOf(t);
      return -1 !== e && l.splice(e, 2), this;
    }, this.getHandler = function (t) {
      for (var _e247 = 0, _n229 = l.length; _e247 < _n229; _e247 += 2) {
        var _n230 = l[_e247],
          _i175 = l[_e247 + 1];
        if (_n230.global && (_n230.lastIndex = 0), _n230.test(t)) return _i175;
      }
      return null;
    };
  });
  var ch = new lh();
  var hh = /*#__PURE__*/function () {
    function hh(t) {
      _classCallCheck(this, hh);
      this.manager = void 0 !== t ? t : ch, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
    }
    _createClass(hh, [{
      key: "load",
      value: function load() {}
    }, {
      key: "loadAsync",
      value: function loadAsync(t, e) {
        var n = this;
        return new Promise(function (i, r) {
          n.load(t, i, e, r);
        });
      }
    }, {
      key: "parse",
      value: function parse() {}
    }, {
      key: "setCrossOrigin",
      value: function setCrossOrigin(t) {
        return this.crossOrigin = t, this;
      }
    }, {
      key: "setWithCredentials",
      value: function setWithCredentials(t) {
        return this.withCredentials = t, this;
      }
    }, {
      key: "setPath",
      value: function setPath(t) {
        return this.path = t, this;
      }
    }, {
      key: "setResourcePath",
      value: function setResourcePath(t) {
        return this.resourcePath = t, this;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(t) {
        return this.requestHeader = t, this;
      }
    }]);
    return hh;
  }();
  hh.DEFAULT_MATERIAL_NAME = "__DEFAULT";
  var uh = {};
  var dh = /*#__PURE__*/function (_Error) {
    _inherits(dh, _Error);
    var _super98 = _createSuper(dh);
    function dh(t, e) {
      var _this85;
      _classCallCheck(this, dh);
      _this85 = _super98.call(this, t), _this85.response = e;
      return _this85;
    }
    return _createClass(dh);
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  var ph = /*#__PURE__*/function (_hh) {
    _inherits(ph, _hh);
    var _super99 = _createSuper(ph);
    function ph(t) {
      _classCallCheck(this, ph);
      return _super99.call(this, t);
    }
    _createClass(ph, [{
      key: "load",
      value: function load(t, e, n, i) {
        var _this86 = this;
        void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
        var r = oh.get(t);
        if (void 0 !== r) return this.manager.itemStart(t), setTimeout(function () {
          e && e(r), _this86.manager.itemEnd(t);
        }, 0), r;
        if (void 0 !== uh[t]) return void uh[t].push({
          onLoad: e,
          onProgress: n,
          onError: i
        });
        uh[t] = [], uh[t].push({
          onLoad: e,
          onProgress: n,
          onError: i
        });
        var s = new Request(t, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin"
          }),
          a = this.mimeType,
          o = this.responseType;
        fetch(s).then(function (e) {
          if (200 === e.status || 0 === e.status) {
            if (0 === e.status && console.warn("THREE.FileLoader: HTTP Status 0 received."), "undefined" == typeof ReadableStream || void 0 === e.body || void 0 === e.body.getReader) return e;
            var _n231 = uh[t],
              _i176 = e.body.getReader(),
              _r133 = e.headers.get("Content-Length") || e.headers.get("X-File-Size"),
              _s83 = _r133 ? parseInt(_r133) : 0,
              _a67 = 0 !== _s83;
            var _o51 = 0;
            var _l29 = new ReadableStream({
              start: function start(t) {
                !function e() {
                  _i176.read().then(function (_ref3) {
                    var i = _ref3.done,
                      r = _ref3.value;
                    if (i) t.close();else {
                      _o51 += r.byteLength;
                      var _i177 = new ProgressEvent("progress", {
                        lengthComputable: _a67,
                        loaded: _o51,
                        total: _s83
                      });
                      for (var _t263 = 0, _e248 = _n231.length; _t263 < _e248; _t263++) {
                        var _e249 = _n231[_t263];
                        _e249.onProgress && _e249.onProgress(_i177);
                      }
                      t.enqueue(r), e();
                    }
                  });
                }();
              }
            });
            return new Response(_l29);
          }
          throw new dh("fetch for \"".concat(e.url, "\" responded with ").concat(e.status, ": ").concat(e.statusText), e);
        }).then(function (t) {
          switch (o) {
            case "arraybuffer":
              return t.arrayBuffer();
            case "blob":
              return t.blob();
            case "document":
              return t.text().then(function (t) {
                return new DOMParser().parseFromString(t, a);
              });
            case "json":
              return t.json();
            default:
              if (void 0 === a) return t.text();
              {
                var _e250 = /charset="?([^;"\s]*)"?/i.exec(a),
                  _n232 = _e250 && _e250[1] ? _e250[1].toLowerCase() : void 0,
                  _i178 = new TextDecoder(_n232);
                return t.arrayBuffer().then(function (t) {
                  return _i178.decode(t);
                });
              }
          }
        }).then(function (e) {
          oh.add(t, e);
          var n = uh[t];
          delete uh[t];
          for (var _t264 = 0, _i179 = n.length; _t264 < _i179; _t264++) {
            var _i180 = n[_t264];
            _i180.onLoad && _i180.onLoad(e);
          }
        }).catch(function (e) {
          var n = uh[t];
          if (void 0 === n) throw _this86.manager.itemError(t), e;
          delete uh[t];
          for (var _t265 = 0, _i181 = n.length; _t265 < _i181; _t265++) {
            var _i182 = n[_t265];
            _i182.onError && _i182.onError(e);
          }
          _this86.manager.itemError(t);
        }).finally(function () {
          _this86.manager.itemEnd(t);
        }), this.manager.itemStart(t);
      }
    }, {
      key: "setResponseType",
      value: function setResponseType(t) {
        return this.responseType = t, this;
      }
    }, {
      key: "setMimeType",
      value: function setMimeType(t) {
        return this.mimeType = t, this;
      }
    }]);
    return ph;
  }(hh);
  var mh = /*#__PURE__*/function (_hh2) {
    _inherits(mh, _hh2);
    var _super100 = _createSuper(mh);
    function mh(t) {
      _classCallCheck(this, mh);
      return _super100.call(this, t);
    }
    _createClass(mh, [{
      key: "load",
      value: function load(t, e, n, i) {
        void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
        var r = this,
          s = oh.get(t);
        if (void 0 !== s) return r.manager.itemStart(t), setTimeout(function () {
          e && e(s), r.manager.itemEnd(t);
        }, 0), s;
        var a = fe("img");
        function o() {
          c(), oh.add(t, this), e && e(this), r.manager.itemEnd(t);
        }
        function l(e) {
          c(), i && i(e), r.manager.itemError(t), r.manager.itemEnd(t);
        }
        function c() {
          a.removeEventListener("load", o, !1), a.removeEventListener("error", l, !1);
        }
        return a.addEventListener("load", o, !1), a.addEventListener("error", l, !1), "data:" !== t.slice(0, 5) && void 0 !== this.crossOrigin && (a.crossOrigin = this.crossOrigin), r.manager.itemStart(t), a.src = t, a;
      }
    }]);
    return mh;
  }(hh);
  var fh = /*#__PURE__*/function (_Gn11) {
    _inherits(fh, _Gn11);
    var _super101 = _createSuper(fh);
    function fh(t) {
      var _this87;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      _classCallCheck(this, fh);
      _this87 = _super101.call(this), _this87.isLight = !0, _this87.type = "Light", _this87.color = new ai(t), _this87.intensity = e;
      return _this87;
    }
    _createClass(fh, [{
      key: "dispose",
      value: function dispose() {}
    }, {
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(fh.prototype), "copy", this).call(this, t, e), this.color.copy(t.color), this.intensity = t.intensity, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(fh.prototype), "toJSON", this).call(this, t);
        return e.object.color = this.color.getHex(), e.object.intensity = this.intensity, void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (e.object.distance = this.distance), void 0 !== this.angle && (e.object.angle = this.angle), void 0 !== this.decay && (e.object.decay = this.decay), void 0 !== this.penumbra && (e.object.penumbra = this.penumbra), void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()), e;
      }
    }]);
    return fh;
  }(Gn);
  var gh = /*#__PURE__*/function (_fh) {
    _inherits(gh, _fh);
    var _super102 = _createSuper(gh);
    function gh(t, e, n) {
      var _this88;
      _classCallCheck(this, gh);
      _this88 = _super102.call(this, t, n), _this88.isHemisphereLight = !0, _this88.type = "HemisphereLight", _this88.position.copy(Gn.DEFAULT_UP), _this88.updateMatrix(), _this88.groundColor = new ai(e);
      return _this88;
    }
    _createClass(gh, [{
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(gh.prototype), "copy", this).call(this, t, e), this.groundColor.copy(t.groundColor), this;
      }
    }]);
    return gh;
  }(fh);
  var _h = new gn(),
    vh = new ze(),
    yh = new ze();
  var xh = /*#__PURE__*/function () {
    function xh(t) {
      _classCallCheck(this, xh);
      this.camera = t, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new ce(512, 512), this.map = null, this.mapPass = null, this.matrix = new gn(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new ur(), this._frameExtents = new ce(1, 1), this._viewportCount = 1, this._viewports = [new Ue(0, 0, 1, 1)];
    }
    _createClass(xh, [{
      key: "getViewportCount",
      value: function getViewportCount() {
        return this._viewportCount;
      }
    }, {
      key: "getFrustum",
      value: function getFrustum() {
        return this._frustum;
      }
    }, {
      key: "updateMatrices",
      value: function updateMatrices(t) {
        var e = this.camera,
          n = this.matrix;
        vh.setFromMatrixPosition(t.matrixWorld), e.position.copy(vh), yh.setFromMatrixPosition(t.target.matrixWorld), e.lookAt(yh), e.updateMatrixWorld(), _h.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), this._frustum.setFromProjectionMatrix(_h), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(_h);
      }
    }, {
      key: "getViewport",
      value: function getViewport(t) {
        return this._viewports[t];
      }
    }, {
      key: "getFrameExtents",
      value: function getFrameExtents() {
        return this._frameExtents;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.camera = t.camera.clone(), this.bias = t.bias, this.radius = t.radius, this.mapSize.copy(t.mapSize), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = {};
        return 0 !== this.bias && (t.bias = this.bias), 0 !== this.normalBias && (t.normalBias = this.normalBias), 1 !== this.radius && (t.radius = this.radius), 512 === this.mapSize.x && 512 === this.mapSize.y || (t.mapSize = this.mapSize.toArray()), t.camera = this.camera.toJSON(!1).object, delete t.camera.matrix, t;
      }
    }]);
    return xh;
  }();
  var Mh = /*#__PURE__*/function (_xh) {
    _inherits(Mh, _xh);
    var _super103 = _createSuper(Mh);
    function Mh() {
      var _this89;
      _classCallCheck(this, Mh);
      _this89 = _super103.call(this, new tr(50, 1, .5, 500)), _this89.isSpotLightShadow = !0, _this89.focus = 1;
      return _this89;
    }
    _createClass(Mh, [{
      key: "updateMatrices",
      value: function updateMatrices(t) {
        var e = this.camera,
          n = 2 * $t * t.angle * this.focus,
          i = this.mapSize.width / this.mapSize.height,
          r = t.distance || e.far;
        n === e.fov && i === e.aspect && r === e.far || (e.fov = n, e.aspect = i, e.far = r, e.updateProjectionMatrix()), _get(_getPrototypeOf(Mh.prototype), "updateMatrices", this).call(this, t);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Mh.prototype), "copy", this).call(this, t), this.focus = t.focus, this;
      }
    }]);
    return Mh;
  }(xh);
  var Sh = /*#__PURE__*/function (_fh2) {
    _inherits(Sh, _fh2);
    var _super104 = _createSuper(Sh);
    function Sh(t, e) {
      var _this90;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI / 3;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;
      _classCallCheck(this, Sh);
      _this90 = _super104.call(this, t, e), _this90.isSpotLight = !0, _this90.type = "SpotLight", _this90.position.copy(Gn.DEFAULT_UP), _this90.updateMatrix(), _this90.target = new Gn(), _this90.distance = n, _this90.angle = i, _this90.penumbra = r, _this90.decay = s, _this90.map = null, _this90.shadow = new Mh();
      return _this90;
    }
    _createClass(Sh, [{
      key: "power",
      get: function get() {
        return this.intensity * Math.PI;
      },
      set: function set(t) {
        this.intensity = t / Math.PI;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.shadow.dispose();
      }
    }, {
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Sh.prototype), "copy", this).call(this, t, e), this.distance = t.distance, this.angle = t.angle, this.penumbra = t.penumbra, this.decay = t.decay, this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
      }
    }]);
    return Sh;
  }(fh);
  var bh = new gn(),
    Th = new ze(),
    Eh = new ze();
  var wh = /*#__PURE__*/function (_xh2) {
    _inherits(wh, _xh2);
    var _super105 = _createSuper(wh);
    function wh() {
      var _this91;
      _classCallCheck(this, wh);
      _this91 = _super105.call(this, new tr(90, 1, .5, 500)), _this91.isPointLightShadow = !0, _this91._frameExtents = new ce(4, 2), _this91._viewportCount = 6, _this91._viewports = [new Ue(2, 1, 1, 1), new Ue(0, 1, 1, 1), new Ue(3, 1, 1, 1), new Ue(1, 1, 1, 1), new Ue(3, 0, 1, 1), new Ue(1, 0, 1, 1)], _this91._cubeDirections = [new ze(1, 0, 0), new ze(-1, 0, 0), new ze(0, 0, 1), new ze(0, 0, -1), new ze(0, 1, 0), new ze(0, -1, 0)], _this91._cubeUps = [new ze(0, 1, 0), new ze(0, 1, 0), new ze(0, 1, 0), new ze(0, 1, 0), new ze(0, 0, 1), new ze(0, 0, -1)];
      return _this91;
    }
    _createClass(wh, [{
      key: "updateMatrices",
      value: function updateMatrices(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = this.camera,
          i = this.matrix,
          r = t.distance || n.far;
        r !== n.far && (n.far = r, n.updateProjectionMatrix()), Th.setFromMatrixPosition(t.matrixWorld), n.position.copy(Th), Eh.copy(n.position), Eh.add(this._cubeDirections[e]), n.up.copy(this._cubeUps[e]), n.lookAt(Eh), n.updateMatrixWorld(), i.makeTranslation(-Th.x, -Th.y, -Th.z), bh.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(bh);
      }
    }]);
    return wh;
  }(xh);
  var Ah = /*#__PURE__*/function (_fh3) {
    _inherits(Ah, _fh3);
    var _super106 = _createSuper(Ah);
    function Ah(t, e) {
      var _this92;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
      _classCallCheck(this, Ah);
      _this92 = _super106.call(this, t, e), _this92.isPointLight = !0, _this92.type = "PointLight", _this92.distance = n, _this92.decay = i, _this92.shadow = new wh();
      return _this92;
    }
    _createClass(Ah, [{
      key: "power",
      get: function get() {
        return 4 * this.intensity * Math.PI;
      },
      set: function set(t) {
        this.intensity = t / (4 * Math.PI);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.shadow.dispose();
      }
    }, {
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(Ah.prototype), "copy", this).call(this, t, e), this.distance = t.distance, this.decay = t.decay, this.shadow = t.shadow.clone(), this;
      }
    }]);
    return Ah;
  }(fh);
  var Rh = /*#__PURE__*/function (_xh3) {
    _inherits(Rh, _xh3);
    var _super107 = _createSuper(Rh);
    function Rh() {
      var _this93;
      _classCallCheck(this, Rh);
      _this93 = _super107.call(this, new Er(-5, 5, 5, -5, .5, 500)), _this93.isDirectionalLightShadow = !0;
      return _this93;
    }
    return _createClass(Rh);
  }(xh);
  var Ch = /*#__PURE__*/function (_fh4) {
    _inherits(Ch, _fh4);
    var _super108 = _createSuper(Ch);
    function Ch(t, e) {
      var _this94;
      _classCallCheck(this, Ch);
      _this94 = _super108.call(this, t, e), _this94.isDirectionalLight = !0, _this94.type = "DirectionalLight", _this94.position.copy(Gn.DEFAULT_UP), _this94.updateMatrix(), _this94.target = new Gn(), _this94.shadow = new Rh();
      return _this94;
    }
    _createClass(Ch, [{
      key: "dispose",
      value: function dispose() {
        this.shadow.dispose();
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ch.prototype), "copy", this).call(this, t), this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
      }
    }]);
    return Ch;
  }(fh);
  var Lh = /*#__PURE__*/function (_fh5) {
    _inherits(Lh, _fh5);
    var _super109 = _createSuper(Lh);
    function Lh(t, e) {
      var _this95;
      _classCallCheck(this, Lh);
      _this95 = _super109.call(this, t, e), _this95.isAmbientLight = !0, _this95.type = "AmbientLight";
      return _this95;
    }
    return _createClass(Lh);
  }(fh);
  var Ph = /*#__PURE__*/function (_fh6) {
    _inherits(Ph, _fh6);
    var _super110 = _createSuper(Ph);
    function Ph(t, e) {
      var _this96;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;
      _classCallCheck(this, Ph);
      _this96 = _super110.call(this, t, e), _this96.isRectAreaLight = !0, _this96.type = "RectAreaLight", _this96.width = n, _this96.height = i;
      return _this96;
    }
    _createClass(Ph, [{
      key: "power",
      get: function get() {
        return this.intensity * this.width * this.height * Math.PI;
      },
      set: function set(t) {
        this.intensity = t / (this.width * this.height * Math.PI);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Ph.prototype), "copy", this).call(this, t), this.width = t.width, this.height = t.height, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(Ph.prototype), "toJSON", this).call(this, t);
        return e.object.width = this.width, e.object.height = this.height, e;
      }
    }]);
    return Ph;
  }(fh);
  var Ih = /*#__PURE__*/function () {
    function Ih() {
      _classCallCheck(this, Ih);
      this.isSphericalHarmonics3 = !0, this.coefficients = [];
      for (var _t266 = 0; _t266 < 9; _t266++) this.coefficients.push(new ze());
    }
    _createClass(Ih, [{
      key: "set",
      value: function set(t) {
        for (var _e251 = 0; _e251 < 9; _e251++) this.coefficients[_e251].copy(t[_e251]);
        return this;
      }
    }, {
      key: "zero",
      value: function zero() {
        for (var _t267 = 0; _t267 < 9; _t267++) this.coefficients[_t267].set(0, 0, 0);
        return this;
      }
    }, {
      key: "getAt",
      value: function getAt(t, e) {
        var n = t.x,
          i = t.y,
          r = t.z,
          s = this.coefficients;
        return e.copy(s[0]).multiplyScalar(.282095), e.addScaledVector(s[1], .488603 * i), e.addScaledVector(s[2], .488603 * r), e.addScaledVector(s[3], .488603 * n), e.addScaledVector(s[4], n * i * 1.092548), e.addScaledVector(s[5], i * r * 1.092548), e.addScaledVector(s[6], .315392 * (3 * r * r - 1)), e.addScaledVector(s[7], n * r * 1.092548), e.addScaledVector(s[8], .546274 * (n * n - i * i)), e;
      }
    }, {
      key: "getIrradianceAt",
      value: function getIrradianceAt(t, e) {
        var n = t.x,
          i = t.y,
          r = t.z,
          s = this.coefficients;
        return e.copy(s[0]).multiplyScalar(.886227), e.addScaledVector(s[1], 1.023328 * i), e.addScaledVector(s[2], 1.023328 * r), e.addScaledVector(s[3], 1.023328 * n), e.addScaledVector(s[4], .858086 * n * i), e.addScaledVector(s[5], .858086 * i * r), e.addScaledVector(s[6], .743125 * r * r - .247708), e.addScaledVector(s[7], .858086 * n * r), e.addScaledVector(s[8], .429043 * (n * n - i * i)), e;
      }
    }, {
      key: "add",
      value: function add(t) {
        for (var _e252 = 0; _e252 < 9; _e252++) this.coefficients[_e252].add(t.coefficients[_e252]);
        return this;
      }
    }, {
      key: "addScaledSH",
      value: function addScaledSH(t, e) {
        for (var _n233 = 0; _n233 < 9; _n233++) this.coefficients[_n233].addScaledVector(t.coefficients[_n233], e);
        return this;
      }
    }, {
      key: "scale",
      value: function scale(t) {
        for (var _e253 = 0; _e253 < 9; _e253++) this.coefficients[_e253].multiplyScalar(t);
        return this;
      }
    }, {
      key: "lerp",
      value: function lerp(t, e) {
        for (var _n234 = 0; _n234 < 9; _n234++) this.coefficients[_n234].lerp(t.coefficients[_n234], e);
        return this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        for (var _e254 = 0; _e254 < 9; _e254++) if (!this.coefficients[_e254].equals(t.coefficients[_e254])) return !1;
        return !0;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.set(t.coefficients);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = this.coefficients;
        for (var _i183 = 0; _i183 < 9; _i183++) n[_i183].fromArray(t, e + 3 * _i183);
        return this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var n = this.coefficients;
        for (var _i184 = 0; _i184 < 9; _i184++) n[_i184].toArray(t, e + 3 * _i184);
        return t;
      }
    }], [{
      key: "getBasisAt",
      value: function getBasisAt(t, e) {
        var n = t.x,
          i = t.y,
          r = t.z;
        e[0] = .282095, e[1] = .488603 * i, e[2] = .488603 * r, e[3] = .488603 * n, e[4] = 1.092548 * n * i, e[5] = 1.092548 * i * r, e[6] = .315392 * (3 * r * r - 1), e[7] = 1.092548 * n * r, e[8] = .546274 * (n * n - i * i);
      }
    }]);
    return Ih;
  }();
  var Uh = /*#__PURE__*/function (_fh7) {
    _inherits(Uh, _fh7);
    var _super111 = _createSuper(Uh);
    function Uh() {
      var _this97;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ih();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      _classCallCheck(this, Uh);
      _this97 = _super111.call(this, void 0, e), _this97.isLightProbe = !0, _this97.sh = t;
      return _this97;
    }
    _createClass(Uh, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Uh.prototype), "copy", this).call(this, t), this.sh.copy(t.sh), this;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(t) {
        return this.intensity = t.intensity, this.sh.fromArray(t.sh), this;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(Uh.prototype), "toJSON", this).call(this, t);
        return e.object.sh = this.sh.toArray(), e;
      }
    }]);
    return Uh;
  }(fh);
  var Dh = /*#__PURE__*/function (_hh3) {
    _inherits(Dh, _hh3);
    var _super112 = _createSuper(Dh);
    function Dh(t) {
      var _this98;
      _classCallCheck(this, Dh);
      _this98 = _super112.call(this, t), _this98.textures = {};
      return _this98;
    }
    _createClass(Dh, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = this,
          s = new ph(r.manager);
        s.setPath(r.path), s.setRequestHeader(r.requestHeader), s.setWithCredentials(r.withCredentials), s.load(t, function (n) {
          try {
            e(r.parse(JSON.parse(n)));
          } catch (e) {
            i ? i(e) : console.error(e), r.manager.itemError(t);
          }
        }, n, i);
      }
    }, {
      key: "parse",
      value: function parse(t) {
        var e = this.textures;
        function n(t) {
          return void 0 === e[t] && console.warn("THREE.MaterialLoader: Undefined texture", t), e[t];
        }
        var i = Dh.createMaterialFromType(t.type);
        if (void 0 !== t.uuid && (i.uuid = t.uuid), void 0 !== t.name && (i.name = t.name), void 0 !== t.color && void 0 !== i.color && i.color.setHex(t.color), void 0 !== t.roughness && (i.roughness = t.roughness), void 0 !== t.metalness && (i.metalness = t.metalness), void 0 !== t.sheen && (i.sheen = t.sheen), void 0 !== t.sheenColor && (i.sheenColor = new ai().setHex(t.sheenColor)), void 0 !== t.sheenRoughness && (i.sheenRoughness = t.sheenRoughness), void 0 !== t.emissive && void 0 !== i.emissive && i.emissive.setHex(t.emissive), void 0 !== t.specular && void 0 !== i.specular && i.specular.setHex(t.specular), void 0 !== t.specularIntensity && (i.specularIntensity = t.specularIntensity), void 0 !== t.specularColor && void 0 !== i.specularColor && i.specularColor.setHex(t.specularColor), void 0 !== t.shininess && (i.shininess = t.shininess), void 0 !== t.clearcoat && (i.clearcoat = t.clearcoat), void 0 !== t.clearcoatRoughness && (i.clearcoatRoughness = t.clearcoatRoughness), void 0 !== t.iridescence && (i.iridescence = t.iridescence), void 0 !== t.iridescenceIOR && (i.iridescenceIOR = t.iridescenceIOR), void 0 !== t.iridescenceThicknessRange && (i.iridescenceThicknessRange = t.iridescenceThicknessRange), void 0 !== t.transmission && (i.transmission = t.transmission), void 0 !== t.thickness && (i.thickness = t.thickness), void 0 !== t.attenuationDistance && (i.attenuationDistance = t.attenuationDistance), void 0 !== t.attenuationColor && void 0 !== i.attenuationColor && i.attenuationColor.setHex(t.attenuationColor), void 0 !== t.anisotropy && (i.anisotropy = t.anisotropy), void 0 !== t.anisotropyRotation && (i.anisotropyRotation = t.anisotropyRotation), void 0 !== t.fog && (i.fog = t.fog), void 0 !== t.flatShading && (i.flatShading = t.flatShading), void 0 !== t.blending && (i.blending = t.blending), void 0 !== t.combine && (i.combine = t.combine), void 0 !== t.side && (i.side = t.side), void 0 !== t.shadowSide && (i.shadowSide = t.shadowSide), void 0 !== t.opacity && (i.opacity = t.opacity), void 0 !== t.transparent && (i.transparent = t.transparent), void 0 !== t.alphaTest && (i.alphaTest = t.alphaTest), void 0 !== t.alphaHash && (i.alphaHash = t.alphaHash), void 0 !== t.depthTest && (i.depthTest = t.depthTest), void 0 !== t.depthWrite && (i.depthWrite = t.depthWrite), void 0 !== t.colorWrite && (i.colorWrite = t.colorWrite), void 0 !== t.stencilWrite && (i.stencilWrite = t.stencilWrite), void 0 !== t.stencilWriteMask && (i.stencilWriteMask = t.stencilWriteMask), void 0 !== t.stencilFunc && (i.stencilFunc = t.stencilFunc), void 0 !== t.stencilRef && (i.stencilRef = t.stencilRef), void 0 !== t.stencilFuncMask && (i.stencilFuncMask = t.stencilFuncMask), void 0 !== t.stencilFail && (i.stencilFail = t.stencilFail), void 0 !== t.stencilZFail && (i.stencilZFail = t.stencilZFail), void 0 !== t.stencilZPass && (i.stencilZPass = t.stencilZPass), void 0 !== t.wireframe && (i.wireframe = t.wireframe), void 0 !== t.wireframeLinewidth && (i.wireframeLinewidth = t.wireframeLinewidth), void 0 !== t.wireframeLinecap && (i.wireframeLinecap = t.wireframeLinecap), void 0 !== t.wireframeLinejoin && (i.wireframeLinejoin = t.wireframeLinejoin), void 0 !== t.rotation && (i.rotation = t.rotation), void 0 !== t.linewidth && (i.linewidth = t.linewidth), void 0 !== t.dashSize && (i.dashSize = t.dashSize), void 0 !== t.gapSize && (i.gapSize = t.gapSize), void 0 !== t.scale && (i.scale = t.scale), void 0 !== t.polygonOffset && (i.polygonOffset = t.polygonOffset), void 0 !== t.polygonOffsetFactor && (i.polygonOffsetFactor = t.polygonOffsetFactor), void 0 !== t.polygonOffsetUnits && (i.polygonOffsetUnits = t.polygonOffsetUnits), void 0 !== t.dithering && (i.dithering = t.dithering), void 0 !== t.alphaToCoverage && (i.alphaToCoverage = t.alphaToCoverage), void 0 !== t.premultipliedAlpha && (i.premultipliedAlpha = t.premultipliedAlpha), void 0 !== t.forceSinglePass && (i.forceSinglePass = t.forceSinglePass), void 0 !== t.visible && (i.visible = t.visible), void 0 !== t.toneMapped && (i.toneMapped = t.toneMapped), void 0 !== t.userData && (i.userData = t.userData), void 0 !== t.vertexColors && ("number" == typeof t.vertexColors ? i.vertexColors = t.vertexColors > 0 : i.vertexColors = t.vertexColors), void 0 !== t.uniforms) for (var _e255 in t.uniforms) {
          var _r134 = t.uniforms[_e255];
          switch (i.uniforms[_e255] = {}, _r134.type) {
            case "t":
              i.uniforms[_e255].value = n(_r134.value);
              break;
            case "c":
              i.uniforms[_e255].value = new ai().setHex(_r134.value);
              break;
            case "v2":
              i.uniforms[_e255].value = new ce().fromArray(_r134.value);
              break;
            case "v3":
              i.uniforms[_e255].value = new ze().fromArray(_r134.value);
              break;
            case "v4":
              i.uniforms[_e255].value = new Ue().fromArray(_r134.value);
              break;
            case "m3":
              i.uniforms[_e255].value = new he().fromArray(_r134.value);
              break;
            case "m4":
              i.uniforms[_e255].value = new gn().fromArray(_r134.value);
              break;
            default:
              i.uniforms[_e255].value = _r134.value;
          }
        }
        if (void 0 !== t.defines && (i.defines = t.defines), void 0 !== t.vertexShader && (i.vertexShader = t.vertexShader), void 0 !== t.fragmentShader && (i.fragmentShader = t.fragmentShader), void 0 !== t.glslVersion && (i.glslVersion = t.glslVersion), void 0 !== t.extensions) for (var _e256 in t.extensions) i.extensions[_e256] = t.extensions[_e256];
        if (void 0 !== t.lights && (i.lights = t.lights), void 0 !== t.clipping && (i.clipping = t.clipping), void 0 !== t.size && (i.size = t.size), void 0 !== t.sizeAttenuation && (i.sizeAttenuation = t.sizeAttenuation), void 0 !== t.map && (i.map = n(t.map)), void 0 !== t.matcap && (i.matcap = n(t.matcap)), void 0 !== t.alphaMap && (i.alphaMap = n(t.alphaMap)), void 0 !== t.bumpMap && (i.bumpMap = n(t.bumpMap)), void 0 !== t.bumpScale && (i.bumpScale = t.bumpScale), void 0 !== t.normalMap && (i.normalMap = n(t.normalMap)), void 0 !== t.normalMapType && (i.normalMapType = t.normalMapType), void 0 !== t.normalScale) {
          var _e257 = t.normalScale;
          !1 === Array.isArray(_e257) && (_e257 = [_e257, _e257]), i.normalScale = new ce().fromArray(_e257);
        }
        return void 0 !== t.displacementMap && (i.displacementMap = n(t.displacementMap)), void 0 !== t.displacementScale && (i.displacementScale = t.displacementScale), void 0 !== t.displacementBias && (i.displacementBias = t.displacementBias), void 0 !== t.roughnessMap && (i.roughnessMap = n(t.roughnessMap)), void 0 !== t.metalnessMap && (i.metalnessMap = n(t.metalnessMap)), void 0 !== t.emissiveMap && (i.emissiveMap = n(t.emissiveMap)), void 0 !== t.emissiveIntensity && (i.emissiveIntensity = t.emissiveIntensity), void 0 !== t.specularMap && (i.specularMap = n(t.specularMap)), void 0 !== t.specularIntensityMap && (i.specularIntensityMap = n(t.specularIntensityMap)), void 0 !== t.specularColorMap && (i.specularColorMap = n(t.specularColorMap)), void 0 !== t.envMap && (i.envMap = n(t.envMap)), void 0 !== t.envMapIntensity && (i.envMapIntensity = t.envMapIntensity), void 0 !== t.reflectivity && (i.reflectivity = t.reflectivity), void 0 !== t.refractionRatio && (i.refractionRatio = t.refractionRatio), void 0 !== t.lightMap && (i.lightMap = n(t.lightMap)), void 0 !== t.lightMapIntensity && (i.lightMapIntensity = t.lightMapIntensity), void 0 !== t.aoMap && (i.aoMap = n(t.aoMap)), void 0 !== t.aoMapIntensity && (i.aoMapIntensity = t.aoMapIntensity), void 0 !== t.gradientMap && (i.gradientMap = n(t.gradientMap)), void 0 !== t.clearcoatMap && (i.clearcoatMap = n(t.clearcoatMap)), void 0 !== t.clearcoatRoughnessMap && (i.clearcoatRoughnessMap = n(t.clearcoatRoughnessMap)), void 0 !== t.clearcoatNormalMap && (i.clearcoatNormalMap = n(t.clearcoatNormalMap)), void 0 !== t.clearcoatNormalScale && (i.clearcoatNormalScale = new ce().fromArray(t.clearcoatNormalScale)), void 0 !== t.iridescenceMap && (i.iridescenceMap = n(t.iridescenceMap)), void 0 !== t.iridescenceThicknessMap && (i.iridescenceThicknessMap = n(t.iridescenceThicknessMap)), void 0 !== t.transmissionMap && (i.transmissionMap = n(t.transmissionMap)), void 0 !== t.thicknessMap && (i.thicknessMap = n(t.thicknessMap)), void 0 !== t.anisotropyMap && (i.anisotropyMap = n(t.anisotropyMap)), void 0 !== t.sheenColorMap && (i.sheenColorMap = n(t.sheenColorMap)), void 0 !== t.sheenRoughnessMap && (i.sheenRoughnessMap = n(t.sheenRoughnessMap)), i;
      }
    }, {
      key: "setTextures",
      value: function setTextures(t) {
        return this.textures = t, this;
      }
    }], [{
      key: "createMaterialFromType",
      value: function createMaterialFromType(t) {
        return new {
          ShadowMaterial: Pc,
          SpriteMaterial: Qa,
          RawShaderMaterial: Ic,
          ShaderMaterial: $i,
          PointsMaterial: tl,
          MeshPhysicalMaterial: Dc,
          MeshStandardMaterial: Uc,
          MeshPhongMaterial: Nc,
          MeshToonMaterial: Oc,
          MeshNormalMaterial: Fc,
          MeshLambertMaterial: Bc,
          MeshDepthMaterial: Pa,
          MeshDistanceMaterial: Ia,
          MeshBasicMaterial: li,
          MeshMatcapMaterial: zc,
          LineDashedMaterial: Hc,
          LineBasicMaterial: ko,
          Material: ei
        }[t]();
      }
    }]);
    return Dh;
  }(hh);
  var Nh = /*#__PURE__*/function () {
    function Nh() {
      _classCallCheck(this, Nh);
    }
    _createClass(Nh, null, [{
      key: "decodeText",
      value: function decodeText(t) {
        if ("undefined" != typeof TextDecoder) return new TextDecoder().decode(t);
        var e = "";
        for (var _n235 = 0, _i185 = t.length; _n235 < _i185; _n235++) e += String.fromCharCode(t[_n235]);
        try {
          return decodeURIComponent(escape(e));
        } catch (t) {
          return e;
        }
      }
    }, {
      key: "extractUrlBase",
      value: function extractUrlBase(t) {
        var e = t.lastIndexOf("/");
        return -1 === e ? "./" : t.slice(0, e + 1);
      }
    }, {
      key: "resolveURL",
      value: function resolveURL(t, e) {
        return "string" != typeof t || "" === t ? "" : (/^https?:\/\//i.test(e) && /^\//.test(t) && (e = e.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(t) || /^data:.*,.*$/i.test(t) || /^blob:.*$/i.test(t) ? t : e + t);
      }
    }]);
    return Nh;
  }();
  var Oh = /*#__PURE__*/function (_Ai16) {
    _inherits(Oh, _Ai16);
    var _super113 = _createSuper(Oh);
    function Oh() {
      var _this99;
      _classCallCheck(this, Oh);
      _this99 = _super113.call(this), _this99.isInstancedBufferGeometry = !0, _this99.type = "InstancedBufferGeometry", _this99.instanceCount = 1 / 0;
      return _this99;
    }
    _createClass(Oh, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(Oh.prototype), "copy", this).call(this, t), this.instanceCount = t.instanceCount, this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var t = _get(_getPrototypeOf(Oh.prototype), "toJSON", this).call(this);
        return t.instanceCount = this.instanceCount, t.isInstancedBufferGeometry = !0, t;
      }
    }]);
    return Oh;
  }(Ai);
  var Fh = /*#__PURE__*/function (_hh4) {
    _inherits(Fh, _hh4);
    var _super114 = _createSuper(Fh);
    function Fh(t) {
      _classCallCheck(this, Fh);
      return _super114.call(this, t);
    }
    _createClass(Fh, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = this,
          s = new ph(r.manager);
        s.setPath(r.path), s.setRequestHeader(r.requestHeader), s.setWithCredentials(r.withCredentials), s.load(t, function (n) {
          try {
            e(r.parse(JSON.parse(n)));
          } catch (e) {
            i ? i(e) : console.error(e), r.manager.itemError(t);
          }
        }, n, i);
      }
    }, {
      key: "parse",
      value: function parse(t) {
        var e = {},
          n = {};
        function i(t, i) {
          if (void 0 !== e[i]) return e[i];
          var r = t.interleavedBuffers[i],
            s = function (t, e) {
              if (void 0 !== n[e]) return n[e];
              var i = t.arrayBuffers,
                r = i[e],
                s = new Uint32Array(r).buffer;
              return n[e] = s, s;
            }(t, r.buffer),
            a = me(r.type, s),
            o = new Ja(a, r.stride);
          return o.uuid = r.uuid, e[i] = o, o;
        }
        var r = t.isInstancedBufferGeometry ? new Oh() : new Ai(),
          s = t.data.index;
        if (void 0 !== s) {
          var _t268 = me(s.type, s.array);
          r.setIndex(new gi(_t268, 1));
        }
        var a = t.data.attributes;
        for (var _e258 in a) {
          var _n236 = a[_e258];
          var _s84 = void 0;
          if (_n236.isInterleavedBufferAttribute) {
            var _e259 = i(t.data, _n236.data);
            _s84 = new $a(_e259, _n236.itemSize, _n236.offset, _n236.normalized);
          } else {
            var _t269 = me(_n236.type, _n236.array);
            _s84 = new (_n236.isInstancedBufferAttribute ? Do : gi)(_t269, _n236.itemSize, _n236.normalized);
          }
          void 0 !== _n236.name && (_s84.name = _n236.name), void 0 !== _n236.usage && _s84.setUsage(_n236.usage), void 0 !== _n236.updateRange && (_s84.updateRange.offset = _n236.updateRange.offset, _s84.updateRange.count = _n236.updateRange.count), r.setAttribute(_e258, _s84);
        }
        var o = t.data.morphAttributes;
        if (o) for (var _e260 in o) {
          var _n237 = o[_e260],
            _s85 = [];
          for (var _e261 = 0, _r135 = _n237.length; _e261 < _r135; _e261++) {
            var _r136 = _n237[_e261];
            var _a68 = void 0;
            if (_r136.isInterleavedBufferAttribute) {
              var _e262 = i(t.data, _r136.data);
              _a68 = new $a(_e262, _r136.itemSize, _r136.offset, _r136.normalized);
            } else {
              var _t270 = me(_r136.type, _r136.array);
              _a68 = new gi(_t270, _r136.itemSize, _r136.normalized);
            }
            void 0 !== _r136.name && (_a68.name = _r136.name), _s85.push(_a68);
          }
          r.morphAttributes[_e260] = _s85;
        }
        t.data.morphTargetsRelative && (r.morphTargetsRelative = !0);
        var l = t.data.groups || t.data.drawcalls || t.data.offsets;
        if (void 0 !== l) for (var _t271 = 0, _e263 = l.length; _t271 !== _e263; ++_t271) {
          var _e264 = l[_t271];
          r.addGroup(_e264.start, _e264.count, _e264.materialIndex);
        }
        var c = t.data.boundingSphere;
        if (void 0 !== c) {
          var _t272 = new ze();
          void 0 !== c.center && _t272.fromArray(c.center), r.boundingSphere = new on(_t272, c.radius);
        }
        return t.name && (r.name = t.name), t.userData && (r.userData = t.userData), r;
      }
    }]);
    return Fh;
  }(hh);
  var Bh = {
      UVMapping: _,
      CubeReflectionMapping: v,
      CubeRefractionMapping: y,
      EquirectangularReflectionMapping: x,
      EquirectangularRefractionMapping: M,
      CubeUVReflectionMapping: S
    },
    zh = {
      RepeatWrapping: b,
      ClampToEdgeWrapping: T,
      MirroredRepeatWrapping: E
    },
    Hh = {
      NearestFilter: w,
      NearestMipmapNearestFilter: A,
      NearestMipmapLinearFilter: R,
      LinearFilter: C,
      LinearMipmapNearestFilter: L,
      LinearMipmapLinearFilter: P
    };
  var Gh;
  var Vh = /*#__PURE__*/function () {
    function Vh() {
      _classCallCheck(this, Vh);
    }
    _createClass(Vh, null, [{
      key: "getContext",
      value: function getContext() {
        return void 0 === Gh && (Gh = new (window.AudioContext || window.webkitAudioContext)()), Gh;
      }
    }, {
      key: "setContext",
      value: function setContext(t) {
        Gh = t;
      }
    }]);
    return Vh;
  }();
  var kh = new gn(),
    Wh = new gn(),
    Xh = new gn();
  var jh = /*#__PURE__*/function () {
    function jh() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;
      _classCallCheck(this, jh);
      this.autoStart = t, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
    }
    _createClass(jh, [{
      key: "start",
      value: function start() {
        this.startTime = qh(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
      }
    }, {
      key: "stop",
      value: function stop() {
        this.getElapsedTime(), this.running = !1, this.autoStart = !1;
      }
    }, {
      key: "getElapsedTime",
      value: function getElapsedTime() {
        return this.getDelta(), this.elapsedTime;
      }
    }, {
      key: "getDelta",
      value: function getDelta() {
        var t = 0;
        if (this.autoStart && !this.running) return this.start(), 0;
        if (this.running) {
          var _e265 = qh();
          t = (_e265 - this.oldTime) / 1e3, this.oldTime = _e265, this.elapsedTime += t;
        }
        return t;
      }
    }]);
    return jh;
  }();
  function qh() {
    return ("undefined" == typeof performance ? Date : performance).now();
  }
  var Yh = new ze(),
    Zh = new Be(),
    Jh = new ze(),
    Kh = new ze();
  var $h = /*#__PURE__*/function (_Gn12) {
    _inherits($h, _Gn12);
    var _super115 = _createSuper($h);
    function $h(t) {
      var _this100;
      _classCallCheck(this, $h);
      _this100 = _super115.call(this), _this100.type = "Audio", _this100.listener = t, _this100.context = t.context, _this100.gain = _this100.context.createGain(), _this100.gain.connect(t.getInput()), _this100.autoplay = !1, _this100.buffer = null, _this100.detune = 0, _this100.loop = !1, _this100.loopStart = 0, _this100.loopEnd = 0, _this100.offset = 0, _this100.duration = void 0, _this100.playbackRate = 1, _this100.isPlaying = !1, _this100.hasPlaybackControl = !0, _this100.source = null, _this100.sourceType = "empty", _this100._startedAt = 0, _this100._progress = 0, _this100._connected = !1, _this100.filters = [];
      return _this100;
    }
    _createClass($h, [{
      key: "getOutput",
      value: function getOutput() {
        return this.gain;
      }
    }, {
      key: "setNodeSource",
      value: function setNodeSource(t) {
        return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = t, this.connect(), this;
      }
    }, {
      key: "setMediaElementSource",
      value: function setMediaElementSource(t) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(t), this.connect(), this;
      }
    }, {
      key: "setMediaStreamSource",
      value: function setMediaStreamSource(t) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(t), this.connect(), this;
      }
    }, {
      key: "setBuffer",
      value: function setBuffer(t) {
        return this.buffer = t, this.sourceType = "buffer", this.autoplay && this.play(), this;
      }
    }, {
      key: "play",
      value: function play() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        if (!0 === this.isPlaying) return void console.warn("THREE.Audio: Audio is already playing.");
        if (!1 === this.hasPlaybackControl) return void console.warn("THREE.Audio: this Audio has no playback control.");
        this._startedAt = this.context.currentTime + t;
        var e = this.context.createBufferSource();
        return e.buffer = this.buffer, e.loop = this.loop, e.loopStart = this.loopStart, e.loopEnd = this.loopEnd, e.onended = this.onEnded.bind(this), e.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = e, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
      }
    }, {
      key: "pause",
      value: function pause() {
        if (!1 !== this.hasPlaybackControl) return !0 === this.isPlaying && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, !0 === this.loop && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }
    }, {
      key: "stop",
      value: function stop() {
        if (!1 !== this.hasPlaybackControl) return this._progress = 0, null !== this.source && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }
    }, {
      key: "connect",
      value: function connect() {
        if (this.filters.length > 0) {
          this.source.connect(this.filters[0]);
          for (var _t273 = 1, _e266 = this.filters.length; _t273 < _e266; _t273++) this.filters[_t273 - 1].connect(this.filters[_t273]);
          this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        return this._connected = !0, this;
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        if (!1 !== this._connected) {
          if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for (var _t274 = 1, _e267 = this.filters.length; _t274 < _e267; _t274++) this.filters[_t274 - 1].disconnect(this.filters[_t274]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
          } else this.source.disconnect(this.getOutput());
          return this._connected = !1, this;
        }
      }
    }, {
      key: "getFilters",
      value: function getFilters() {
        return this.filters;
      }
    }, {
      key: "setFilters",
      value: function setFilters(t) {
        return t || (t = []), !0 === this._connected ? (this.disconnect(), this.filters = t.slice(), this.connect()) : this.filters = t.slice(), this;
      }
    }, {
      key: "setDetune",
      value: function setDetune(t) {
        if (this.detune = t, void 0 !== this.source.detune) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
      }
    }, {
      key: "getDetune",
      value: function getDetune() {
        return this.detune;
      }
    }, {
      key: "getFilter",
      value: function getFilter() {
        return this.getFilters()[0];
      }
    }, {
      key: "setFilter",
      value: function setFilter(t) {
        return this.setFilters(t ? [t] : []);
      }
    }, {
      key: "setPlaybackRate",
      value: function setPlaybackRate(t) {
        if (!1 !== this.hasPlaybackControl) return this.playbackRate = t, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }
    }, {
      key: "getPlaybackRate",
      value: function getPlaybackRate() {
        return this.playbackRate;
      }
    }, {
      key: "onEnded",
      value: function onEnded() {
        this.isPlaying = !1;
      }
    }, {
      key: "getLoop",
      value: function getLoop() {
        return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
      }
    }, {
      key: "setLoop",
      value: function setLoop(t) {
        if (!1 !== this.hasPlaybackControl) return this.loop = t, !0 === this.isPlaying && (this.source.loop = this.loop), this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }
    }, {
      key: "setLoopStart",
      value: function setLoopStart(t) {
        return this.loopStart = t, this;
      }
    }, {
      key: "setLoopEnd",
      value: function setLoopEnd(t) {
        return this.loopEnd = t, this;
      }
    }, {
      key: "getVolume",
      value: function getVolume() {
        return this.gain.gain.value;
      }
    }, {
      key: "setVolume",
      value: function setVolume(t) {
        return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this;
      }
    }]);
    return $h;
  }(Gn);
  var Qh = new ze(),
    tu = new Be(),
    eu = new ze(),
    nu = new ze();
  var iu = /*#__PURE__*/function () {
    function iu(t, e, n) {
      _classCallCheck(this, iu);
      var i, r, s;
      switch (this.binding = t, this.valueSize = n, e) {
        case "quaternion":
          i = this._slerp, r = this._slerpAdditive, s = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(6 * n), this._workIndex = 5;
          break;
        case "string":
        case "bool":
          i = this._select, r = this._select, s = this._setAdditiveIdentityOther, this.buffer = new Array(5 * n);
          break;
        default:
          i = this._lerp, r = this._lerpAdditive, s = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(5 * n);
      }
      this._mixBufferRegion = i, this._mixBufferRegionAdditive = r, this._setIdentity = s, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
    }
    _createClass(iu, [{
      key: "accumulate",
      value: function accumulate(t, e) {
        var n = this.buffer,
          i = this.valueSize,
          r = t * i + i;
        var s = this.cumulativeWeight;
        if (0 === s) {
          for (var _t275 = 0; _t275 !== i; ++_t275) n[r + _t275] = n[_t275];
          s = e;
        } else {
          s += e;
          var _t276 = e / s;
          this._mixBufferRegion(n, r, 0, _t276, i);
        }
        this.cumulativeWeight = s;
      }
    }, {
      key: "accumulateAdditive",
      value: function accumulateAdditive(t) {
        var e = this.buffer,
          n = this.valueSize,
          i = n * this._addIndex;
        0 === this.cumulativeWeightAdditive && this._setIdentity(), this._mixBufferRegionAdditive(e, i, 0, t, n), this.cumulativeWeightAdditive += t;
      }
    }, {
      key: "apply",
      value: function apply(t) {
        var e = this.valueSize,
          n = this.buffer,
          i = t * e + e,
          r = this.cumulativeWeight,
          s = this.cumulativeWeightAdditive,
          a = this.binding;
        if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, r < 1) {
          var _t277 = e * this._origIndex;
          this._mixBufferRegion(n, i, _t277, 1 - r, e);
        }
        s > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * e, 1, e);
        for (var _t278 = e, _r137 = e + e; _t278 !== _r137; ++_t278) if (n[_t278] !== n[_t278 + e]) {
          a.setValue(n, i);
          break;
        }
      }
    }, {
      key: "saveOriginalState",
      value: function saveOriginalState() {
        var t = this.binding,
          e = this.buffer,
          n = this.valueSize,
          i = n * this._origIndex;
        t.getValue(e, i);
        for (var _t279 = n, _r138 = i; _t279 !== _r138; ++_t279) e[_t279] = e[i + _t279 % n];
        this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
      }
    }, {
      key: "restoreOriginalState",
      value: function restoreOriginalState() {
        var t = 3 * this.valueSize;
        this.binding.setValue(this.buffer, t);
      }
    }, {
      key: "_setAdditiveIdentityNumeric",
      value: function _setAdditiveIdentityNumeric() {
        var t = this._addIndex * this.valueSize,
          e = t + this.valueSize;
        for (var _n238 = t; _n238 < e; _n238++) this.buffer[_n238] = 0;
      }
    }, {
      key: "_setAdditiveIdentityQuaternion",
      value: function _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
      }
    }, {
      key: "_setAdditiveIdentityOther",
      value: function _setAdditiveIdentityOther() {
        var t = this._origIndex * this.valueSize,
          e = this._addIndex * this.valueSize;
        for (var _n239 = 0; _n239 < this.valueSize; _n239++) this.buffer[e + _n239] = this.buffer[t + _n239];
      }
    }, {
      key: "_select",
      value: function _select(t, e, n, i, r) {
        if (i >= .5) for (var _i186 = 0; _i186 !== r; ++_i186) t[e + _i186] = t[n + _i186];
      }
    }, {
      key: "_slerp",
      value: function _slerp(t, e, n, i) {
        Be.slerpFlat(t, e, t, e, t, n, i);
      }
    }, {
      key: "_slerpAdditive",
      value: function _slerpAdditive(t, e, n, i, r) {
        var s = this._workIndex * r;
        Be.multiplyQuaternionsFlat(t, s, t, e, t, n), Be.slerpFlat(t, e, t, e, t, s, i);
      }
    }, {
      key: "_lerp",
      value: function _lerp(t, e, n, i, r) {
        var s = 1 - i;
        for (var _a69 = 0; _a69 !== r; ++_a69) {
          var _r139 = e + _a69;
          t[_r139] = t[_r139] * s + t[n + _a69] * i;
        }
      }
    }, {
      key: "_lerpAdditive",
      value: function _lerpAdditive(t, e, n, i, r) {
        for (var _s86 = 0; _s86 !== r; ++_s86) {
          var _r140 = e + _s86;
          t[_r140] = t[_r140] + t[n + _s86] * i;
        }
      }
    }]);
    return iu;
  }();
  var ru = "\\[\\]\\.:\\/",
    su = new RegExp("[" + ru + "]", "g"),
    au = "[^" + ru + "]",
    ou = "[^" + ru.replace("\\.", "") + "]",
    lu = new RegExp("^" + /((?:WC+[\/:])*)/.source.replace("WC", au) + /(WCOD+)?/.source.replace("WCOD", ou) + /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", au) + /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", au) + "$"),
    cu = ["material", "materials", "bones", "map"];
  var hu = /*#__PURE__*/function () {
    function hu(t, e, n) {
      _classCallCheck(this, hu);
      this.path = e, this.parsedPath = n || hu.parseTrackName(e), this.node = hu.findNode(t, this.parsedPath.nodeName), this.rootNode = t, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
    _createClass(hu, [{
      key: "_getValue_unavailable",
      value: function _getValue_unavailable() {}
    }, {
      key: "_setValue_unavailable",
      value: function _setValue_unavailable() {}
    }, {
      key: "_getValue_direct",
      value: function _getValue_direct(t, e) {
        t[e] = this.targetObject[this.propertyName];
      }
    }, {
      key: "_getValue_array",
      value: function _getValue_array(t, e) {
        var n = this.resolvedProperty;
        for (var _i187 = 0, _r141 = n.length; _i187 !== _r141; ++_i187) t[e++] = n[_i187];
      }
    }, {
      key: "_getValue_arrayElement",
      value: function _getValue_arrayElement(t, e) {
        t[e] = this.resolvedProperty[this.propertyIndex];
      }
    }, {
      key: "_getValue_toArray",
      value: function _getValue_toArray(t, e) {
        this.resolvedProperty.toArray(t, e);
      }
    }, {
      key: "_setValue_direct",
      value: function _setValue_direct(t, e) {
        this.targetObject[this.propertyName] = t[e];
      }
    }, {
      key: "_setValue_direct_setNeedsUpdate",
      value: function _setValue_direct_setNeedsUpdate(t, e) {
        this.targetObject[this.propertyName] = t[e], this.targetObject.needsUpdate = !0;
      }
    }, {
      key: "_setValue_direct_setMatrixWorldNeedsUpdate",
      value: function _setValue_direct_setMatrixWorldNeedsUpdate(t, e) {
        this.targetObject[this.propertyName] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0;
      }
    }, {
      key: "_setValue_array",
      value: function _setValue_array(t, e) {
        var n = this.resolvedProperty;
        for (var _i188 = 0, _r142 = n.length; _i188 !== _r142; ++_i188) n[_i188] = t[e++];
      }
    }, {
      key: "_setValue_array_setNeedsUpdate",
      value: function _setValue_array_setNeedsUpdate(t, e) {
        var n = this.resolvedProperty;
        for (var _i189 = 0, _r143 = n.length; _i189 !== _r143; ++_i189) n[_i189] = t[e++];
        this.targetObject.needsUpdate = !0;
      }
    }, {
      key: "_setValue_array_setMatrixWorldNeedsUpdate",
      value: function _setValue_array_setMatrixWorldNeedsUpdate(t, e) {
        var n = this.resolvedProperty;
        for (var _i190 = 0, _r144 = n.length; _i190 !== _r144; ++_i190) n[_i190] = t[e++];
        this.targetObject.matrixWorldNeedsUpdate = !0;
      }
    }, {
      key: "_setValue_arrayElement",
      value: function _setValue_arrayElement(t, e) {
        this.resolvedProperty[this.propertyIndex] = t[e];
      }
    }, {
      key: "_setValue_arrayElement_setNeedsUpdate",
      value: function _setValue_arrayElement_setNeedsUpdate(t, e) {
        this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.needsUpdate = !0;
      }
    }, {
      key: "_setValue_arrayElement_setMatrixWorldNeedsUpdate",
      value: function _setValue_arrayElement_setMatrixWorldNeedsUpdate(t, e) {
        this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0;
      }
    }, {
      key: "_setValue_fromArray",
      value: function _setValue_fromArray(t, e) {
        this.resolvedProperty.fromArray(t, e);
      }
    }, {
      key: "_setValue_fromArray_setNeedsUpdate",
      value: function _setValue_fromArray_setNeedsUpdate(t, e) {
        this.resolvedProperty.fromArray(t, e), this.targetObject.needsUpdate = !0;
      }
    }, {
      key: "_setValue_fromArray_setMatrixWorldNeedsUpdate",
      value: function _setValue_fromArray_setMatrixWorldNeedsUpdate(t, e) {
        this.resolvedProperty.fromArray(t, e), this.targetObject.matrixWorldNeedsUpdate = !0;
      }
    }, {
      key: "_getValue_unbound",
      value: function _getValue_unbound(t, e) {
        this.bind(), this.getValue(t, e);
      }
    }, {
      key: "_setValue_unbound",
      value: function _setValue_unbound(t, e) {
        this.bind(), this.setValue(t, e);
      }
    }, {
      key: "bind",
      value: function bind() {
        var t = this.node;
        var e = this.parsedPath,
          n = e.objectName,
          i = e.propertyName;
        var r = e.propertyIndex;
        if (t || (t = hu.findNode(this.rootNode, e.nodeName), this.node = t), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !t) return void console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
        if (n) {
          var _i191 = e.objectIndex;
          switch (n) {
            case "materials":
              if (!t.material) return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              if (!t.material.materials) return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              t = t.material.materials;
              break;
            case "bones":
              if (!t.skeleton) return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              t = t.skeleton.bones;
              for (var _e268 = 0; _e268 < t.length; _e268++) if (t[_e268].name === _i191) {
                _i191 = _e268;
                break;
              }
              break;
            case "map":
              if ("map" in t) {
                t = t.map;
                break;
              }
              if (!t.material) return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              if (!t.material.map) return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
              t = t.material.map;
              break;
            default:
              if (void 0 === t[n]) return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              t = t[n];
          }
          if (void 0 !== _i191) {
            if (void 0 === t[_i191]) return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
            t = t[_i191];
          }
        }
        var s = t[i];
        if (void 0 === s) {
          var _n240 = e.nodeName;
          return void console.error("THREE.PropertyBinding: Trying to update property for track: " + _n240 + "." + i + " but it wasn't found.", t);
        }
        var a = this.Versioning.None;
        this.targetObject = t, void 0 !== t.needsUpdate ? a = this.Versioning.NeedsUpdate : void 0 !== t.matrixWorldNeedsUpdate && (a = this.Versioning.MatrixWorldNeedsUpdate);
        var o = this.BindingType.Direct;
        if (void 0 !== r) {
          if ("morphTargetInfluences" === i) {
            if (!t.geometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            if (!t.geometry.morphAttributes) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            void 0 !== t.morphTargetDictionary[r] && (r = t.morphTargetDictionary[r]);
          }
          o = this.BindingType.ArrayElement, this.resolvedProperty = s, this.propertyIndex = r;
        } else void 0 !== s.fromArray && void 0 !== s.toArray ? (o = this.BindingType.HasFromToArray, this.resolvedProperty = s) : Array.isArray(s) ? (o = this.BindingType.EntireArray, this.resolvedProperty = s) : this.propertyName = i;
        this.getValue = this.GetterByBindingType[o], this.setValue = this.SetterByBindingTypeAndVersioning[o][a];
      }
    }, {
      key: "unbind",
      value: function unbind() {
        this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
      }
    }], [{
      key: "create",
      value: function create(t, e, n) {
        return t && t.isAnimationObjectGroup ? new hu.Composite(t, e, n) : new hu(t, e, n);
      }
    }, {
      key: "sanitizeNodeName",
      value: function sanitizeNodeName(t) {
        return t.replace(/\s/g, "_").replace(su, "");
      }
    }, {
      key: "parseTrackName",
      value: function parseTrackName(t) {
        var e = lu.exec(t);
        if (null === e) throw new Error("PropertyBinding: Cannot parse trackName: " + t);
        var n = {
            nodeName: e[2],
            objectName: e[3],
            objectIndex: e[4],
            propertyName: e[5],
            propertyIndex: e[6]
          },
          i = n.nodeName && n.nodeName.lastIndexOf(".");
        if (void 0 !== i && -1 !== i) {
          var _t280 = n.nodeName.substring(i + 1);
          -1 !== cu.indexOf(_t280) && (n.nodeName = n.nodeName.substring(0, i), n.objectName = _t280);
        }
        if (null === n.propertyName || 0 === n.propertyName.length) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
        return n;
      }
    }, {
      key: "findNode",
      value: function findNode(t, e) {
        if (void 0 === e || "" === e || "." === e || -1 === e || e === t.name || e === t.uuid) return t;
        if (t.skeleton) {
          var _n241 = t.skeleton.getBoneByName(e);
          if (void 0 !== _n241) return _n241;
        }
        if (t.children) {
          var _n242 = function _n242(t) {
              for (var _i193 = 0; _i193 < t.length; _i193++) {
                var _r145 = t[_i193];
                if (_r145.name === e || _r145.uuid === e) return _r145;
                var _s87 = _n242(_r145.children);
                if (_s87) return _s87;
              }
              return null;
            },
            _i192 = _n242(t.children);
          if (_i192) return _i192;
        }
        return null;
      }
    }]);
    return hu;
  }();
  hu.Composite = /*#__PURE__*/function () {
    function _class(t, e, n) {
      _classCallCheck(this, _class);
      var i = n || hu.parseTrackName(e);
      this._targetGroup = t, this._bindings = t.subscribe_(e, i);
    }
    _createClass(_class, [{
      key: "getValue",
      value: function getValue(t, e) {
        this.bind();
        var n = this._targetGroup.nCachedObjects_,
          i = this._bindings[n];
        void 0 !== i && i.getValue(t, e);
      }
    }, {
      key: "setValue",
      value: function setValue(t, e) {
        var n = this._bindings;
        for (var _i194 = this._targetGroup.nCachedObjects_, _r146 = n.length; _i194 !== _r146; ++_i194) n[_i194].setValue(t, e);
      }
    }, {
      key: "bind",
      value: function bind() {
        var t = this._bindings;
        for (var _e269 = this._targetGroup.nCachedObjects_, _n243 = t.length; _e269 !== _n243; ++_e269) t[_e269].bind();
      }
    }, {
      key: "unbind",
      value: function unbind() {
        var t = this._bindings;
        for (var _e270 = this._targetGroup.nCachedObjects_, _n244 = t.length; _e270 !== _n244; ++_e270) t[_e270].unbind();
      }
    }]);
    return _class;
  }(), hu.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  }, hu.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  }, hu.prototype.GetterByBindingType = [hu.prototype._getValue_direct, hu.prototype._getValue_array, hu.prototype._getValue_arrayElement, hu.prototype._getValue_toArray], hu.prototype.SetterByBindingTypeAndVersioning = [[hu.prototype._setValue_direct, hu.prototype._setValue_direct_setNeedsUpdate, hu.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [hu.prototype._setValue_array, hu.prototype._setValue_array_setNeedsUpdate, hu.prototype._setValue_array_setMatrixWorldNeedsUpdate], [hu.prototype._setValue_arrayElement, hu.prototype._setValue_arrayElement_setNeedsUpdate, hu.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [hu.prototype._setValue_fromArray, hu.prototype._setValue_fromArray_setNeedsUpdate, hu.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
  var uu = /*#__PURE__*/function () {
    function uu(t, e) {
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : e.blendMode;
      _classCallCheck(this, uu);
      this._mixer = t, this._clip = e, this._localRoot = n, this.blendMode = i;
      var r = e.tracks,
        s = r.length,
        a = new Array(s),
        o = {
          endingStart: wt,
          endingEnd: wt
        };
      for (var _t281 = 0; _t281 !== s; ++_t281) {
        var _e271 = r[_t281].createInterpolant(null);
        a[_t281] = _e271, _e271.settings = o;
      }
      this._interpolantSettings = o, this._interpolants = a, this._propertyBindings = new Array(s), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = 2201, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
    }
    _createClass(uu, [{
      key: "play",
      value: function play() {
        return this._mixer._activateAction(this), this;
      }
    }, {
      key: "stop",
      value: function stop() {
        return this._mixer._deactivateAction(this), this.reset();
      }
    }, {
      key: "reset",
      value: function reset() {
        return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
      }
    }, {
      key: "isRunning",
      value: function isRunning() {
        return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
      }
    }, {
      key: "isScheduled",
      value: function isScheduled() {
        return this._mixer._isActiveAction(this);
      }
    }, {
      key: "startAt",
      value: function startAt(t) {
        return this._startTime = t, this;
      }
    }, {
      key: "setLoop",
      value: function setLoop(t, e) {
        return this.loop = t, this.repetitions = e, this;
      }
    }, {
      key: "setEffectiveWeight",
      value: function setEffectiveWeight(t) {
        return this.weight = t, this._effectiveWeight = this.enabled ? t : 0, this.stopFading();
      }
    }, {
      key: "getEffectiveWeight",
      value: function getEffectiveWeight() {
        return this._effectiveWeight;
      }
    }, {
      key: "fadeIn",
      value: function fadeIn(t) {
        return this._scheduleFading(t, 0, 1);
      }
    }, {
      key: "fadeOut",
      value: function fadeOut(t) {
        return this._scheduleFading(t, 1, 0);
      }
    }, {
      key: "crossFadeFrom",
      value: function crossFadeFrom(t, e, n) {
        if (t.fadeOut(e), this.fadeIn(e), n) {
          var _n245 = this._clip.duration,
            _i195 = t._clip.duration,
            _r147 = _i195 / _n245,
            _s88 = _n245 / _i195;
          t.warp(1, _r147, e), this.warp(_s88, 1, e);
        }
        return this;
      }
    }, {
      key: "crossFadeTo",
      value: function crossFadeTo(t, e, n) {
        return t.crossFadeFrom(this, e, n);
      }
    }, {
      key: "stopFading",
      value: function stopFading() {
        var t = this._weightInterpolant;
        return null !== t && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this;
      }
    }, {
      key: "setEffectiveTimeScale",
      value: function setEffectiveTimeScale(t) {
        return this.timeScale = t, this._effectiveTimeScale = this.paused ? 0 : t, this.stopWarping();
      }
    }, {
      key: "getEffectiveTimeScale",
      value: function getEffectiveTimeScale() {
        return this._effectiveTimeScale;
      }
    }, {
      key: "setDuration",
      value: function setDuration(t) {
        return this.timeScale = this._clip.duration / t, this.stopWarping();
      }
    }, {
      key: "syncWith",
      value: function syncWith(t) {
        return this.time = t.time, this.timeScale = t.timeScale, this.stopWarping();
      }
    }, {
      key: "halt",
      value: function halt(t) {
        return this.warp(this._effectiveTimeScale, 0, t);
      }
    }, {
      key: "warp",
      value: function warp(t, e, n) {
        var i = this._mixer,
          r = i.time,
          s = this.timeScale;
        var a = this._timeScaleInterpolant;
        null === a && (a = i._lendControlInterpolant(), this._timeScaleInterpolant = a);
        var o = a.parameterPositions,
          l = a.sampleValues;
        return o[0] = r, o[1] = r + n, l[0] = t / s, l[1] = e / s, this;
      }
    }, {
      key: "stopWarping",
      value: function stopWarping() {
        var t = this._timeScaleInterpolant;
        return null !== t && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this;
      }
    }, {
      key: "getMixer",
      value: function getMixer() {
        return this._mixer;
      }
    }, {
      key: "getClip",
      value: function getClip() {
        return this._clip;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        return this._localRoot || this._mixer._root;
      }
    }, {
      key: "_update",
      value: function _update(t, e, n, i) {
        if (!this.enabled) return void this._updateWeight(t);
        var r = this._startTime;
        if (null !== r) {
          var _i196 = (t - r) * n;
          _i196 < 0 || 0 === n ? e = 0 : (this._startTime = null, e = n * _i196);
        }
        e *= this._updateTimeScale(t);
        var s = this._updateTime(e),
          a = this._updateWeight(t);
        if (a > 0) {
          var _t282 = this._interpolants,
            _e272 = this._propertyBindings;
          if (this.blendMode === Lt) for (var _n246 = 0, _i197 = _t282.length; _n246 !== _i197; ++_n246) _t282[_n246].evaluate(s), _e272[_n246].accumulateAdditive(a);else for (var _n247 = 0, _r148 = _t282.length; _n247 !== _r148; ++_n247) _t282[_n247].evaluate(s), _e272[_n247].accumulate(i, a);
        }
      }
    }, {
      key: "_updateWeight",
      value: function _updateWeight(t) {
        var e = 0;
        if (this.enabled) {
          e = this.weight;
          var _n248 = this._weightInterpolant;
          if (null !== _n248) {
            var _i198 = _n248.evaluate(t)[0];
            e *= _i198, t > _n248.parameterPositions[1] && (this.stopFading(), 0 === _i198 && (this.enabled = !1));
          }
        }
        return this._effectiveWeight = e, e;
      }
    }, {
      key: "_updateTimeScale",
      value: function _updateTimeScale(t) {
        var e = 0;
        if (!this.paused) {
          e = this.timeScale;
          var _n249 = this._timeScaleInterpolant;
          if (null !== _n249) {
            e *= _n249.evaluate(t)[0], t > _n249.parameterPositions[1] && (this.stopWarping(), 0 === e ? this.paused = !0 : this.timeScale = e);
          }
        }
        return this._effectiveTimeScale = e, e;
      }
    }, {
      key: "_updateTime",
      value: function _updateTime(t) {
        var e = this._clip.duration,
          n = this.loop;
        var i = this.time + t,
          r = this._loopCount;
        var s = 2202 === n;
        if (0 === t) return -1 === r ? i : s && 1 == (1 & r) ? e - i : i;
        if (2200 === n) {
          -1 === r && (this._loopCount = 0, this._setEndings(!0, !0, !1));
          t: {
            if (i >= e) i = e;else {
              if (!(i < 0)) {
                this.time = i;
                break t;
              }
              i = 0;
            }
            this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = i, this._mixer.dispatchEvent({
              type: "finished",
              action: this,
              direction: t < 0 ? -1 : 1
            });
          }
        } else {
          if (-1 === r && (t >= 0 ? (r = 0, this._setEndings(!0, 0 === this.repetitions, s)) : this._setEndings(0 === this.repetitions, !0, s)), i >= e || i < 0) {
            var _n250 = Math.floor(i / e);
            i -= e * _n250, r += Math.abs(_n250);
            var _a70 = this.repetitions - r;
            if (_a70 <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, i = t > 0 ? e : 0, this.time = i, this._mixer.dispatchEvent({
              type: "finished",
              action: this,
              direction: t > 0 ? 1 : -1
            });else {
              if (1 === _a70) {
                var _e273 = t < 0;
                this._setEndings(_e273, !_e273, s);
              } else this._setEndings(!1, !1, s);
              this._loopCount = r, this.time = i, this._mixer.dispatchEvent({
                type: "loop",
                action: this,
                loopDelta: _n250
              });
            }
          } else this.time = i;
          if (s && 1 == (1 & r)) return e - i;
        }
        return i;
      }
    }, {
      key: "_setEndings",
      value: function _setEndings(t, e, n) {
        var i = this._interpolantSettings;
        n ? (i.endingStart = At, i.endingEnd = At) : (i.endingStart = t ? this.zeroSlopeAtStart ? At : wt : Rt, i.endingEnd = e ? this.zeroSlopeAtEnd ? At : wt : Rt);
      }
    }, {
      key: "_scheduleFading",
      value: function _scheduleFading(t, e, n) {
        var i = this._mixer,
          r = i.time;
        var s = this._weightInterpolant;
        null === s && (s = i._lendControlInterpolant(), this._weightInterpolant = s);
        var a = s.parameterPositions,
          o = s.sampleValues;
        return a[0] = r, o[0] = e, a[1] = r + t, o[1] = n, this;
      }
    }]);
    return uu;
  }();
  var du = new Float32Array(1);
  var pu = /*#__PURE__*/function () {
    function pu(t) {
      _classCallCheck(this, pu);
      this.value = t;
    }
    _createClass(pu, [{
      key: "clone",
      value: function clone() {
        return new pu(void 0 === this.value.clone ? this.value : this.value.clone());
      }
    }]);
    return pu;
  }();
  var mu = 0;
  function fu(t, e) {
    return t.distance - e.distance;
  }
  function gu(t, e, n, i) {
    if (t.layers.test(e.layers) && t.raycast(e, n), !0 === i) {
      var _i199 = t.children;
      for (var _t283 = 0, _r149 = _i199.length; _t283 < _r149; _t283++) gu(_i199[_t283], e, n, !0);
    }
  }
  var _u = new ce();
  var vu = new ze(),
    yu = new ze();
  var xu = new ze();
  var Mu = new ze(),
    Su = new gn(),
    bu = new gn();
  function Tu(t) {
    var e = [];
    !0 === t.isBone && e.push(t);
    for (var _n251 = 0; _n251 < t.children.length; _n251++) e.push.apply(e, Tu(t.children[_n251]));
    return e;
  }
  var Eu = new ze(),
    wu = new ai(),
    Au = new ai();
  var Ru = new ze(),
    Cu = new ze(),
    Lu = new ze();
  var Pu = new ze(),
    Iu = new Qi();
  function Uu(t, e, n, i, r, s, a) {
    Pu.set(r, s, a).unproject(i);
    var o = e[t];
    if (void 0 !== o) {
      var _t284 = n.getAttribute("position");
      for (var _e274 = 0, _n252 = o.length; _e274 < _n252; _e274++) _t284.setXYZ(o[_e274], Pu.x, Pu.y, Pu.z);
    }
  }
  var Du = new Ve();
  var Nu = new ze();
  var Ou, Fu;
  "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
      revision: e
    }
  })), "undefined" != typeof window && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = e), t.ACESFilmicToneMapping = f, t.AddEquation = o, t.AddOperation = h, t.AdditiveAnimationBlendMode = Lt, t.AdditiveBlending = 2, t.AlphaFormat = 1021, t.AlwaysCompare = 519, t.AlwaysDepth = 1, t.AlwaysStencilFunc = 519, t.AmbientLight = Lh, t.AnimationAction = uu, t.AnimationClip = sh, t.AnimationLoader = /*#__PURE__*/function (_hh5) {
    _inherits(_class2, _hh5);
    var _super116 = _createSuper(_class2);
    function _class2(t) {
      _classCallCheck(this, _class2);
      return _super116.call(this, t);
    }
    _createClass(_class2, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = this,
          s = new ph(this.manager);
        s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials), s.load(t, function (n) {
          try {
            e(r.parse(JSON.parse(n)));
          } catch (e) {
            i ? i(e) : console.error(e), r.manager.itemError(t);
          }
        }, n, i);
      }
    }, {
      key: "parse",
      value: function parse(t) {
        var e = [];
        for (var _n253 = 0; _n253 < t.length; _n253++) {
          var _i200 = sh.parse(t[_n253]);
          e.push(_i200);
        }
        return e;
      }
    }]);
    return _class2;
  }(hh), t.AnimationMixer = /*#__PURE__*/function (_Yt7) {
    _inherits(_class3, _Yt7);
    var _super117 = _createSuper(_class3);
    function _class3(t) {
      var _this101;
      _classCallCheck(this, _class3);
      _this101 = _super117.call(this), _this101._root = t, _this101._initMemoryManager(), _this101._accuIndex = 0, _this101.time = 0, _this101.timeScale = 1;
      return _this101;
    }
    _createClass(_class3, [{
      key: "_bindAction",
      value: function _bindAction(t, e) {
        var n = t._localRoot || this._root,
          i = t._clip.tracks,
          r = i.length,
          s = t._propertyBindings,
          a = t._interpolants,
          o = n.uuid,
          l = this._bindingsByRootAndName;
        var c = l[o];
        void 0 === c && (c = {}, l[o] = c);
        for (var _t285 = 0; _t285 !== r; ++_t285) {
          var _r150 = i[_t285],
            _l30 = _r150.name;
          var _h13 = c[_l30];
          if (void 0 !== _h13) ++_h13.referenceCount, s[_t285] = _h13;else {
            if (_h13 = s[_t285], void 0 !== _h13) {
              null === _h13._cacheIndex && (++_h13.referenceCount, this._addInactiveBinding(_h13, o, _l30));
              continue;
            }
            var _i201 = e && e._propertyBindings[_t285].binding.parsedPath;
            _h13 = new iu(hu.create(n, _l30, _i201), _r150.ValueTypeName, _r150.getValueSize()), ++_h13.referenceCount, this._addInactiveBinding(_h13, o, _l30), s[_t285] = _h13;
          }
          a[_t285].resultBuffer = _h13.buffer;
        }
      }
    }, {
      key: "_activateAction",
      value: function _activateAction(t) {
        if (!this._isActiveAction(t)) {
          if (null === t._cacheIndex) {
            var _e275 = (t._localRoot || this._root).uuid,
              _n254 = t._clip.uuid,
              _i202 = this._actionsByClip[_n254];
            this._bindAction(t, _i202 && _i202.knownActions[0]), this._addInactiveAction(t, _n254, _e275);
          }
          var _e276 = t._propertyBindings;
          for (var _t286 = 0, _n255 = _e276.length; _t286 !== _n255; ++_t286) {
            var _n256 = _e276[_t286];
            0 == _n256.useCount++ && (this._lendBinding(_n256), _n256.saveOriginalState());
          }
          this._lendAction(t);
        }
      }
    }, {
      key: "_deactivateAction",
      value: function _deactivateAction(t) {
        if (this._isActiveAction(t)) {
          var _e277 = t._propertyBindings;
          for (var _t287 = 0, _n257 = _e277.length; _t287 !== _n257; ++_t287) {
            var _n258 = _e277[_t287];
            0 == --_n258.useCount && (_n258.restoreOriginalState(), this._takeBackBinding(_n258));
          }
          this._takeBackAction(t);
        }
      }
    }, {
      key: "_initMemoryManager",
      value: function _initMemoryManager() {
        this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
        var t = this;
        this.stats = {
          actions: {
            get total() {
              return t._actions.length;
            },
            get inUse() {
              return t._nActiveActions;
            }
          },
          bindings: {
            get total() {
              return t._bindings.length;
            },
            get inUse() {
              return t._nActiveBindings;
            }
          },
          controlInterpolants: {
            get total() {
              return t._controlInterpolants.length;
            },
            get inUse() {
              return t._nActiveControlInterpolants;
            }
          }
        };
      }
    }, {
      key: "_isActiveAction",
      value: function _isActiveAction(t) {
        var e = t._cacheIndex;
        return null !== e && e < this._nActiveActions;
      }
    }, {
      key: "_addInactiveAction",
      value: function _addInactiveAction(t, e, n) {
        var i = this._actions,
          r = this._actionsByClip;
        var s = r[e];
        if (void 0 === s) s = {
          knownActions: [t],
          actionByRoot: {}
        }, t._byClipCacheIndex = 0, r[e] = s;else {
          var _e278 = s.knownActions;
          t._byClipCacheIndex = _e278.length, _e278.push(t);
        }
        t._cacheIndex = i.length, i.push(t), s.actionByRoot[n] = t;
      }
    }, {
      key: "_removeInactiveAction",
      value: function _removeInactiveAction(t) {
        var e = this._actions,
          n = e[e.length - 1],
          i = t._cacheIndex;
        n._cacheIndex = i, e[i] = n, e.pop(), t._cacheIndex = null;
        var r = t._clip.uuid,
          s = this._actionsByClip,
          a = s[r],
          o = a.knownActions,
          l = o[o.length - 1],
          c = t._byClipCacheIndex;
        l._byClipCacheIndex = c, o[c] = l, o.pop(), t._byClipCacheIndex = null;
        delete a.actionByRoot[(t._localRoot || this._root).uuid], 0 === o.length && delete s[r], this._removeInactiveBindingsForAction(t);
      }
    }, {
      key: "_removeInactiveBindingsForAction",
      value: function _removeInactiveBindingsForAction(t) {
        var e = t._propertyBindings;
        for (var _t288 = 0, _n259 = e.length; _t288 !== _n259; ++_t288) {
          var _n260 = e[_t288];
          0 == --_n260.referenceCount && this._removeInactiveBinding(_n260);
        }
      }
    }, {
      key: "_lendAction",
      value: function _lendAction(t) {
        var e = this._actions,
          n = t._cacheIndex,
          i = this._nActiveActions++,
          r = e[i];
        t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r;
      }
    }, {
      key: "_takeBackAction",
      value: function _takeBackAction(t) {
        var e = this._actions,
          n = t._cacheIndex,
          i = --this._nActiveActions,
          r = e[i];
        t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r;
      }
    }, {
      key: "_addInactiveBinding",
      value: function _addInactiveBinding(t, e, n) {
        var i = this._bindingsByRootAndName,
          r = this._bindings;
        var s = i[e];
        void 0 === s && (s = {}, i[e] = s), s[n] = t, t._cacheIndex = r.length, r.push(t);
      }
    }, {
      key: "_removeInactiveBinding",
      value: function _removeInactiveBinding(t) {
        var e = this._bindings,
          n = t.binding,
          i = n.rootNode.uuid,
          r = n.path,
          s = this._bindingsByRootAndName,
          a = s[i],
          o = e[e.length - 1],
          l = t._cacheIndex;
        o._cacheIndex = l, e[l] = o, e.pop(), delete a[r], 0 === Object.keys(a).length && delete s[i];
      }
    }, {
      key: "_lendBinding",
      value: function _lendBinding(t) {
        var e = this._bindings,
          n = t._cacheIndex,
          i = this._nActiveBindings++,
          r = e[i];
        t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r;
      }
    }, {
      key: "_takeBackBinding",
      value: function _takeBackBinding(t) {
        var e = this._bindings,
          n = t._cacheIndex,
          i = --this._nActiveBindings,
          r = e[i];
        t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r;
      }
    }, {
      key: "_lendControlInterpolant",
      value: function _lendControlInterpolant() {
        var t = this._controlInterpolants,
          e = this._nActiveControlInterpolants++;
        var n = t[e];
        return void 0 === n && (n = new Zc(new Float32Array(2), new Float32Array(2), 1, du), n.__cacheIndex = e, t[e] = n), n;
      }
    }, {
      key: "_takeBackControlInterpolant",
      value: function _takeBackControlInterpolant(t) {
        var e = this._controlInterpolants,
          n = t.__cacheIndex,
          i = --this._nActiveControlInterpolants,
          r = e[i];
        t.__cacheIndex = i, e[i] = t, r.__cacheIndex = n, e[n] = r;
      }
    }, {
      key: "clipAction",
      value: function clipAction(t, e, n) {
        var i = e || this._root,
          r = i.uuid;
        var s = "string" == typeof t ? sh.findByName(i, t) : t;
        var a = null !== s ? s.uuid : t,
          o = this._actionsByClip[a];
        var l = null;
        if (void 0 === n && (n = null !== s ? s.blendMode : Ct), void 0 !== o) {
          var _t289 = o.actionByRoot[r];
          if (void 0 !== _t289 && _t289.blendMode === n) return _t289;
          l = o.knownActions[0], null === s && (s = l._clip);
        }
        if (null === s) return null;
        var c = new uu(this, s, e, n);
        return this._bindAction(c, l), this._addInactiveAction(c, a, r), c;
      }
    }, {
      key: "existingAction",
      value: function existingAction(t, e) {
        var n = e || this._root,
          i = n.uuid,
          r = "string" == typeof t ? sh.findByName(n, t) : t,
          s = r ? r.uuid : t,
          a = this._actionsByClip[s];
        return void 0 !== a && a.actionByRoot[i] || null;
      }
    }, {
      key: "stopAllAction",
      value: function stopAllAction() {
        var t = this._actions;
        for (var _e279 = this._nActiveActions - 1; _e279 >= 0; --_e279) t[_e279].stop();
        return this;
      }
    }, {
      key: "update",
      value: function update(t) {
        t *= this.timeScale;
        var e = this._actions,
          n = this._nActiveActions,
          i = this.time += t,
          r = Math.sign(t),
          s = this._accuIndex ^= 1;
        for (var _a71 = 0; _a71 !== n; ++_a71) {
          e[_a71]._update(i, t, r, s);
        }
        var a = this._bindings,
          o = this._nActiveBindings;
        for (var _t290 = 0; _t290 !== o; ++_t290) a[_t290].apply(s);
        return this;
      }
    }, {
      key: "setTime",
      value: function setTime(t) {
        this.time = 0;
        for (var _t291 = 0; _t291 < this._actions.length; _t291++) this._actions[_t291].time = 0;
        return this.update(t);
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        return this._root;
      }
    }, {
      key: "uncacheClip",
      value: function uncacheClip(t) {
        var e = this._actions,
          n = t.uuid,
          i = this._actionsByClip,
          r = i[n];
        if (void 0 !== r) {
          var _t292 = r.knownActions;
          for (var _n261 = 0, _i203 = _t292.length; _n261 !== _i203; ++_n261) {
            var _i204 = _t292[_n261];
            this._deactivateAction(_i204);
            var _r151 = _i204._cacheIndex,
              _s89 = e[e.length - 1];
            _i204._cacheIndex = null, _i204._byClipCacheIndex = null, _s89._cacheIndex = _r151, e[_r151] = _s89, e.pop(), this._removeInactiveBindingsForAction(_i204);
          }
          delete i[n];
        }
      }
    }, {
      key: "uncacheRoot",
      value: function uncacheRoot(t) {
        var e = t.uuid,
          n = this._actionsByClip;
        for (var _t293 in n) {
          var _i205 = n[_t293].actionByRoot[e];
          void 0 !== _i205 && (this._deactivateAction(_i205), this._removeInactiveAction(_i205));
        }
        var i = this._bindingsByRootAndName[e];
        if (void 0 !== i) for (var _t294 in i) {
          var _e280 = i[_t294];
          _e280.restoreOriginalState(), this._removeInactiveBinding(_e280);
        }
      }
    }, {
      key: "uncacheAction",
      value: function uncacheAction(t, e) {
        var n = this.existingAction(t, e);
        null !== n && (this._deactivateAction(n), this._removeInactiveAction(n));
      }
    }]);
    return _class3;
  }(Yt), t.AnimationObjectGroup = /*#__PURE__*/function () {
    function _class4() {
      _classCallCheck(this, _class4);
      this.isAnimationObjectGroup = !0, this.uuid = Qt(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
      var t = {};
      this._indicesByUUID = t;
      for (var _e281 = 0, _n262 = arguments.length; _e281 !== _n262; ++_e281) t[arguments[_e281].uuid] = _e281;
      this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
      var e = this;
      this.stats = {
        objects: {
          get total() {
            return e._objects.length;
          },
          get inUse() {
            return this.total - e.nCachedObjects_;
          }
        },
        get bindingsPerObject() {
          return e._bindings.length;
        }
      };
    }
    _createClass(_class4, [{
      key: "add",
      value: function add() {
        var t = this._objects,
          e = this._indicesByUUID,
          n = this._paths,
          i = this._parsedPaths,
          r = this._bindings,
          s = r.length;
        var a,
          o = t.length,
          l = this.nCachedObjects_;
        for (var _c24 = 0, _h14 = arguments.length; _c24 !== _h14; ++_c24) {
          var _h15 = arguments[_c24],
            _u12 = _h15.uuid;
          var _d17 = e[_u12];
          if (void 0 === _d17) {
            _d17 = o++, e[_u12] = _d17, t.push(_h15);
            for (var _t295 = 0, _e282 = s; _t295 !== _e282; ++_t295) r[_t295].push(new hu(_h15, n[_t295], i[_t295]));
          } else if (_d17 < l) {
            a = t[_d17];
            var _o52 = --l,
              _c25 = t[_o52];
            e[_c25.uuid] = _d17, t[_d17] = _c25, e[_u12] = _o52, t[_o52] = _h15;
            for (var _t296 = 0, _e283 = s; _t296 !== _e283; ++_t296) {
              var _e284 = r[_t296],
                _s90 = _e284[_o52];
              var _a72 = _e284[_d17];
              _e284[_d17] = _s90, void 0 === _a72 && (_a72 = new hu(_h15, n[_t296], i[_t296])), _e284[_o52] = _a72;
            }
          } else t[_d17] !== a && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
        this.nCachedObjects_ = l;
      }
    }, {
      key: "remove",
      value: function remove() {
        var t = this._objects,
          e = this._indicesByUUID,
          n = this._bindings,
          i = n.length;
        var r = this.nCachedObjects_;
        for (var _s91 = 0, _a73 = arguments.length; _s91 !== _a73; ++_s91) {
          var _a74 = arguments[_s91],
            _o53 = _a74.uuid,
            _l31 = e[_o53];
          if (void 0 !== _l31 && _l31 >= r) {
            var _s92 = r++,
              _c26 = t[_s92];
            e[_c26.uuid] = _l31, t[_l31] = _c26, e[_o53] = _s92, t[_s92] = _a74;
            for (var _t297 = 0, _e285 = i; _t297 !== _e285; ++_t297) {
              var _e286 = n[_t297],
                _i206 = _e286[_s92],
                _r152 = _e286[_l31];
              _e286[_l31] = _i206, _e286[_s92] = _r152;
            }
          }
        }
        this.nCachedObjects_ = r;
      }
    }, {
      key: "uncache",
      value: function uncache() {
        var t = this._objects,
          e = this._indicesByUUID,
          n = this._bindings,
          i = n.length;
        var r = this.nCachedObjects_,
          s = t.length;
        for (var _a75 = 0, _o54 = arguments.length; _a75 !== _o54; ++_a75) {
          var _o55 = arguments[_a75].uuid,
            _l32 = e[_o55];
          if (void 0 !== _l32) if (delete e[_o55], _l32 < r) {
            var _a76 = --r,
              _o56 = t[_a76],
              _c27 = --s,
              _h16 = t[_c27];
            e[_o56.uuid] = _l32, t[_l32] = _o56, e[_h16.uuid] = _a76, t[_a76] = _h16, t.pop();
            for (var _t298 = 0, _e287 = i; _t298 !== _e287; ++_t298) {
              var _e288 = n[_t298],
                _i207 = _e288[_a76],
                _r153 = _e288[_c27];
              _e288[_l32] = _i207, _e288[_a76] = _r153, _e288.pop();
            }
          } else {
            var _r154 = --s,
              _a77 = t[_r154];
            _r154 > 0 && (e[_a77.uuid] = _l32), t[_l32] = _a77, t.pop();
            for (var _t299 = 0, _e289 = i; _t299 !== _e289; ++_t299) {
              var _e290 = n[_t299];
              _e290[_l32] = _e290[_r154], _e290.pop();
            }
          }
        }
        this.nCachedObjects_ = r;
      }
    }, {
      key: "subscribe_",
      value: function subscribe_(t, e) {
        var n = this._bindingsIndicesByPath;
        var i = n[t];
        var r = this._bindings;
        if (void 0 !== i) return r[i];
        var s = this._paths,
          a = this._parsedPaths,
          o = this._objects,
          l = o.length,
          c = this.nCachedObjects_,
          h = new Array(l);
        i = r.length, n[t] = i, s.push(t), a.push(e), r.push(h);
        for (var _n263 = c, _i208 = o.length; _n263 !== _i208; ++_n263) {
          var _i209 = o[_n263];
          h[_n263] = new hu(_i209, t, e);
        }
        return h;
      }
    }, {
      key: "unsubscribe_",
      value: function unsubscribe_(t) {
        var e = this._bindingsIndicesByPath,
          n = e[t];
        if (void 0 !== n) {
          var _i210 = this._paths,
            _r155 = this._parsedPaths,
            _s93 = this._bindings,
            _a78 = _s93.length - 1,
            _o57 = _s93[_a78];
          e[t[_a78]] = n, _s93[n] = _o57, _s93.pop(), _r155[n] = _r155[_a78], _r155.pop(), _i210[n] = _i210[_a78], _i210.pop();
        }
      }
    }]);
    return _class4;
  }(), t.AnimationUtils = jc, t.ArcCurve = hl, t.ArrayCamera = Fa, t.ArrowHelper = /*#__PURE__*/function (_Gn13) {
    _inherits(_class5, _Gn13);
    var _super118 = _createSuper(_class5);
    function _class5() {
      var _this102;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze(0, 0, 1);
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze(0, 0, 0);
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 16776960;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : .2 * n;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : .2 * r;
      _classCallCheck(this, _class5);
      _this102 = _super118.call(this), _this102.type = "ArrowHelper", void 0 === Ou && (Ou = new Ai(), Ou.setAttribute("position", new yi([0, 0, 0, 0, 1, 0], 3)), Fu = new Ul(0, .5, 1, 5, 1), Fu.translate(0, -.5, 0)), _this102.position.copy(e), _this102.line = new Zo(Ou, new ko({
        color: i,
        toneMapped: !1
      })), _this102.line.matrixAutoUpdate = !1, _this102.add(_this102.line), _this102.cone = new Xi(Fu, new li({
        color: i,
        toneMapped: !1
      })), _this102.cone.matrixAutoUpdate = !1, _this102.add(_this102.cone), _this102.setDirection(t), _this102.setLength(n, r, s);
      return _this102;
    }
    _createClass(_class5, [{
      key: "setDirection",
      value: function setDirection(t) {
        if (t.y > .99999) this.quaternion.set(0, 0, 0, 1);else if (t.y < -.99999) this.quaternion.set(1, 0, 0, 0);else {
          Nu.set(t.z, 0, -t.x).normalize();
          var _e291 = Math.acos(t.y);
          this.quaternion.setFromAxisAngle(Nu, _e291);
        }
      }
    }, {
      key: "setLength",
      value: function setLength(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .2 * t;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .2 * e;
        this.line.scale.set(1, Math.max(1e-4, t - e), 1), this.line.updateMatrix(), this.cone.scale.set(n, e, n), this.cone.position.y = t, this.cone.updateMatrix();
      }
    }, {
      key: "setColor",
      value: function setColor(t) {
        this.line.material.color.set(t), this.cone.material.color.set(t);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(_class5.prototype), "copy", this).call(this, t, !1), this.line.copy(t.line), this.cone.copy(t.cone), this;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
      }
    }]);
    return _class5;
  }(Gn), t.Audio = $h, t.AudioAnalyser = /*#__PURE__*/function () {
    function _class6(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2048;
      _classCallCheck(this, _class6);
      this.analyser = t.context.createAnalyser(), this.analyser.fftSize = e, this.data = new Uint8Array(this.analyser.frequencyBinCount), t.getOutput().connect(this.analyser);
    }
    _createClass(_class6, [{
      key: "getFrequencyData",
      value: function getFrequencyData() {
        return this.analyser.getByteFrequencyData(this.data), this.data;
      }
    }, {
      key: "getAverageFrequency",
      value: function getAverageFrequency() {
        var t = 0;
        var e = this.getFrequencyData();
        for (var _n264 = 0; _n264 < e.length; _n264++) t += e[_n264];
        return t / e.length;
      }
    }]);
    return _class6;
  }(), t.AudioContext = Vh, t.AudioListener = /*#__PURE__*/function (_Gn14) {
    _inherits(_class7, _Gn14);
    var _super119 = _createSuper(_class7);
    function _class7() {
      var _this103;
      _classCallCheck(this, _class7);
      _this103 = _super119.call(this), _this103.type = "AudioListener", _this103.context = Vh.getContext(), _this103.gain = _this103.context.createGain(), _this103.gain.connect(_this103.context.destination), _this103.filter = null, _this103.timeDelta = 0, _this103._clock = new jh();
      return _this103;
    }
    _createClass(_class7, [{
      key: "getInput",
      value: function getInput() {
        return this.gain;
      }
    }, {
      key: "removeFilter",
      value: function removeFilter() {
        return null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
      }
    }, {
      key: "getFilter",
      value: function getFilter() {
        return this.filter;
      }
    }, {
      key: "setFilter",
      value: function setFilter(t) {
        return null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = t, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
      }
    }, {
      key: "getMasterVolume",
      value: function getMasterVolume() {
        return this.gain.gain.value;
      }
    }, {
      key: "setMasterVolume",
      value: function setMasterVolume(t) {
        return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this;
      }
    }, {
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        _get(_getPrototypeOf(_class7.prototype), "updateMatrixWorld", this).call(this, t);
        var e = this.context.listener,
          n = this.up;
        if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Yh, Zh, Jh), Kh.set(0, 0, -1).applyQuaternion(Zh), e.positionX) {
          var _t300 = this.context.currentTime + this.timeDelta;
          e.positionX.linearRampToValueAtTime(Yh.x, _t300), e.positionY.linearRampToValueAtTime(Yh.y, _t300), e.positionZ.linearRampToValueAtTime(Yh.z, _t300), e.forwardX.linearRampToValueAtTime(Kh.x, _t300), e.forwardY.linearRampToValueAtTime(Kh.y, _t300), e.forwardZ.linearRampToValueAtTime(Kh.z, _t300), e.upX.linearRampToValueAtTime(n.x, _t300), e.upY.linearRampToValueAtTime(n.y, _t300), e.upZ.linearRampToValueAtTime(n.z, _t300);
        } else e.setPosition(Yh.x, Yh.y, Yh.z), e.setOrientation(Kh.x, Kh.y, Kh.z, n.x, n.y, n.z);
      }
    }]);
    return _class7;
  }(Gn), t.AudioLoader = /*#__PURE__*/function (_hh6) {
    _inherits(_class8, _hh6);
    var _super120 = _createSuper(_class8);
    function _class8(t) {
      _classCallCheck(this, _class8);
      return _super120.call(this, t);
    }
    _createClass(_class8, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = this,
          s = new ph(this.manager);
        function a(e) {
          i ? i(e) : console.error(e), r.manager.itemError(t);
        }
        s.setResponseType("arraybuffer"), s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials), s.load(t, function (t) {
          try {
            var _n265 = t.slice(0);
            Vh.getContext().decodeAudioData(_n265, function (t) {
              e(t);
            }, a);
          } catch (t) {
            a(t);
          }
        }, n, i);
      }
    }]);
    return _class8;
  }(hh), t.AxesHelper = /*#__PURE__*/function (_$o) {
    _inherits(_class9, _$o);
    var _super121 = _createSuper(_class9);
    function _class9() {
      var _this104;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      _classCallCheck(this, _class9);
      var e = [0, 0, 0, t, 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t],
        n = new Ai();
      n.setAttribute("position", new yi(e, 3)), n.setAttribute("color", new yi([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
      _this104 = _super121.call(this, n, new ko({
        vertexColors: !0,
        toneMapped: !1
      })), _this104.type = "AxesHelper";
      return _this104;
    }
    _createClass(_class9, [{
      key: "setColors",
      value: function setColors(t, e, n) {
        var i = new ai(),
          r = this.geometry.attributes.color.array;
        return i.set(t), i.toArray(r, 0), i.toArray(r, 3), i.set(e), i.toArray(r, 6), i.toArray(r, 9), i.set(n), i.toArray(r, 12), i.toArray(r, 15), this.geometry.attributes.color.needsUpdate = !0, this;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }]);
    return _class9;
  }($o), t.BackSide = a, t.BasicDepthPacking = 3200, t.BasicShadowMap = 0, t.Bone = Co, t.BooleanKeyframeTrack = $c, t.Box2 = /*#__PURE__*/function () {
    function _class10() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ce(1 / 0, 1 / 0);
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ce(-1 / 0, -1 / 0);
      _classCallCheck(this, _class10);
      this.isBox2 = !0, this.min = t, this.max = e;
    }
    _createClass(_class10, [{
      key: "set",
      value: function set(t, e) {
        return this.min.copy(t), this.max.copy(e), this;
      }
    }, {
      key: "setFromPoints",
      value: function setFromPoints(t) {
        this.makeEmpty();
        for (var _e292 = 0, _n266 = t.length; _e292 < _n266; _e292++) this.expandByPoint(t[_e292]);
        return this;
      }
    }, {
      key: "setFromCenterAndSize",
      value: function setFromCenterAndSize(t, e) {
        var n = _u.copy(e).multiplyScalar(.5);
        return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.min.copy(t.min), this.max.copy(t.max), this;
      }
    }, {
      key: "makeEmpty",
      value: function makeEmpty() {
        return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y;
      }
    }, {
      key: "getCenter",
      value: function getCenter(t) {
        return this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5);
      }
    }, {
      key: "getSize",
      value: function getSize(t) {
        return this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min);
      }
    }, {
      key: "expandByPoint",
      value: function expandByPoint(t) {
        return this.min.min(t), this.max.max(t), this;
      }
    }, {
      key: "expandByVector",
      value: function expandByVector(t) {
        return this.min.sub(t), this.max.add(t), this;
      }
    }, {
      key: "expandByScalar",
      value: function expandByScalar(t) {
        return this.min.addScalar(-t), this.max.addScalar(t), this;
      }
    }, {
      key: "containsPoint",
      value: function containsPoint(t) {
        return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y);
      }
    }, {
      key: "containsBox",
      value: function containsBox(t) {
        return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y;
      }
    }, {
      key: "getParameter",
      value: function getParameter(t, e) {
        return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y));
      }
    }, {
      key: "intersectsBox",
      value: function intersectsBox(t) {
        return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y);
      }
    }, {
      key: "clampPoint",
      value: function clampPoint(t, e) {
        return e.copy(t).clamp(this.min, this.max);
      }
    }, {
      key: "distanceToPoint",
      value: function distanceToPoint(t) {
        return this.clampPoint(t, _u).distanceTo(t);
      }
    }, {
      key: "intersect",
      value: function intersect(t) {
        return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
      }
    }, {
      key: "union",
      value: function union(t) {
        return this.min.min(t.min), this.max.max(t.max), this;
      }
    }, {
      key: "translate",
      value: function translate(t) {
        return this.min.add(t), this.max.add(t), this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.min.equals(this.min) && t.max.equals(this.max);
      }
    }]);
    return _class10;
  }(), t.Box3 = Ve, t.Box3Helper = /*#__PURE__*/function (_$o2) {
    _inherits(_class11, _$o2);
    var _super122 = _createSuper(_class11);
    function _class11(t) {
      var _this105;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16776960;
      _classCallCheck(this, _class11);
      var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
        i = new Ai();
      i.setIndex(new gi(n, 1)), i.setAttribute("position", new yi([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3)), _this105 = _super122.call(this, i, new ko({
        color: e,
        toneMapped: !1
      })), _this105.box = t, _this105.type = "Box3Helper", _this105.geometry.computeBoundingSphere();
      return _this105;
    }
    _createClass(_class11, [{
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        var e = this.box;
        e.isEmpty() || (e.getCenter(this.position), e.getSize(this.scale), this.scale.multiplyScalar(.5), _get(_getPrototypeOf(_class11.prototype), "updateMatrixWorld", this).call(this, t));
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }]);
    return _class11;
  }($o), t.BoxGeometry = qi, t.BoxHelper = /*#__PURE__*/function (_$o3) {
    _inherits(_class12, _$o3);
    var _super123 = _createSuper(_class12);
    function _class12(t) {
      var _this106;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16776960;
      _classCallCheck(this, _class12);
      var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
        i = new Float32Array(24),
        r = new Ai();
      r.setIndex(new gi(n, 1)), r.setAttribute("position", new gi(i, 3)), _this106 = _super123.call(this, r, new ko({
        color: e,
        toneMapped: !1
      })), _this106.object = t, _this106.type = "BoxHelper", _this106.matrixAutoUpdate = !1, _this106.update();
      return _this106;
    }
    _createClass(_class12, [{
      key: "update",
      value: function update(t) {
        if (void 0 !== t && console.warn("THREE.BoxHelper: .update() has no longer arguments."), void 0 !== this.object && Du.setFromObject(this.object), Du.isEmpty()) return;
        var e = Du.min,
          n = Du.max,
          i = this.geometry.attributes.position,
          r = i.array;
        r[0] = n.x, r[1] = n.y, r[2] = n.z, r[3] = e.x, r[4] = n.y, r[5] = n.z, r[6] = e.x, r[7] = e.y, r[8] = n.z, r[9] = n.x, r[10] = e.y, r[11] = n.z, r[12] = n.x, r[13] = n.y, r[14] = e.z, r[15] = e.x, r[16] = n.y, r[17] = e.z, r[18] = e.x, r[19] = e.y, r[20] = e.z, r[21] = n.x, r[22] = e.y, r[23] = e.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
      }
    }, {
      key: "setFromObject",
      value: function setFromObject(t) {
        return this.object = t, this.update(), this;
      }
    }, {
      key: "copy",
      value: function copy(t, e) {
        return _get(_getPrototypeOf(_class12.prototype), "copy", this).call(this, t, e), this.object = t.object, this;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }]);
    return _class12;
  }($o), t.BufferAttribute = gi, t.BufferGeometry = Ai, t.BufferGeometryLoader = Fh, t.ByteType = 1010, t.Cache = oh, t.Camera = Qi, t.CameraHelper = /*#__PURE__*/function (_$o4) {
    _inherits(_class13, _$o4);
    var _super124 = _createSuper(_class13);
    function _class13(t) {
      var _this107;
      _classCallCheck(this, _class13);
      var e = new Ai(),
        n = new ko({
          color: 16777215,
          vertexColors: !0,
          toneMapped: !1
        }),
        i = [],
        r = [],
        s = {};
      function a(t, e) {
        o(t), o(e);
      }
      function o(t) {
        i.push(0, 0, 0), r.push(0, 0, 0), void 0 === s[t] && (s[t] = []), s[t].push(i.length / 3 - 1);
      }
      a("n1", "n2"), a("n2", "n4"), a("n4", "n3"), a("n3", "n1"), a("f1", "f2"), a("f2", "f4"), a("f4", "f3"), a("f3", "f1"), a("n1", "f1"), a("n2", "f2"), a("n3", "f3"), a("n4", "f4"), a("p", "n1"), a("p", "n2"), a("p", "n3"), a("p", "n4"), a("u1", "u2"), a("u2", "u3"), a("u3", "u1"), a("c", "t"), a("p", "c"), a("cn1", "cn2"), a("cn3", "cn4"), a("cf1", "cf2"), a("cf3", "cf4"), e.setAttribute("position", new yi(i, 3)), e.setAttribute("color", new yi(r, 3)), _this107 = _super124.call(this, e, n), _this107.type = "CameraHelper", _this107.camera = t, _this107.camera.updateProjectionMatrix && _this107.camera.updateProjectionMatrix(), _this107.matrix = t.matrixWorld, _this107.matrixAutoUpdate = !1, _this107.pointMap = s, _this107.update();
      var l = new ai(16755200),
        c = new ai(16711680),
        h = new ai(43775),
        u = new ai(16777215),
        d = new ai(3355443);
      _this107.setColors(l, c, h, u, d);
      return _this107;
    }
    _createClass(_class13, [{
      key: "setColors",
      value: function setColors(t, e, n, i, r) {
        var s = this.geometry.getAttribute("color");
        s.setXYZ(0, t.r, t.g, t.b), s.setXYZ(1, t.r, t.g, t.b), s.setXYZ(2, t.r, t.g, t.b), s.setXYZ(3, t.r, t.g, t.b), s.setXYZ(4, t.r, t.g, t.b), s.setXYZ(5, t.r, t.g, t.b), s.setXYZ(6, t.r, t.g, t.b), s.setXYZ(7, t.r, t.g, t.b), s.setXYZ(8, t.r, t.g, t.b), s.setXYZ(9, t.r, t.g, t.b), s.setXYZ(10, t.r, t.g, t.b), s.setXYZ(11, t.r, t.g, t.b), s.setXYZ(12, t.r, t.g, t.b), s.setXYZ(13, t.r, t.g, t.b), s.setXYZ(14, t.r, t.g, t.b), s.setXYZ(15, t.r, t.g, t.b), s.setXYZ(16, t.r, t.g, t.b), s.setXYZ(17, t.r, t.g, t.b), s.setXYZ(18, t.r, t.g, t.b), s.setXYZ(19, t.r, t.g, t.b), s.setXYZ(20, t.r, t.g, t.b), s.setXYZ(21, t.r, t.g, t.b), s.setXYZ(22, t.r, t.g, t.b), s.setXYZ(23, t.r, t.g, t.b), s.setXYZ(24, e.r, e.g, e.b), s.setXYZ(25, e.r, e.g, e.b), s.setXYZ(26, e.r, e.g, e.b), s.setXYZ(27, e.r, e.g, e.b), s.setXYZ(28, e.r, e.g, e.b), s.setXYZ(29, e.r, e.g, e.b), s.setXYZ(30, e.r, e.g, e.b), s.setXYZ(31, e.r, e.g, e.b), s.setXYZ(32, n.r, n.g, n.b), s.setXYZ(33, n.r, n.g, n.b), s.setXYZ(34, n.r, n.g, n.b), s.setXYZ(35, n.r, n.g, n.b), s.setXYZ(36, n.r, n.g, n.b), s.setXYZ(37, n.r, n.g, n.b), s.setXYZ(38, i.r, i.g, i.b), s.setXYZ(39, i.r, i.g, i.b), s.setXYZ(40, r.r, r.g, r.b), s.setXYZ(41, r.r, r.g, r.b), s.setXYZ(42, r.r, r.g, r.b), s.setXYZ(43, r.r, r.g, r.b), s.setXYZ(44, r.r, r.g, r.b), s.setXYZ(45, r.r, r.g, r.b), s.setXYZ(46, r.r, r.g, r.b), s.setXYZ(47, r.r, r.g, r.b), s.setXYZ(48, r.r, r.g, r.b), s.setXYZ(49, r.r, r.g, r.b), s.needsUpdate = !0;
      }
    }, {
      key: "update",
      value: function update() {
        var t = this.geometry,
          e = this.pointMap;
        Iu.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), Uu("c", e, t, Iu, 0, 0, -1), Uu("t", e, t, Iu, 0, 0, 1), Uu("n1", e, t, Iu, -1, -1, -1), Uu("n2", e, t, Iu, 1, -1, -1), Uu("n3", e, t, Iu, -1, 1, -1), Uu("n4", e, t, Iu, 1, 1, -1), Uu("f1", e, t, Iu, -1, -1, 1), Uu("f2", e, t, Iu, 1, -1, 1), Uu("f3", e, t, Iu, -1, 1, 1), Uu("f4", e, t, Iu, 1, 1, 1), Uu("u1", e, t, Iu, .7, 1.1, -1), Uu("u2", e, t, Iu, -.7, 1.1, -1), Uu("u3", e, t, Iu, 0, 2, -1), Uu("cf1", e, t, Iu, -1, 0, 1), Uu("cf2", e, t, Iu, 1, 0, 1), Uu("cf3", e, t, Iu, 0, -1, 1), Uu("cf4", e, t, Iu, 0, 1, 1), Uu("cn1", e, t, Iu, -1, 0, -1), Uu("cn2", e, t, Iu, 1, 0, -1), Uu("cn3", e, t, Iu, 0, -1, -1), Uu("cn4", e, t, Iu, 0, 1, -1), t.getAttribute("position").needsUpdate = !0;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }]);
    return _class13;
  }($o), t.CanvasTexture = /*#__PURE__*/function (_Ie7) {
    _inherits(_class14, _Ie7);
    var _super125 = _createSuper(_class14);
    function _class14(t, e, n, i, r, s, a, o, l) {
      var _this108;
      _classCallCheck(this, _class14);
      _this108 = _super125.call(this, t, e, n, i, r, s, a, o, l), _this108.isCanvasTexture = !0, _this108.needsUpdate = !0;
      return _this108;
    }
    return _createClass(_class14);
  }(Ie), t.CapsuleGeometry = Pl, t.CatmullRomCurve3 = gl, t.CineonToneMapping = m, t.CircleGeometry = Il, t.ClampToEdgeWrapping = T, t.Clock = jh, t.Color = ai, t.ColorKeyframeTrack = Qc, t.ColorManagement = be, t.CompressedArrayTexture = /*#__PURE__*/function (_ol) {
    _inherits(_class15, _ol);
    var _super126 = _createSuper(_class15);
    function _class15(t, e, n, i, r, s) {
      var _this109;
      _classCallCheck(this, _class15);
      _this109 = _super126.call(this, t, e, n, r, s), _this109.isCompressedArrayTexture = !0, _this109.image.depth = i, _this109.wrapR = T;
      return _this109;
    }
    return _createClass(_class15);
  }(ol), t.CompressedCubeTexture = /*#__PURE__*/function (_ol2) {
    _inherits(_class16, _ol2);
    var _super127 = _createSuper(_class16);
    function _class16(t, e, n) {
      var _this110;
      _classCallCheck(this, _class16);
      _this110 = _super127.call(this, void 0, t[0].width, t[0].height, e, n, v), _this110.isCompressedCubeTexture = !0, _this110.isCubeTexture = !0, _this110.image = t;
      return _this110;
    }
    return _createClass(_class16);
  }(ol), t.CompressedTexture = ol, t.CompressedTextureLoader = /*#__PURE__*/function (_hh7) {
    _inherits(_class17, _hh7);
    var _super128 = _createSuper(_class17);
    function _class17(t) {
      _classCallCheck(this, _class17);
      return _super128.call(this, t);
    }
    _createClass(_class17, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = this,
          s = [],
          a = new ol(),
          o = new ph(this.manager);
        o.setPath(this.path), o.setResponseType("arraybuffer"), o.setRequestHeader(this.requestHeader), o.setWithCredentials(r.withCredentials);
        var l = 0;
        function c(c) {
          o.load(t[c], function (t) {
            var n = r.parse(t, !0);
            s[c] = {
              width: n.width,
              height: n.height,
              format: n.format,
              mipmaps: n.mipmaps
            }, l += 1, 6 === l && (1 === n.mipmapCount && (a.minFilter = C), a.image = s, a.format = n.format, a.needsUpdate = !0, e && e(a));
          }, n, i);
        }
        if (Array.isArray(t)) for (var _e293 = 0, _n267 = t.length; _e293 < _n267; ++_e293) c(_e293);else o.load(t, function (t) {
          var n = r.parse(t, !0);
          if (n.isCubemap) {
            var _t301 = n.mipmaps.length / n.mipmapCount;
            for (var _e294 = 0; _e294 < _t301; _e294++) {
              s[_e294] = {
                mipmaps: []
              };
              for (var _t302 = 0; _t302 < n.mipmapCount; _t302++) s[_e294].mipmaps.push(n.mipmaps[_e294 * n.mipmapCount + _t302]), s[_e294].format = n.format, s[_e294].width = n.width, s[_e294].height = n.height;
            }
            a.image = s;
          } else a.image.width = n.width, a.image.height = n.height, a.mipmaps = n.mipmaps;
          1 === n.mipmapCount && (a.minFilter = C), a.format = n.format, a.needsUpdate = !0, e && e(a);
        }, n, i);
        return a;
      }
    }]);
    return _class17;
  }(hh), t.ConeGeometry = Dl, t.CubeCamera = nr, t.CubeReflectionMapping = v, t.CubeRefractionMapping = y, t.CubeTexture = ir, t.CubeTextureLoader = /*#__PURE__*/function (_hh8) {
    _inherits(_class18, _hh8);
    var _super129 = _createSuper(_class18);
    function _class18(t) {
      _classCallCheck(this, _class18);
      return _super129.call(this, t);
    }
    _createClass(_class18, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = new ir();
        r.colorSpace = Dt;
        var s = new mh(this.manager);
        s.setCrossOrigin(this.crossOrigin), s.setPath(this.path);
        var a = 0;
        function o(n) {
          s.load(t[n], function (t) {
            r.images[n] = t, a++, 6 === a && (r.needsUpdate = !0, e && e(r));
          }, void 0, i);
        }
        for (var _e295 = 0; _e295 < t.length; ++_e295) o(_e295);
        return r;
      }
    }]);
    return _class18;
  }(hh), t.CubeUVReflectionMapping = S, t.CubicBezierCurve = xl, t.CubicBezierCurve3 = Ml, t.CubicInterpolant = Yc, t.CullFaceBack = 1, t.CullFaceFront = 2, t.CullFaceFrontBack = 3, t.CullFaceNone = 0, t.Curve = ll, t.CurvePath = Rl, t.CustomBlending = 5, t.CustomToneMapping = g, t.CylinderGeometry = Ul, t.Cylindrical = /*#__PURE__*/function () {
    function _class19() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      _classCallCheck(this, _class19);
      return this.radius = t, this.theta = e, this.y = n, this;
    }
    _createClass(_class19, [{
      key: "set",
      value: function set(t, e, n) {
        return this.radius = t, this.theta = e, this.y = n, this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.radius = t.radius, this.theta = t.theta, this.y = t.y, this;
      }
    }, {
      key: "setFromVector3",
      value: function setFromVector3(t) {
        return this.setFromCartesianCoords(t.x, t.y, t.z);
      }
    }, {
      key: "setFromCartesianCoords",
      value: function setFromCartesianCoords(t, e, n) {
        return this.radius = Math.sqrt(t * t + n * n), this.theta = Math.atan2(t, n), this.y = e, this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return _class19;
  }(), t.Data3DTexture = Fe, t.DataArrayTexture = Oe, t.DataTexture = Lo, t.DataTextureLoader = /*#__PURE__*/function (_hh9) {
    _inherits(_class20, _hh9);
    var _super130 = _createSuper(_class20);
    function _class20(t) {
      _classCallCheck(this, _class20);
      return _super130.call(this, t);
    }
    _createClass(_class20, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = this,
          s = new Lo(),
          a = new ph(this.manager);
        return a.setResponseType("arraybuffer"), a.setRequestHeader(this.requestHeader), a.setPath(this.path), a.setWithCredentials(r.withCredentials), a.load(t, function (t) {
          var n;
          try {
            n = r.parse(t);
          } catch (t) {
            if (void 0 === i) return void console.error(t);
            i(t);
          }
          void 0 !== n.image ? s.image = n.image : void 0 !== n.data && (s.image.width = n.width, s.image.height = n.height, s.image.data = n.data), s.wrapS = void 0 !== n.wrapS ? n.wrapS : T, s.wrapT = void 0 !== n.wrapT ? n.wrapT : T, s.magFilter = void 0 !== n.magFilter ? n.magFilter : C, s.minFilter = void 0 !== n.minFilter ? n.minFilter : C, s.anisotropy = void 0 !== n.anisotropy ? n.anisotropy : 1, void 0 !== n.colorSpace ? s.colorSpace = n.colorSpace : void 0 !== n.encoding && (s.encoding = n.encoding), void 0 !== n.flipY && (s.flipY = n.flipY), void 0 !== n.format && (s.format = n.format), void 0 !== n.type && (s.type = n.type), void 0 !== n.mipmaps && (s.mipmaps = n.mipmaps, s.minFilter = P), 1 === n.mipmapCount && (s.minFilter = C), void 0 !== n.generateMipmaps && (s.generateMipmaps = n.generateMipmaps), s.needsUpdate = !0, e && e(s, n);
        }, n, i), s;
      }
    }]);
    return _class20;
  }(hh), t.DataUtils = pi, t.DecrementStencilOp = 7683, t.DecrementWrapStencilOp = 34056, t.DefaultLoadingManager = ch, t.DepthFormat = V, t.DepthStencilFormat = k, t.DepthTexture = Ga, t.DirectionalLight = Ch, t.DirectionalLightHelper = /*#__PURE__*/function (_Gn15) {
    _inherits(_class21, _Gn15);
    var _super131 = _createSuper(_class21);
    function _class21(t, e, n) {
      var _this111;
      _classCallCheck(this, _class21);
      _this111 = _super131.call(this), _this111.light = t, _this111.matrix = t.matrixWorld, _this111.matrixAutoUpdate = !1, _this111.color = n, _this111.type = "DirectionalLightHelper", void 0 === e && (e = 1);
      var i = new Ai();
      i.setAttribute("position", new yi([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0], 3));
      var r = new ko({
        fog: !1,
        toneMapped: !1
      });
      _this111.lightPlane = new Zo(i, r), _this111.add(_this111.lightPlane), i = new Ai(), i.setAttribute("position", new yi([0, 0, 0, 0, 0, 1], 3)), _this111.targetLine = new Zo(i, r), _this111.add(_this111.targetLine), _this111.update();
      return _this111;
    }
    _createClass(_class21, [{
      key: "dispose",
      value: function dispose() {
        this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
      }
    }, {
      key: "update",
      value: function update() {
        this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), Ru.setFromMatrixPosition(this.light.matrixWorld), Cu.setFromMatrixPosition(this.light.target.matrixWorld), Lu.subVectors(Cu, Ru), this.lightPlane.lookAt(Cu), void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(Cu), this.targetLine.scale.z = Lu.length();
      }
    }]);
    return _class21;
  }(Gn), t.DiscreteInterpolant = Jc, t.DisplayP3ColorSpace = Ot, t.DodecahedronGeometry = Ol, t.DoubleSide = 2, t.DstAlphaFactor = 206, t.DstColorFactor = 208, t.DynamicCopyUsage = 35050, t.DynamicDrawUsage = 35048, t.DynamicReadUsage = 35049, t.EdgesGeometry = Gl, t.EllipseCurve = cl, t.EqualCompare = 514, t.EqualDepth = 4, t.EqualStencilFunc = 514, t.EquirectangularReflectionMapping = x, t.EquirectangularRefractionMapping = M, t.Euler = wn, t.EventDispatcher = Yt, t.ExtrudeGeometry = _c, t.FileLoader = ph, t.Float16BufferAttribute = /*#__PURE__*/function (_gi5) {
    _inherits(_class22, _gi5);
    var _super132 = _createSuper(_class22);
    function _class22(t, e, n) {
      var _this112;
      _classCallCheck(this, _class22);
      _this112 = _super132.call(this, new Uint16Array(t), e, n), _this112.isFloat16BufferAttribute = !0;
      return _this112;
    }
    _createClass(_class22, [{
      key: "getX",
      value: function getX(t) {
        var e = di(this.array[t * this.itemSize]);
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setX",
      value: function setX(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize] = ui(e), this;
      }
    }, {
      key: "getY",
      value: function getY(t) {
        var e = di(this.array[t * this.itemSize + 1]);
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setY",
      value: function setY(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize + 1] = ui(e), this;
      }
    }, {
      key: "getZ",
      value: function getZ(t) {
        var e = di(this.array[t * this.itemSize + 2]);
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setZ",
      value: function setZ(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize + 2] = ui(e), this;
      }
    }, {
      key: "getW",
      value: function getW(t) {
        var e = di(this.array[t * this.itemSize + 3]);
        return this.normalized && (e = ae(e, this.array)), e;
      }
    }, {
      key: "setW",
      value: function setW(t, e) {
        return this.normalized && (e = oe(e, this.array)), this.array[t * this.itemSize + 3] = ui(e), this;
      }
    }, {
      key: "setXY",
      value: function setXY(t, e, n) {
        return t *= this.itemSize, this.normalized && (e = oe(e, this.array), n = oe(n, this.array)), this.array[t + 0] = ui(e), this.array[t + 1] = ui(n), this;
      }
    }, {
      key: "setXYZ",
      value: function setXYZ(t, e, n, i) {
        return t *= this.itemSize, this.normalized && (e = oe(e, this.array), n = oe(n, this.array), i = oe(i, this.array)), this.array[t + 0] = ui(e), this.array[t + 1] = ui(n), this.array[t + 2] = ui(i), this;
      }
    }, {
      key: "setXYZW",
      value: function setXYZW(t, e, n, i, r) {
        return t *= this.itemSize, this.normalized && (e = oe(e, this.array), n = oe(n, this.array), i = oe(i, this.array), r = oe(r, this.array)), this.array[t + 0] = ui(e), this.array[t + 1] = ui(n), this.array[t + 2] = ui(i), this.array[t + 3] = ui(r), this;
      }
    }]);
    return _class22;
  }(gi), t.Float32BufferAttribute = yi, t.Float64BufferAttribute = /*#__PURE__*/function (_gi6) {
    _inherits(_class23, _gi6);
    var _super133 = _createSuper(_class23);
    function _class23(t, e, n) {
      _classCallCheck(this, _class23);
      return _super133.call(this, new Float64Array(t), e, n);
    }
    return _createClass(_class23);
  }(gi), t.FloatType = O, t.Fog = Ya, t.FogExp2 = qa, t.FramebufferTexture = /*#__PURE__*/function (_Ie8) {
    _inherits(_class24, _Ie8);
    var _super134 = _createSuper(_class24);
    function _class24(t, e) {
      var _this113;
      _classCallCheck(this, _class24);
      _this113 = _super134.call(this, {
        width: t,
        height: e
      }), _this113.isFramebufferTexture = !0, _this113.magFilter = w, _this113.minFilter = w, _this113.generateMipmaps = !1, _this113.needsUpdate = !0;
      return _this113;
    }
    return _createClass(_class24);
  }(Ie), t.FrontSide = s, t.Frustum = ur, t.GLBufferAttribute = /*#__PURE__*/function () {
    function _class25(t, e, n, i, r) {
      _classCallCheck(this, _class25);
      this.isGLBufferAttribute = !0, this.name = "", this.buffer = t, this.type = e, this.itemSize = n, this.elementSize = i, this.count = r, this.version = 0;
    }
    _createClass(_class25, [{
      key: "needsUpdate",
      set: function set(t) {
        !0 === t && this.version++;
      }
    }, {
      key: "setBuffer",
      value: function setBuffer(t) {
        return this.buffer = t, this;
      }
    }, {
      key: "setType",
      value: function setType(t, e) {
        return this.type = t, this.elementSize = e, this;
      }
    }, {
      key: "setItemSize",
      value: function setItemSize(t) {
        return this.itemSize = t, this;
      }
    }, {
      key: "setCount",
      value: function setCount(t) {
        return this.count = t, this;
      }
    }]);
    return _class25;
  }(), t.GLSL1 = "100", t.GLSL3 = Wt, t.GreaterCompare = 516, t.GreaterDepth = 6, t.GreaterEqualCompare = 518, t.GreaterEqualDepth = 5, t.GreaterEqualStencilFunc = 518, t.GreaterStencilFunc = 516, t.GridHelper = /*#__PURE__*/function (_$o5) {
    _inherits(_class26, _$o5);
    var _super135 = _createSuper(_class26);
    function _class26() {
      var _this114;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4473924;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8947848;
      _classCallCheck(this, _class26);
      n = new ai(n), i = new ai(i);
      var r = e / 2,
        s = t / e,
        a = t / 2,
        o = [],
        l = [];
      for (var _t303 = 0, _c28 = 0, _h17 = -a; _t303 <= e; _t303++, _h17 += s) {
        o.push(-a, 0, _h17, a, 0, _h17), o.push(_h17, 0, -a, _h17, 0, a);
        var _e296 = _t303 === r ? n : i;
        _e296.toArray(l, _c28), _c28 += 3, _e296.toArray(l, _c28), _c28 += 3, _e296.toArray(l, _c28), _c28 += 3, _e296.toArray(l, _c28), _c28 += 3;
      }
      var c = new Ai();
      c.setAttribute("position", new yi(o, 3)), c.setAttribute("color", new yi(l, 3));
      _this114 = _super135.call(this, c, new ko({
        vertexColors: !0,
        toneMapped: !1
      })), _this114.type = "GridHelper";
      return _this114;
    }
    _createClass(_class26, [{
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }]);
    return _class26;
  }($o), t.Group = Ba, t.HalfFloatType = F, t.HemisphereLight = gh, t.HemisphereLightHelper = /*#__PURE__*/function (_Gn16) {
    _inherits(_class27, _Gn16);
    var _super136 = _createSuper(_class27);
    function _class27(t, e, n) {
      var _this115;
      _classCallCheck(this, _class27);
      _this115 = _super136.call(this), _this115.light = t, _this115.matrix = t.matrixWorld, _this115.matrixAutoUpdate = !1, _this115.color = n, _this115.type = "HemisphereLightHelper";
      var i = new xc(e);
      i.rotateY(.5 * Math.PI), _this115.material = new li({
        wireframe: !0,
        fog: !1,
        toneMapped: !1
      }), void 0 === _this115.color && (_this115.material.vertexColors = !0);
      var r = i.getAttribute("position"),
        s = new Float32Array(3 * r.count);
      i.setAttribute("color", new gi(s, 3)), _this115.add(new Xi(i, _this115.material)), _this115.update();
      return _this115;
    }
    _createClass(_class27, [{
      key: "dispose",
      value: function dispose() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose();
      }
    }, {
      key: "update",
      value: function update() {
        var t = this.children[0];
        if (void 0 !== this.color) this.material.color.set(this.color);else {
          var _e297 = t.geometry.getAttribute("color");
          wu.copy(this.light.color), Au.copy(this.light.groundColor);
          for (var _t304 = 0, _n268 = _e297.count; _t304 < _n268; _t304++) {
            var _i211 = _t304 < _n268 / 2 ? wu : Au;
            _e297.setXYZ(_t304, _i211.r, _i211.g, _i211.b);
          }
          _e297.needsUpdate = !0;
        }
        this.light.updateWorldMatrix(!0, !1), t.lookAt(Eu.setFromMatrixPosition(this.light.matrixWorld).negate());
      }
    }]);
    return _class27;
  }(Gn), t.IcosahedronGeometry = yc, t.ImageBitmapLoader = /*#__PURE__*/function (_hh10) {
    _inherits(_class28, _hh10);
    var _super137 = _createSuper(_class28);
    function _class28(t) {
      var _this116;
      _classCallCheck(this, _class28);
      _this116 = _super137.call(this, t), _this116.isImageBitmapLoader = !0, "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), _this116.options = {
        premultiplyAlpha: "none"
      };
      return _this116;
    }
    _createClass(_class28, [{
      key: "setOptions",
      value: function setOptions(t) {
        return this.options = t, this;
      }
    }, {
      key: "load",
      value: function load(t, e, n, i) {
        void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
        var r = this,
          s = oh.get(t);
        if (void 0 !== s) return r.manager.itemStart(t), setTimeout(function () {
          e && e(s), r.manager.itemEnd(t);
        }, 0), s;
        var a = {};
        a.credentials = "anonymous" === this.crossOrigin ? "same-origin" : "include", a.headers = this.requestHeader, fetch(t, a).then(function (t) {
          return t.blob();
        }).then(function (t) {
          return createImageBitmap(t, Object.assign(r.options, {
            colorSpaceConversion: "none"
          }));
        }).then(function (n) {
          oh.add(t, n), e && e(n), r.manager.itemEnd(t);
        }).catch(function (e) {
          i && i(e), r.manager.itemError(t), r.manager.itemEnd(t);
        }), r.manager.itemStart(t);
      }
    }]);
    return _class28;
  }(hh), t.ImageLoader = mh, t.ImageUtils = Ae, t.IncrementStencilOp = 7682, t.IncrementWrapStencilOp = 34055, t.InstancedBufferAttribute = Do, t.InstancedBufferGeometry = Oh, t.InstancedInterleavedBuffer = /*#__PURE__*/function (_Ja) {
    _inherits(_class29, _Ja);
    var _super138 = _createSuper(_class29);
    function _class29(t, e) {
      var _this117;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      _classCallCheck(this, _class29);
      _this117 = _super138.call(this, t, e), _this117.isInstancedInterleavedBuffer = !0, _this117.meshPerAttribute = n;
      return _this117;
    }
    _createClass(_class29, [{
      key: "copy",
      value: function copy(t) {
        return _get(_getPrototypeOf(_class29.prototype), "copy", this).call(this, t), this.meshPerAttribute = t.meshPerAttribute, this;
      }
    }, {
      key: "clone",
      value: function clone(t) {
        var e = _get(_getPrototypeOf(_class29.prototype), "clone", this).call(this, t);
        return e.meshPerAttribute = this.meshPerAttribute, e;
      }
    }, {
      key: "toJSON",
      value: function toJSON(t) {
        var e = _get(_getPrototypeOf(_class29.prototype), "toJSON", this).call(this, t);
        return e.isInstancedInterleavedBuffer = !0, e.meshPerAttribute = this.meshPerAttribute, e;
      }
    }]);
    return _class29;
  }(Ja), t.InstancedMesh = Vo, t.Int16BufferAttribute = /*#__PURE__*/function (_gi7) {
    _inherits(_class30, _gi7);
    var _super139 = _createSuper(_class30);
    function _class30(t, e, n) {
      _classCallCheck(this, _class30);
      return _super139.call(this, new Int16Array(t), e, n);
    }
    return _createClass(_class30);
  }(gi), t.Int32BufferAttribute = /*#__PURE__*/function (_gi8) {
    _inherits(_class31, _gi8);
    var _super140 = _createSuper(_class31);
    function _class31(t, e, n) {
      _classCallCheck(this, _class31);
      return _super140.call(this, new Int32Array(t), e, n);
    }
    return _createClass(_class31);
  }(gi), t.Int8BufferAttribute = /*#__PURE__*/function (_gi9) {
    _inherits(_class32, _gi9);
    var _super141 = _createSuper(_class32);
    function _class32(t, e, n) {
      _classCallCheck(this, _class32);
      return _super141.call(this, new Int8Array(t), e, n);
    }
    return _createClass(_class32);
  }(gi), t.IntType = D, t.InterleavedBuffer = Ja, t.InterleavedBufferAttribute = $a, t.Interpolant = qc, t.InterpolateDiscrete = bt, t.InterpolateLinear = Tt, t.InterpolateSmooth = Et, t.InvertStencilOp = 5386, t.KeepStencilOp = Vt, t.KeyframeTrack = Kc, t.LOD = vo, t.LatheGeometry = Ll, t.Layers = An, t.LessCompare = 513, t.LessDepth = 2, t.LessEqualCompare = 515, t.LessEqualDepth = 3, t.LessEqualStencilFunc = 515, t.LessStencilFunc = 513, t.Light = fh, t.LightProbe = Uh, t.Line = Zo, t.Line3 = /*#__PURE__*/function () {
    function _class33() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ze();
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ze();
      _classCallCheck(this, _class33);
      this.start = t, this.end = e;
    }
    _createClass(_class33, [{
      key: "set",
      value: function set(t, e) {
        return this.start.copy(t), this.end.copy(e), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.start.copy(t.start), this.end.copy(t.end), this;
      }
    }, {
      key: "getCenter",
      value: function getCenter(t) {
        return t.addVectors(this.start, this.end).multiplyScalar(.5);
      }
    }, {
      key: "delta",
      value: function delta(t) {
        return t.subVectors(this.end, this.start);
      }
    }, {
      key: "distanceSq",
      value: function distanceSq() {
        return this.start.distanceToSquared(this.end);
      }
    }, {
      key: "distance",
      value: function distance() {
        return this.start.distanceTo(this.end);
      }
    }, {
      key: "at",
      value: function at(t, e) {
        return this.delta(e).multiplyScalar(t).add(this.start);
      }
    }, {
      key: "closestPointToPointParameter",
      value: function closestPointToPointParameter(t, e) {
        vu.subVectors(t, this.start), yu.subVectors(this.end, this.start);
        var n = yu.dot(yu);
        var i = yu.dot(vu) / n;
        return e && (i = te(i, 0, 1)), i;
      }
    }, {
      key: "closestPointToPoint",
      value: function closestPointToPoint(t, e, n) {
        var i = this.closestPointToPointParameter(t, e);
        return this.delta(n).multiplyScalar(i).add(this.start);
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        return this.start.applyMatrix4(t), this.end.applyMatrix4(t), this;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return t.start.equals(this.start) && t.end.equals(this.end);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return _class33;
  }(), t.LineBasicMaterial = ko, t.LineCurve = Sl, t.LineCurve3 = bl, t.LineDashedMaterial = Hc, t.LineLoop = Qo, t.LineSegments = $o, t.LinearDisplayP3ColorSpace = Ft, t.LinearEncoding = Pt, t.LinearFilter = C, t.LinearInterpolant = Zc, t.LinearMipMapLinearFilter = 1008, t.LinearMipMapNearestFilter = 1007, t.LinearMipmapLinearFilter = P, t.LinearMipmapNearestFilter = L, t.LinearSRGBColorSpace = Nt, t.LinearToneMapping = d, t.LinearTransfer = Bt, t.Loader = hh, t.LoaderUtils = Nh, t.LoadingManager = lh, t.LoopOnce = 2200, t.LoopPingPong = 2202, t.LoopRepeat = 2201, t.LuminanceAlphaFormat = 1025, t.LuminanceFormat = 1024, t.MOUSE = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
  }, t.Material = ei, t.MaterialLoader = Dh, t.MathUtils = le, t.Matrix3 = he, t.Matrix4 = gn, t.MaxEquation = 104, t.Mesh = Xi, t.MeshBasicMaterial = li, t.MeshDepthMaterial = Pa, t.MeshDistanceMaterial = Ia, t.MeshLambertMaterial = Bc, t.MeshMatcapMaterial = zc, t.MeshNormalMaterial = Fc, t.MeshPhongMaterial = Nc, t.MeshPhysicalMaterial = Dc, t.MeshStandardMaterial = Uc, t.MeshToonMaterial = Oc, t.MinEquation = 103, t.MirroredRepeatWrapping = E, t.MixOperation = c, t.MultiplyBlending = 4, t.MultiplyOperation = l, t.NearestFilter = w, t.NearestMipMapLinearFilter = 1005, t.NearestMipMapNearestFilter = 1004, t.NearestMipmapLinearFilter = R, t.NearestMipmapNearestFilter = A, t.NeverCompare = 512, t.NeverDepth = 0, t.NeverStencilFunc = 512, t.NoBlending = 0, t.NoColorSpace = Ut, t.NoToneMapping = u, t.NormalAnimationBlendMode = Ct, t.NormalBlending = 1, t.NotEqualCompare = 517, t.NotEqualDepth = 7, t.NotEqualStencilFunc = 517, t.NumberKeyframeTrack = th, t.Object3D = Gn, t.ObjectLoader = /*#__PURE__*/function (_hh11) {
    _inherits(_class34, _hh11);
    var _super142 = _createSuper(_class34);
    function _class34(t) {
      _classCallCheck(this, _class34);
      return _super142.call(this, t);
    }
    _createClass(_class34, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = this,
          s = "" === this.path ? Nh.extractUrlBase(t) : this.path;
        this.resourcePath = this.resourcePath || s;
        var a = new ph(this.manager);
        a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(t, function (n) {
          var s = null;
          try {
            s = JSON.parse(n);
          } catch (e) {
            return void 0 !== i && i(e), void console.error("THREE:ObjectLoader: Can't parse " + t + ".", e.message);
          }
          var a = s.metadata;
          if (void 0 === a || void 0 === a.type || "geometry" === a.type.toLowerCase()) return void 0 !== i && i(new Error("THREE.ObjectLoader: Can't load " + t)), void console.error("THREE.ObjectLoader: Can't load " + t);
          r.parse(s, e);
        }, n, i);
      }
    }, {
      key: "loadAsync",
      value: function () {
        var _loadAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(t, e) {
          var n, i, r, s, a;
          return _regeneratorRuntime().wrap(function _callee2$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                n = "" === this.path ? Nh.extractUrlBase(t) : this.path;
                this.resourcePath = this.resourcePath || n;
                i = new ph(this.manager);
                i.setPath(this.path), i.setRequestHeader(this.requestHeader), i.setWithCredentials(this.withCredentials);
                _context8.next = 6;
                return i.loadAsync(t, e);
              case 6:
                r = _context8.sent;
                s = JSON.parse(r);
                a = s.metadata;
                if (!(void 0 === a || void 0 === a.type || "geometry" === a.type.toLowerCase())) {
                  _context8.next = 11;
                  break;
                }
                throw new Error("THREE.ObjectLoader: Can't load " + t);
              case 11:
                _context8.next = 13;
                return this.parseAsync(s);
              case 13:
                return _context8.abrupt("return", _context8.sent);
              case 14:
              case "end":
                return _context8.stop();
            }
          }, _callee2, this);
        }));
        function loadAsync(_x5, _x6) {
          return _loadAsync.apply(this, arguments);
        }
        return loadAsync;
      }()
    }, {
      key: "parse",
      value: function parse(t, e) {
        var n = this.parseAnimations(t.animations),
          i = this.parseShapes(t.shapes),
          r = this.parseGeometries(t.geometries, i),
          s = this.parseImages(t.images, function () {
            void 0 !== e && e(l);
          }),
          a = this.parseTextures(t.textures, s),
          o = this.parseMaterials(t.materials, a),
          l = this.parseObject(t.object, r, o, a, n),
          c = this.parseSkeletons(t.skeletons, l);
        if (this.bindSkeletons(l, c), void 0 !== e) {
          var _t305 = !1;
          for (var _e298 in s) if (s[_e298].data instanceof HTMLImageElement) {
            _t305 = !0;
            break;
          }
          !1 === _t305 && e(l);
        }
        return l;
      }
    }, {
      key: "parseAsync",
      value: function () {
        var _parseAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(t) {
          var e, n, i, r, s, a, o, l;
          return _regeneratorRuntime().wrap(function _callee3$(_context9) {
            while (1) switch (_context9.prev = _context9.next) {
              case 0:
                e = this.parseAnimations(t.animations);
                n = this.parseShapes(t.shapes);
                i = this.parseGeometries(t.geometries, n);
                _context9.next = 5;
                return this.parseImagesAsync(t.images);
              case 5:
                r = _context9.sent;
                s = this.parseTextures(t.textures, r);
                a = this.parseMaterials(t.materials, s);
                o = this.parseObject(t.object, i, a, s, e);
                l = this.parseSkeletons(t.skeletons, o);
                return _context9.abrupt("return", (this.bindSkeletons(o, l), o));
              case 11:
              case "end":
                return _context9.stop();
            }
          }, _callee3, this);
        }));
        function parseAsync(_x7) {
          return _parseAsync.apply(this, arguments);
        }
        return parseAsync;
      }()
    }, {
      key: "parseShapes",
      value: function parseShapes(t) {
        var e = {};
        if (void 0 !== t) for (var _n269 = 0, _i212 = t.length; _n269 < _i212; _n269++) {
          var _i213 = new Vl().fromJSON(t[_n269]);
          e[_i213.uuid] = _i213;
        }
        return e;
      }
    }, {
      key: "parseSkeletons",
      value: function parseSkeletons(t, e) {
        var n = {},
          i = {};
        if (e.traverse(function (t) {
          t.isBone && (i[t.uuid] = t);
        }), void 0 !== t) for (var _e299 = 0, _r156 = t.length; _e299 < _r156; _e299++) {
          var _r157 = new Uo().fromJSON(t[_e299], i);
          n[_r157.uuid] = _r157;
        }
        return n;
      }
    }, {
      key: "parseGeometries",
      value: function parseGeometries(t, e) {
        var n = {};
        if (void 0 !== t) {
          var _i214 = new Fh();
          for (var _r158 = 0, _s94 = t.length; _r158 < _s94; _r158++) {
            var _s95 = void 0;
            var _a79 = t[_r158];
            switch (_a79.type) {
              case "BufferGeometry":
              case "InstancedBufferGeometry":
                _s95 = _i214.parse(_a79);
                break;
              default:
                _a79.type in Lc ? _s95 = Lc[_a79.type].fromJSON(_a79, e) : console.warn("THREE.ObjectLoader: Unsupported geometry type \"".concat(_a79.type, "\""));
            }
            _s95.uuid = _a79.uuid, void 0 !== _a79.name && (_s95.name = _a79.name), void 0 !== _a79.userData && (_s95.userData = _a79.userData), n[_a79.uuid] = _s95;
          }
        }
        return n;
      }
    }, {
      key: "parseMaterials",
      value: function parseMaterials(t, e) {
        var n = {},
          i = {};
        if (void 0 !== t) {
          var _r159 = new Dh();
          _r159.setTextures(e);
          for (var _e300 = 0, _s96 = t.length; _e300 < _s96; _e300++) {
            var _s97 = t[_e300];
            void 0 === n[_s97.uuid] && (n[_s97.uuid] = _r159.parse(_s97)), i[_s97.uuid] = n[_s97.uuid];
          }
        }
        return i;
      }
    }, {
      key: "parseAnimations",
      value: function parseAnimations(t) {
        var e = {};
        if (void 0 !== t) for (var _n270 = 0; _n270 < t.length; _n270++) {
          var _i215 = t[_n270],
            _r160 = sh.parse(_i215);
          e[_r160.uuid] = _r160;
        }
        return e;
      }
    }, {
      key: "parseImages",
      value: function parseImages(t, e) {
        var n = this,
          i = {};
        var r;
        function s(t) {
          if ("string" == typeof t) {
            var _e301 = t;
            return function (t) {
              return n.manager.itemStart(t), r.load(t, function () {
                n.manager.itemEnd(t);
              }, void 0, function () {
                n.manager.itemError(t), n.manager.itemEnd(t);
              });
            }(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(_e301) ? _e301 : n.resourcePath + _e301);
          }
          return t.data ? {
            data: me(t.type, t.data),
            width: t.width,
            height: t.height
          } : null;
        }
        if (void 0 !== t && t.length > 0) {
          var _n271 = new lh(e);
          r = new mh(_n271), r.setCrossOrigin(this.crossOrigin);
          for (var _e302 = 0, _n272 = t.length; _e302 < _n272; _e302++) {
            var _n273 = t[_e302],
              _r161 = _n273.url;
            if (Array.isArray(_r161)) {
              var _t306 = [];
              for (var _e303 = 0, _n274 = _r161.length; _e303 < _n274; _e303++) {
                var _n275 = s(_r161[_e303]);
                null !== _n275 && (_n275 instanceof HTMLImageElement ? _t306.push(_n275) : _t306.push(new Lo(_n275.data, _n275.width, _n275.height)));
              }
              i[_n273.uuid] = new Ce(_t306);
            } else {
              var _t307 = s(_n273.url);
              i[_n273.uuid] = new Ce(_t307);
            }
          }
        }
        return i;
      }
    }, {
      key: "parseImagesAsync",
      value: function () {
        var _parseImagesAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(t) {
          var e, n, i, r, _r162, _e304, _i216, _i217, _s98, _t308, _e305, _n276, _n277, _i218, _t309;
          return _regeneratorRuntime().wrap(function _callee5$(_context11) {
            while (1) switch (_context11.prev = _context11.next) {
              case 0:
                _r162 = function _r165() {
                  _r162 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(t) {
                    var _n278, _r163;
                    return _regeneratorRuntime().wrap(function _callee4$(_context10) {
                      while (1) switch (_context10.prev = _context10.next) {
                        case 0:
                          if (!("string" == typeof t)) {
                            _context10.next = 5;
                            break;
                          }
                          _n278 = t, _r163 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(_n278) ? _n278 : e.resourcePath + _n278;
                          _context10.next = 4;
                          return i.loadAsync(_r163);
                        case 4:
                          return _context10.abrupt("return", _context10.sent);
                        case 5:
                          return _context10.abrupt("return", t.data ? {
                            data: me(t.type, t.data),
                            width: t.width,
                            height: t.height
                          } : null);
                        case 6:
                        case "end":
                          return _context10.stop();
                      }
                    }, _callee4);
                  }));
                  return _r162.apply(this, arguments);
                };
                r = function _r164(_x9) {
                  return _r162.apply(this, arguments);
                };
                e = this, n = {};
                if (!(void 0 !== t && t.length > 0)) {
                  _context11.next = 30;
                  break;
                }
                i = new mh(this.manager), i.setCrossOrigin(this.crossOrigin);
                _e304 = 0, _i216 = t.length;
              case 6:
                if (!(_e304 < _i216)) {
                  _context11.next = 30;
                  break;
                }
                _i217 = t[_e304], _s98 = _i217.url;
                if (!Array.isArray(_s98)) {
                  _context11.next = 23;
                  break;
                }
                _t308 = [];
                _e305 = 0, _n276 = _s98.length;
              case 11:
                if (!(_e305 < _n276)) {
                  _context11.next = 20;
                  break;
                }
                _n277 = _s98[_e305];
                _context11.next = 15;
                return r(_n277);
              case 15:
                _i218 = _context11.sent;
                null !== _i218 && (_i218 instanceof HTMLImageElement ? _t308.push(_i218) : _t308.push(new Lo(_i218.data, _i218.width, _i218.height)));
              case 17:
                _e305++;
                _context11.next = 11;
                break;
              case 20:
                n[_i217.uuid] = new Ce(_t308);
                _context11.next = 27;
                break;
              case 23:
                _context11.next = 25;
                return r(_i217.url);
              case 25:
                _t309 = _context11.sent;
                n[_i217.uuid] = new Ce(_t309);
              case 27:
                _e304++;
                _context11.next = 6;
                break;
              case 30:
                return _context11.abrupt("return", n);
              case 31:
              case "end":
                return _context11.stop();
            }
          }, _callee5, this);
        }));
        function parseImagesAsync(_x8) {
          return _parseImagesAsync.apply(this, arguments);
        }
        return parseImagesAsync;
      }()
    }, {
      key: "parseTextures",
      value: function parseTextures(t, e) {
        function n(t, e) {
          return "number" == typeof t ? t : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", t), e[t]);
        }
        var i = {};
        if (void 0 !== t) for (var r = 0, _s99 = t.length; r < _s99; r++) {
          var _s100 = t[r];
          void 0 === _s100.image && console.warn('THREE.ObjectLoader: No "image" specified for', _s100.uuid), void 0 === e[_s100.image] && console.warn("THREE.ObjectLoader: Undefined image", _s100.image);
          var _a80 = e[_s100.image],
            _o58 = _a80.data;
          var _l33 = void 0;
          Array.isArray(_o58) ? (_l33 = new ir(), 6 === _o58.length && (_l33.needsUpdate = !0)) : (_l33 = _o58 && _o58.data ? new Lo() : new Ie(), _o58 && (_l33.needsUpdate = !0)), _l33.source = _a80, _l33.uuid = _s100.uuid, void 0 !== _s100.name && (_l33.name = _s100.name), void 0 !== _s100.mapping && (_l33.mapping = n(_s100.mapping, Bh)), void 0 !== _s100.channel && (_l33.channel = _s100.channel), void 0 !== _s100.offset && _l33.offset.fromArray(_s100.offset), void 0 !== _s100.repeat && _l33.repeat.fromArray(_s100.repeat), void 0 !== _s100.center && _l33.center.fromArray(_s100.center), void 0 !== _s100.rotation && (_l33.rotation = _s100.rotation), void 0 !== _s100.wrap && (_l33.wrapS = n(_s100.wrap[0], zh), _l33.wrapT = n(_s100.wrap[1], zh)), void 0 !== _s100.format && (_l33.format = _s100.format), void 0 !== _s100.internalFormat && (_l33.internalFormat = _s100.internalFormat), void 0 !== _s100.type && (_l33.type = _s100.type), void 0 !== _s100.colorSpace && (_l33.colorSpace = _s100.colorSpace), void 0 !== _s100.encoding && (_l33.encoding = _s100.encoding), void 0 !== _s100.minFilter && (_l33.minFilter = n(_s100.minFilter, Hh)), void 0 !== _s100.magFilter && (_l33.magFilter = n(_s100.magFilter, Hh)), void 0 !== _s100.anisotropy && (_l33.anisotropy = _s100.anisotropy), void 0 !== _s100.flipY && (_l33.flipY = _s100.flipY), void 0 !== _s100.generateMipmaps && (_l33.generateMipmaps = _s100.generateMipmaps), void 0 !== _s100.premultiplyAlpha && (_l33.premultiplyAlpha = _s100.premultiplyAlpha), void 0 !== _s100.unpackAlignment && (_l33.unpackAlignment = _s100.unpackAlignment), void 0 !== _s100.compareFunction && (_l33.compareFunction = _s100.compareFunction), void 0 !== _s100.userData && (_l33.userData = _s100.userData), i[_s100.uuid] = _l33;
        }
        return i;
      }
    }, {
      key: "parseObject",
      value: function parseObject(t, e, n, i, r) {
        var s, a, o;
        function l(t) {
          return void 0 === e[t] && console.warn("THREE.ObjectLoader: Undefined geometry", t), e[t];
        }
        function c(t) {
          if (void 0 !== t) {
            if (Array.isArray(t)) {
              var _e306 = [];
              for (var _i219 = 0, _r166 = t.length; _i219 < _r166; _i219++) {
                var _r167 = t[_i219];
                void 0 === n[_r167] && console.warn("THREE.ObjectLoader: Undefined material", _r167), _e306.push(n[_r167]);
              }
              return _e306;
            }
            return void 0 === n[t] && console.warn("THREE.ObjectLoader: Undefined material", t), n[t];
          }
        }
        function h(t) {
          return void 0 === i[t] && console.warn("THREE.ObjectLoader: Undefined texture", t), i[t];
        }
        switch (t.type) {
          case "Scene":
            s = new Za(), void 0 !== t.background && (Number.isInteger(t.background) ? s.background = new ai(t.background) : s.background = h(t.background)), void 0 !== t.environment && (s.environment = h(t.environment)), void 0 !== t.fog && ("Fog" === t.fog.type ? s.fog = new Ya(t.fog.color, t.fog.near, t.fog.far) : "FogExp2" === t.fog.type && (s.fog = new qa(t.fog.color, t.fog.density)), "" !== t.fog.name && (s.fog.name = t.fog.name)), void 0 !== t.backgroundBlurriness && (s.backgroundBlurriness = t.backgroundBlurriness), void 0 !== t.backgroundIntensity && (s.backgroundIntensity = t.backgroundIntensity);
            break;
          case "PerspectiveCamera":
            s = new tr(t.fov, t.aspect, t.near, t.far), void 0 !== t.focus && (s.focus = t.focus), void 0 !== t.zoom && (s.zoom = t.zoom), void 0 !== t.filmGauge && (s.filmGauge = t.filmGauge), void 0 !== t.filmOffset && (s.filmOffset = t.filmOffset), void 0 !== t.view && (s.view = Object.assign({}, t.view));
            break;
          case "OrthographicCamera":
            s = new Er(t.left, t.right, t.top, t.bottom, t.near, t.far), void 0 !== t.zoom && (s.zoom = t.zoom), void 0 !== t.view && (s.view = Object.assign({}, t.view));
            break;
          case "AmbientLight":
            s = new Lh(t.color, t.intensity);
            break;
          case "DirectionalLight":
            s = new Ch(t.color, t.intensity);
            break;
          case "PointLight":
            s = new Ah(t.color, t.intensity, t.distance, t.decay);
            break;
          case "RectAreaLight":
            s = new Ph(t.color, t.intensity, t.width, t.height);
            break;
          case "SpotLight":
            s = new Sh(t.color, t.intensity, t.distance, t.angle, t.penumbra, t.decay);
            break;
          case "HemisphereLight":
            s = new gh(t.color, t.groundColor, t.intensity);
            break;
          case "LightProbe":
            s = new Uh().fromJSON(t);
            break;
          case "SkinnedMesh":
            a = l(t.geometry), o = c(t.material), s = new Ro(a, o), void 0 !== t.bindMode && (s.bindMode = t.bindMode), void 0 !== t.bindMatrix && s.bindMatrix.fromArray(t.bindMatrix), void 0 !== t.skeleton && (s.skeleton = t.skeleton);
            break;
          case "Mesh":
            a = l(t.geometry), o = c(t.material), s = new Xi(a, o);
            break;
          case "InstancedMesh":
            a = l(t.geometry), o = c(t.material);
            var _e307 = t.count,
              _n279 = t.instanceMatrix,
              _i220 = t.instanceColor;
            s = new Vo(a, o, _e307), s.instanceMatrix = new Do(new Float32Array(_n279.array), 16), void 0 !== _i220 && (s.instanceColor = new Do(new Float32Array(_i220.array), _i220.itemSize));
            break;
          case "LOD":
            s = new vo();
            break;
          case "Line":
            s = new Zo(l(t.geometry), c(t.material));
            break;
          case "LineLoop":
            s = new Qo(l(t.geometry), c(t.material));
            break;
          case "LineSegments":
            s = new $o(l(t.geometry), c(t.material));
            break;
          case "PointCloud":
          case "Points":
            s = new sl(l(t.geometry), c(t.material));
            break;
          case "Sprite":
            s = new mo(c(t.material));
            break;
          case "Group":
            s = new Ba();
            break;
          case "Bone":
            s = new Co();
            break;
          default:
            s = new Gn();
        }
        if (s.uuid = t.uuid, void 0 !== t.name && (s.name = t.name), void 0 !== t.matrix ? (s.matrix.fromArray(t.matrix), void 0 !== t.matrixAutoUpdate && (s.matrixAutoUpdate = t.matrixAutoUpdate), s.matrixAutoUpdate && s.matrix.decompose(s.position, s.quaternion, s.scale)) : (void 0 !== t.position && s.position.fromArray(t.position), void 0 !== t.rotation && s.rotation.fromArray(t.rotation), void 0 !== t.quaternion && s.quaternion.fromArray(t.quaternion), void 0 !== t.scale && s.scale.fromArray(t.scale)), void 0 !== t.up && s.up.fromArray(t.up), void 0 !== t.castShadow && (s.castShadow = t.castShadow), void 0 !== t.receiveShadow && (s.receiveShadow = t.receiveShadow), t.shadow && (void 0 !== t.shadow.bias && (s.shadow.bias = t.shadow.bias), void 0 !== t.shadow.normalBias && (s.shadow.normalBias = t.shadow.normalBias), void 0 !== t.shadow.radius && (s.shadow.radius = t.shadow.radius), void 0 !== t.shadow.mapSize && s.shadow.mapSize.fromArray(t.shadow.mapSize), void 0 !== t.shadow.camera && (s.shadow.camera = this.parseObject(t.shadow.camera))), void 0 !== t.visible && (s.visible = t.visible), void 0 !== t.frustumCulled && (s.frustumCulled = t.frustumCulled), void 0 !== t.renderOrder && (s.renderOrder = t.renderOrder), void 0 !== t.userData && (s.userData = t.userData), void 0 !== t.layers && (s.layers.mask = t.layers), void 0 !== t.children) {
          var _a81 = t.children;
          for (var _t310 = 0; _t310 < _a81.length; _t310++) s.add(this.parseObject(_a81[_t310], e, n, i, r));
        }
        if (void 0 !== t.animations) {
          var _e308 = t.animations;
          for (var _t311 = 0; _t311 < _e308.length; _t311++) {
            var _n280 = _e308[_t311];
            s.animations.push(r[_n280]);
          }
        }
        if ("LOD" === t.type) {
          void 0 !== t.autoUpdate && (s.autoUpdate = t.autoUpdate);
          var _e309 = t.levels;
          for (var _t312 = 0; _t312 < _e309.length; _t312++) {
            var _n281 = _e309[_t312],
              _i221 = s.getObjectByProperty("uuid", _n281.object);
            void 0 !== _i221 && s.addLevel(_i221, _n281.distance, _n281.hysteresis);
          }
        }
        return s;
      }
    }, {
      key: "bindSkeletons",
      value: function bindSkeletons(t, e) {
        0 !== Object.keys(e).length && t.traverse(function (t) {
          if (!0 === t.isSkinnedMesh && void 0 !== t.skeleton) {
            var _n282 = e[t.skeleton];
            void 0 === _n282 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", t.skeleton) : t.bind(_n282, t.bindMatrix);
          }
        });
      }
    }]);
    return _class34;
  }(hh), t.ObjectSpaceNormalMap = 1, t.OctahedronGeometry = xc, t.OneFactor = 201, t.OneMinusDstAlphaFactor = 207, t.OneMinusDstColorFactor = 209, t.OneMinusSrcAlphaFactor = 205, t.OneMinusSrcColorFactor = 203, t.OrthographicCamera = Er, t.P3Primaries = Gt, t.PCFShadowMap = n, t.PCFSoftShadowMap = i, t.PMREMGenerator = Dr, t.Path = Cl, t.PerspectiveCamera = tr, t.Plane = lr, t.PlaneGeometry = mr, t.PlaneHelper = /*#__PURE__*/function (_Zo3) {
    _inherits(_class35, _Zo3);
    var _super143 = _createSuper(_class35);
    function _class35(t) {
      var _this118;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16776960;
      _classCallCheck(this, _class35);
      var i = n,
        r = new Ai();
      r.setAttribute("position", new yi([1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], 3)), r.computeBoundingSphere(), _this118 = _super143.call(this, r, new ko({
        color: i,
        toneMapped: !1
      })), _this118.type = "PlaneHelper", _this118.plane = t, _this118.size = e;
      var s = new Ai();
      s.setAttribute("position", new yi([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], 3)), s.computeBoundingSphere(), _this118.add(new Xi(s, new li({
        color: i,
        opacity: .2,
        transparent: !0,
        depthWrite: !1,
        toneMapped: !1
      })));
      return _this118;
    }
    _createClass(_class35, [{
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        this.position.set(0, 0, 0), this.scale.set(.5 * this.size, .5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), _get(_getPrototypeOf(_class35.prototype), "updateMatrixWorld", this).call(this, t);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
      }
    }]);
    return _class35;
  }(Zo), t.PointLight = Ah, t.PointLightHelper = /*#__PURE__*/function (_Xi3) {
    _inherits(_class36, _Xi3);
    var _super144 = _createSuper(_class36);
    function _class36(t, e, n) {
      var _this119;
      _classCallCheck(this, _class36);
      _this119 = _super144.call(this, new bc(e, 4, 2), new li({
        wireframe: !0,
        fog: !1,
        toneMapped: !1
      })), _this119.light = t, _this119.color = n, _this119.type = "PointLightHelper", _this119.matrix = _this119.light.matrixWorld, _this119.matrixAutoUpdate = !1, _this119.update();
      return _this119;
    }
    _createClass(_class36, [{
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }, {
      key: "update",
      value: function update() {
        this.light.updateWorldMatrix(!0, !1), void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
      }
    }]);
    return _class36;
  }(Xi), t.Points = sl, t.PointsMaterial = tl, t.PolarGridHelper = /*#__PURE__*/function (_$o6) {
    _inherits(_class37, _$o6);
    var _super145 = _createSuper(_class37);
    function _class37() {
      var _this120;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;
      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4473924;
      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 8947848;
      _classCallCheck(this, _class37);
      r = new ai(r), s = new ai(s);
      var a = [],
        o = [];
      if (e > 1) for (var _n283 = 0; _n283 < e; _n283++) {
        var _i222 = _n283 / e * (2 * Math.PI),
          _l34 = Math.sin(_i222) * t,
          _c29 = Math.cos(_i222) * t;
        a.push(0, 0, 0), a.push(_l34, 0, _c29);
        var _h18 = 1 & _n283 ? r : s;
        o.push(_h18.r, _h18.g, _h18.b), o.push(_h18.r, _h18.g, _h18.b);
      }
      for (var _e310 = 0; _e310 < n; _e310++) {
        var _l35 = 1 & _e310 ? r : s,
          _c30 = t - t / n * _e310;
        for (var _t313 = 0; _t313 < i; _t313++) {
          var _e311 = _t313 / i * (2 * Math.PI),
            _n284 = Math.sin(_e311) * _c30,
            _r168 = Math.cos(_e311) * _c30;
          a.push(_n284, 0, _r168), o.push(_l35.r, _l35.g, _l35.b), _e311 = (_t313 + 1) / i * (2 * Math.PI), _n284 = Math.sin(_e311) * _c30, _r168 = Math.cos(_e311) * _c30, a.push(_n284, 0, _r168), o.push(_l35.r, _l35.g, _l35.b);
        }
      }
      var l = new Ai();
      l.setAttribute("position", new yi(a, 3)), l.setAttribute("color", new yi(o, 3));
      _this120 = _super145.call(this, l, new ko({
        vertexColors: !0,
        toneMapped: !1
      })), _this120.type = "PolarGridHelper";
      return _this120;
    }
    _createClass(_class37, [{
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }]);
    return _class37;
  }($o), t.PolyhedronGeometry = Nl, t.PositionalAudio = /*#__PURE__*/function (_$h) {
    _inherits(_class38, _$h);
    var _super146 = _createSuper(_class38);
    function _class38(t) {
      var _this121;
      _classCallCheck(this, _class38);
      _this121 = _super146.call(this, t), _this121.panner = _this121.context.createPanner(), _this121.panner.panningModel = "HRTF", _this121.panner.connect(_this121.gain);
      return _this121;
    }
    _createClass(_class38, [{
      key: "connect",
      value: function connect() {
        _get(_getPrototypeOf(_class38.prototype), "connect", this).call(this), this.panner.connect(this.gain);
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        _get(_getPrototypeOf(_class38.prototype), "disconnect", this).call(this), this.panner.disconnect(this.gain);
      }
    }, {
      key: "getOutput",
      value: function getOutput() {
        return this.panner;
      }
    }, {
      key: "getRefDistance",
      value: function getRefDistance() {
        return this.panner.refDistance;
      }
    }, {
      key: "setRefDistance",
      value: function setRefDistance(t) {
        return this.panner.refDistance = t, this;
      }
    }, {
      key: "getRolloffFactor",
      value: function getRolloffFactor() {
        return this.panner.rolloffFactor;
      }
    }, {
      key: "setRolloffFactor",
      value: function setRolloffFactor(t) {
        return this.panner.rolloffFactor = t, this;
      }
    }, {
      key: "getDistanceModel",
      value: function getDistanceModel() {
        return this.panner.distanceModel;
      }
    }, {
      key: "setDistanceModel",
      value: function setDistanceModel(t) {
        return this.panner.distanceModel = t, this;
      }
    }, {
      key: "getMaxDistance",
      value: function getMaxDistance() {
        return this.panner.maxDistance;
      }
    }, {
      key: "setMaxDistance",
      value: function setMaxDistance(t) {
        return this.panner.maxDistance = t, this;
      }
    }, {
      key: "setDirectionalCone",
      value: function setDirectionalCone(t, e, n) {
        return this.panner.coneInnerAngle = t, this.panner.coneOuterAngle = e, this.panner.coneOuterGain = n, this;
      }
    }, {
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        if (_get(_getPrototypeOf(_class38.prototype), "updateMatrixWorld", this).call(this, t), !0 === this.hasPlaybackControl && !1 === this.isPlaying) return;
        this.matrixWorld.decompose(Qh, tu, eu), nu.set(0, 0, 1).applyQuaternion(tu);
        var e = this.panner;
        if (e.positionX) {
          var _t314 = this.context.currentTime + this.listener.timeDelta;
          e.positionX.linearRampToValueAtTime(Qh.x, _t314), e.positionY.linearRampToValueAtTime(Qh.y, _t314), e.positionZ.linearRampToValueAtTime(Qh.z, _t314), e.orientationX.linearRampToValueAtTime(nu.x, _t314), e.orientationY.linearRampToValueAtTime(nu.y, _t314), e.orientationZ.linearRampToValueAtTime(nu.z, _t314);
        } else e.setPosition(Qh.x, Qh.y, Qh.z), e.setOrientation(nu.x, nu.y, nu.z);
      }
    }]);
    return _class38;
  }($h), t.PropertyBinding = hu, t.PropertyMixer = iu, t.QuadraticBezierCurve = Tl, t.QuadraticBezierCurve3 = El, t.Quaternion = Be, t.QuaternionKeyframeTrack = nh, t.QuaternionLinearInterpolant = eh, t.RED_GREEN_RGTC2_Format = Mt, t.RED_RGTC1_Format = 36283, t.REVISION = e, t.RGBADepthPacking = 3201, t.RGBAFormat = G, t.RGBAIntegerFormat = j, t.RGBA_ASTC_10x10_Format = mt, t.RGBA_ASTC_10x5_Format = ut, t.RGBA_ASTC_10x6_Format = dt, t.RGBA_ASTC_10x8_Format = pt, t.RGBA_ASTC_12x10_Format = ft, t.RGBA_ASTC_12x12_Format = gt, t.RGBA_ASTC_4x4_Format = it, t.RGBA_ASTC_5x4_Format = rt, t.RGBA_ASTC_5x5_Format = st, t.RGBA_ASTC_6x5_Format = at, t.RGBA_ASTC_6x6_Format = ot, t.RGBA_ASTC_8x5_Format = lt, t.RGBA_ASTC_8x6_Format = ct, t.RGBA_ASTC_8x8_Format = ht, t.RGBA_BPTC_Format = _t, t.RGBA_ETC2_EAC_Format = nt, t.RGBA_PVRTC_2BPPV1_Format = tt, t.RGBA_PVRTC_4BPPV1_Format = Q, t.RGBA_S3TC_DXT1_Format = Y, t.RGBA_S3TC_DXT3_Format = Z, t.RGBA_S3TC_DXT5_Format = J, t.RGB_BPTC_SIGNED_Format = vt, t.RGB_BPTC_UNSIGNED_Format = yt, t.RGB_ETC1_Format = 36196, t.RGB_ETC2_Format = et, t.RGB_PVRTC_2BPPV1_Format = $, t.RGB_PVRTC_4BPPV1_Format = K, t.RGB_S3TC_DXT1_Format = q, t.RGFormat = 1030, t.RGIntegerFormat = X, t.RawShaderMaterial = Ic, t.Ray = fn, t.Raycaster = /*#__PURE__*/function () {
    function _class39(t, e) {
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1 / 0;
      _classCallCheck(this, _class39);
      this.ray = new fn(t, e), this.near = n, this.far = i, this.camera = null, this.layers = new An(), this.params = {
        Mesh: {},
        Line: {
          threshold: 1
        },
        LOD: {},
        Points: {
          threshold: 1
        },
        Sprite: {}
      };
    }
    _createClass(_class39, [{
      key: "set",
      value: function set(t, e) {
        this.ray.set(t, e);
      }
    }, {
      key: "setFromCamera",
      value: function setFromCamera(t, e) {
        e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize(), this.camera = e) : e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld), this.camera = e) : console.error("THREE.Raycaster: Unsupported camera type: " + e.type);
      }
    }, {
      key: "intersectObject",
      value: function intersectObject(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        return gu(t, this, n, e), n.sort(fu), n;
      }
    }, {
      key: "intersectObjects",
      value: function intersectObjects(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        for (var _i223 = 0, r = t.length; _i223 < r; _i223++) gu(t[_i223], this, n, e);
        return n.sort(fu), n;
      }
    }]);
    return _class39;
  }(), t.Rec709Primaries = Ht, t.RectAreaLight = Ph, t.RedFormat = 1028, t.RedIntegerFormat = W, t.ReinhardToneMapping = p, t.RenderTarget = De, t.RepeatWrapping = b, t.ReplaceStencilOp = 7681, t.ReverseSubtractEquation = 102, t.RingGeometry = Mc, t.SIGNED_RED_GREEN_RGTC2_Format = St, t.SIGNED_RED_RGTC1_Format = xt, t.SRGBColorSpace = Dt, t.SRGBTransfer = zt, t.Scene = Za, t.ShaderChunk = fr, t.ShaderLib = _r, t.ShaderMaterial = $i, t.ShadowMaterial = Pc, t.Shape = Vl, t.ShapeGeometry = Sc, t.ShapePath = /*#__PURE__*/function () {
    function _class40() {
      _classCallCheck(this, _class40);
      this.type = "ShapePath", this.color = new ai(), this.subPaths = [], this.currentPath = null;
    }
    _createClass(_class40, [{
      key: "moveTo",
      value: function moveTo(t, e) {
        return this.currentPath = new Cl(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(t, e), this;
      }
    }, {
      key: "lineTo",
      value: function lineTo(t, e) {
        return this.currentPath.lineTo(t, e), this;
      }
    }, {
      key: "quadraticCurveTo",
      value: function quadraticCurveTo(t, e, n, i) {
        return this.currentPath.quadraticCurveTo(t, e, n, i), this;
      }
    }, {
      key: "bezierCurveTo",
      value: function bezierCurveTo(t, e, n, i, r, s) {
        return this.currentPath.bezierCurveTo(t, e, n, i, r, s), this;
      }
    }, {
      key: "splineThru",
      value: function splineThru(t) {
        return this.currentPath.splineThru(t), this;
      }
    }, {
      key: "toShapes",
      value: function toShapes(t) {
        function e(t, e) {
          var n = e.length;
          var i = !1;
          for (var _r169 = n - 1, _s101 = 0; _s101 < n; _r169 = _s101++) {
            var _n285 = e[_r169],
              _a82 = e[_s101],
              _o59 = _a82.x - _n285.x,
              _l36 = _a82.y - _n285.y;
            if (Math.abs(_l36) > Number.EPSILON) {
              if (_l36 < 0 && (_n285 = e[_s101], _o59 = -_o59, _a82 = e[_r169], _l36 = -_l36), t.y < _n285.y || t.y > _a82.y) continue;
              if (t.y === _n285.y) {
                if (t.x === _n285.x) return !0;
              } else {
                var _e312 = _l36 * (t.x - _n285.x) - _o59 * (t.y - _n285.y);
                if (0 === _e312) return !0;
                if (_e312 < 0) continue;
                i = !i;
              }
            } else {
              if (t.y !== _n285.y) continue;
              if (_a82.x <= t.x && t.x <= _n285.x || _n285.x <= t.x && t.x <= _a82.x) return !0;
            }
          }
          return i;
        }
        var n = mc.isClockWise,
          i = this.subPaths;
        if (0 === i.length) return [];
        var r, s, a;
        var o = [];
        if (1 === i.length) return s = i[0], a = new Vl(), a.curves = s.curves, o.push(a), o;
        var l = !n(i[0].getPoints());
        l = t ? !l : l;
        var c = [],
          h = [];
        var u,
          d,
          p = [],
          m = 0;
        h[m] = void 0, p[m] = [];
        for (var _e313 = 0, _a83 = i.length; _e313 < _a83; _e313++) s = i[_e313], u = s.getPoints(), r = n(u), r = t ? !r : r, r ? (!l && h[m] && m++, h[m] = {
          s: new Vl(),
          p: u
        }, h[m].s.curves = s.curves, l && m++, p[m] = []) : p[m].push({
          h: s,
          p: u[0]
        });
        if (!h[0]) return function (t) {
          var e = [];
          for (var _n286 = 0, _i224 = t.length; _n286 < _i224; _n286++) {
            var _i225 = t[_n286],
              _r170 = new Vl();
            _r170.curves = _i225.curves, e.push(_r170);
          }
          return e;
        }(i);
        if (h.length > 1) {
          var _t315 = !1,
            _n287 = 0;
          for (var _t316 = 0, _e314 = h.length; _t316 < _e314; _t316++) c[_t316] = [];
          for (var _i226 = 0, _r171 = h.length; _i226 < _r171; _i226++) {
            var _r172 = p[_i226];
            for (var _s102 = 0; _s102 < _r172.length; _s102++) {
              var _a84 = _r172[_s102];
              var _o60 = !0;
              for (var _r173 = 0; _r173 < h.length; _r173++) e(_a84.p, h[_r173].p) && (_i226 !== _r173 && _n287++, _o60 ? (_o60 = !1, c[_r173].push(_a84)) : _t315 = !0);
              _o60 && c[_i226].push(_a84);
            }
          }
          _n287 > 0 && !1 === _t315 && (p = c);
        }
        for (var _t317 = 0, _e315 = h.length; _t317 < _e315; _t317++) {
          a = h[_t317].s, o.push(a), d = p[_t317];
          for (var _t318 = 0, _e316 = d.length; _t318 < _e316; _t318++) a.holes.push(d[_t318].h);
        }
        return o;
      }
    }]);
    return _class40;
  }(), t.ShapeUtils = mc, t.ShortType = 1011, t.Skeleton = Uo, t.SkeletonHelper = /*#__PURE__*/function (_$o7) {
    _inherits(_class41, _$o7);
    var _super147 = _createSuper(_class41);
    function _class41(t) {
      var _this122;
      _classCallCheck(this, _class41);
      var e = Tu(t),
        n = new Ai(),
        i = [],
        r = [],
        s = new ai(0, 0, 1),
        a = new ai(0, 1, 0);
      for (var _t319 = 0; _t319 < e.length; _t319++) {
        var _n288 = e[_t319];
        _n288.parent && _n288.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), r.push(s.r, s.g, s.b), r.push(a.r, a.g, a.b));
      }
      n.setAttribute("position", new yi(i, 3)), n.setAttribute("color", new yi(r, 3));
      _this122 = _super147.call(this, n, new ko({
        vertexColors: !0,
        depthTest: !1,
        depthWrite: !1,
        toneMapped: !1,
        transparent: !0
      })), _this122.isSkeletonHelper = !0, _this122.type = "SkeletonHelper", _this122.root = t, _this122.bones = e, _this122.matrix = t.matrixWorld, _this122.matrixAutoUpdate = !1;
      return _this122;
    }
    _createClass(_class41, [{
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        var e = this.bones,
          n = this.geometry,
          i = n.getAttribute("position");
        bu.copy(this.root.matrixWorld).invert();
        for (var _t320 = 0, _n289 = 0; _t320 < e.length; _t320++) {
          var r = e[_t320];
          r.parent && r.parent.isBone && (Su.multiplyMatrices(bu, r.matrixWorld), Mu.setFromMatrixPosition(Su), i.setXYZ(_n289, Mu.x, Mu.y, Mu.z), Su.multiplyMatrices(bu, r.parent.matrixWorld), Mu.setFromMatrixPosition(Su), i.setXYZ(_n289 + 1, Mu.x, Mu.y, Mu.z), _n289 += 2);
        }
        n.getAttribute("position").needsUpdate = !0, _get(_getPrototypeOf(_class41.prototype), "updateMatrixWorld", this).call(this, t);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this.geometry.dispose(), this.material.dispose();
      }
    }]);
    return _class41;
  }($o), t.SkinnedMesh = Ro, t.Source = Ce, t.Sphere = on, t.SphereGeometry = bc, t.Spherical = /*#__PURE__*/function () {
    function _class42() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      _classCallCheck(this, _class42);
      return this.radius = t, this.phi = e, this.theta = n, this;
    }
    _createClass(_class42, [{
      key: "set",
      value: function set(t, e, n) {
        return this.radius = t, this.phi = e, this.theta = n, this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this.radius = t.radius, this.phi = t.phi, this.theta = t.theta, this;
      }
    }, {
      key: "makeSafe",
      value: function makeSafe() {
        var t = 1e-6;
        return this.phi = Math.max(t, Math.min(Math.PI - t, this.phi)), this;
      }
    }, {
      key: "setFromVector3",
      value: function setFromVector3(t) {
        return this.setFromCartesianCoords(t.x, t.y, t.z);
      }
    }, {
      key: "setFromCartesianCoords",
      value: function setFromCartesianCoords(t, e, n) {
        return this.radius = Math.sqrt(t * t + e * e + n * n), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(t, n), this.phi = Math.acos(te(e / this.radius, -1, 1))), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return _class42;
  }(), t.SphericalHarmonics3 = Ih, t.SplineCurve = wl, t.SpotLight = Sh, t.SpotLightHelper = /*#__PURE__*/function (_Gn17) {
    _inherits(_class43, _Gn17);
    var _super148 = _createSuper(_class43);
    function _class43(t, e) {
      var _this123;
      _classCallCheck(this, _class43);
      _this123 = _super148.call(this), _this123.light = t, _this123.matrix = t.matrixWorld, _this123.matrixAutoUpdate = !1, _this123.color = e, _this123.type = "SpotLightHelper";
      var n = new Ai(),
        i = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
      for (var _t321 = 0, _e317 = 1, _n290 = 32; _t321 < _n290; _t321++, _e317++) {
        var _r174 = _t321 / _n290 * Math.PI * 2,
          _s103 = _e317 / _n290 * Math.PI * 2;
        i.push(Math.cos(_r174), Math.sin(_r174), 1, Math.cos(_s103), Math.sin(_s103), 1);
      }
      n.setAttribute("position", new yi(i, 3));
      var r = new ko({
        fog: !1,
        toneMapped: !1
      });
      _this123.cone = new $o(n, r), _this123.add(_this123.cone), _this123.update();
      return _this123;
    }
    _createClass(_class43, [{
      key: "dispose",
      value: function dispose() {
        this.cone.geometry.dispose(), this.cone.material.dispose();
      }
    }, {
      key: "update",
      value: function update() {
        this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
        var t = this.light.distance ? this.light.distance : 1e3,
          e = t * Math.tan(this.light.angle);
        this.cone.scale.set(e, e, t), xu.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(xu), void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
      }
    }]);
    return _class43;
  }(Gn), t.Sprite = mo, t.SpriteMaterial = Qa, t.SrcAlphaFactor = 204, t.SrcAlphaSaturateFactor = 210, t.SrcColorFactor = 202, t.StaticCopyUsage = 35046, t.StaticDrawUsage = kt, t.StaticReadUsage = 35045, t.StereoCamera = /*#__PURE__*/function () {
    function _class44() {
      _classCallCheck(this, _class44);
      this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new tr(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new tr(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
        focus: null,
        fov: null,
        aspect: null,
        near: null,
        far: null,
        zoom: null,
        eyeSep: null
      };
    }
    _createClass(_class44, [{
      key: "update",
      value: function update(t) {
        var e = this._cache;
        if (e.focus !== t.focus || e.fov !== t.fov || e.aspect !== t.aspect * this.aspect || e.near !== t.near || e.far !== t.far || e.zoom !== t.zoom || e.eyeSep !== this.eyeSep) {
          e.focus = t.focus, e.fov = t.fov, e.aspect = t.aspect * this.aspect, e.near = t.near, e.far = t.far, e.zoom = t.zoom, e.eyeSep = this.eyeSep, Xh.copy(t.projectionMatrix);
          var _n291 = e.eyeSep / 2,
            _i227 = _n291 * e.near / e.focus,
            r = e.near * Math.tan(Kt * e.fov * .5) / e.zoom;
          var _s104, _a85;
          Wh.elements[12] = -_n291, kh.elements[12] = _n291, _s104 = -r * e.aspect + _i227, _a85 = r * e.aspect + _i227, Xh.elements[0] = 2 * e.near / (_a85 - _s104), Xh.elements[8] = (_a85 + _s104) / (_a85 - _s104), this.cameraL.projectionMatrix.copy(Xh), _s104 = -r * e.aspect - _i227, _a85 = r * e.aspect - _i227, Xh.elements[0] = 2 * e.near / (_a85 - _s104), Xh.elements[8] = (_a85 + _s104) / (_a85 - _s104), this.cameraR.projectionMatrix.copy(Xh);
        }
        this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Wh), this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(kh);
      }
    }]);
    return _class44;
  }(), t.StreamCopyUsage = 35042, t.StreamDrawUsage = 35040, t.StreamReadUsage = 35041, t.StringKeyframeTrack = ih, t.SubtractEquation = 101, t.SubtractiveBlending = 3, t.TOUCH = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
  }, t.TangentSpaceNormalMap = 0, t.TetrahedronGeometry = Tc, t.Texture = Ie, t.TextureLoader = /*#__PURE__*/function (_hh12) {
    _inherits(_class45, _hh12);
    var _super149 = _createSuper(_class45);
    function _class45(t) {
      _classCallCheck(this, _class45);
      return _super149.call(this, t);
    }
    _createClass(_class45, [{
      key: "load",
      value: function load(t, e, n, i) {
        var r = new Ie(),
          s = new mh(this.manager);
        return s.setCrossOrigin(this.crossOrigin), s.setPath(this.path), s.load(t, function (t) {
          r.image = t, r.needsUpdate = !0, void 0 !== e && e(r);
        }, n, i), r;
      }
    }]);
    return _class45;
  }(hh), t.TorusGeometry = Ec, t.TorusKnotGeometry = wc, t.Triangle = Qn, t.TriangleFanDrawMode = 2, t.TriangleStripDrawMode = 1, t.TrianglesDrawMode = 0, t.TubeGeometry = Ac, t.TwoPassDoubleSide = 2, t.UVMapping = _, t.Uint16BufferAttribute = _i, t.Uint32BufferAttribute = vi, t.Uint8BufferAttribute = /*#__PURE__*/function (_gi10) {
    _inherits(_class46, _gi10);
    var _super150 = _createSuper(_class46);
    function _class46(t, e, n) {
      _classCallCheck(this, _class46);
      return _super150.call(this, new Uint8Array(t), e, n);
    }
    return _createClass(_class46);
  }(gi), t.Uint8ClampedBufferAttribute = /*#__PURE__*/function (_gi11) {
    _inherits(_class47, _gi11);
    var _super151 = _createSuper(_class47);
    function _class47(t, e, n) {
      _classCallCheck(this, _class47);
      return _super151.call(this, new Uint8ClampedArray(t), e, n);
    }
    return _createClass(_class47);
  }(gi), t.Uniform = pu, t.UniformsGroup = /*#__PURE__*/function (_Yt8) {
    _inherits(_class48, _Yt8);
    var _super152 = _createSuper(_class48);
    function _class48() {
      var _this124;
      _classCallCheck(this, _class48);
      _this124 = _super152.call(this), _this124.isUniformsGroup = !0, Object.defineProperty(_assertThisInitialized(_this124), "id", {
        value: mu++
      }), _this124.name = "", _this124.usage = kt, _this124.uniforms = [];
      return _this124;
    }
    _createClass(_class48, [{
      key: "add",
      value: function add(t) {
        return this.uniforms.push(t), this;
      }
    }, {
      key: "remove",
      value: function remove(t) {
        var e = this.uniforms.indexOf(t);
        return -1 !== e && this.uniforms.splice(e, 1), this;
      }
    }, {
      key: "setName",
      value: function setName(t) {
        return this.name = t, this;
      }
    }, {
      key: "setUsage",
      value: function setUsage(t) {
        return this.usage = t, this;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        return this.dispatchEvent({
          type: "dispose"
        }), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        this.name = t.name, this.usage = t.usage;
        var e = t.uniforms;
        this.uniforms.length = 0;
        for (var _t322 = 0, _n292 = e.length; _t322 < _n292; _t322++) this.uniforms.push(e[_t322].clone());
        return this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new this.constructor().copy(this);
      }
    }]);
    return _class48;
  }(Yt), t.UniformsLib = gr, t.UniformsUtils = Ki, t.UnsignedByteType = I, t.UnsignedInt248Type = H, t.UnsignedIntType = N, t.UnsignedShort4444Type = B, t.UnsignedShort5551Type = z, t.UnsignedShortType = U, t.VSMShadowMap = r, t.Vector2 = ce, t.Vector3 = ze, t.Vector4 = Ue, t.VectorKeyframeTrack = rh, t.VideoTexture = /*#__PURE__*/function (_Ie9) {
    _inherits(_class49, _Ie9);
    var _super153 = _createSuper(_class49);
    function _class49(t, e, n, i, r, s, a, o, l) {
      var _this125;
      _classCallCheck(this, _class49);
      _this125 = _super153.call(this, t, e, n, i, r, s, a, o, l), _this125.isVideoTexture = !0, _this125.minFilter = void 0 !== s ? s : C, _this125.magFilter = void 0 !== r ? r : C, _this125.generateMipmaps = !1;
      var c = _assertThisInitialized(_this125);
      "requestVideoFrameCallback" in t && t.requestVideoFrameCallback(function e() {
        c.needsUpdate = !0, t.requestVideoFrameCallback(e);
      });
      return _this125;
    }
    _createClass(_class49, [{
      key: "clone",
      value: function clone() {
        return new this.constructor(this.image).copy(this);
      }
    }, {
      key: "update",
      value: function update() {
        var t = this.image;
        !1 === "requestVideoFrameCallback" in t && t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
      }
    }]);
    return _class49;
  }(Ie), t.WebGL1Renderer = ja, t.WebGL3DRenderTarget = /*#__PURE__*/function (_Ne2) {
    _inherits(_class50, _Ne2);
    var _super154 = _createSuper(_class50);
    function _class50() {
      var _this126;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      _classCallCheck(this, _class50);
      _this126 = _super154.call(this, t, e), _this126.isWebGL3DRenderTarget = !0, _this126.depth = n, _this126.texture = new Fe(null, t, e, n), _this126.texture.isRenderTargetTexture = !0;
      return _this126;
    }
    return _createClass(_class50);
  }(Ne), t.WebGLArrayRenderTarget = /*#__PURE__*/function (_Ne3) {
    _inherits(_class51, _Ne3);
    var _super155 = _createSuper(_class51);
    function _class51() {
      var _this127;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      _classCallCheck(this, _class51);
      _this127 = _super155.call(this, t, e), _this127.isWebGLArrayRenderTarget = !0, _this127.depth = n, _this127.texture = new Oe(null, t, e, n), _this127.texture.isRenderTargetTexture = !0;
      return _this127;
    }
    return _createClass(_class51);
  }(Ne), t.WebGLCoordinateSystem = jt, t.WebGLCubeRenderTarget = rr, t.WebGLMultipleRenderTargets = /*#__PURE__*/function (_Ne4) {
    _inherits(_class52, _Ne4);
    var _super156 = _createSuper(_class52);
    function _class52() {
      var _this128;
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      _classCallCheck(this, _class52);
      _this128 = _super156.call(this, t, e, i), _this128.isWebGLMultipleRenderTargets = !0;
      var r = _this128.texture;
      _this128.texture = [];
      for (var _t323 = 0; _t323 < n; _t323++) _this128.texture[_t323] = r.clone(), _this128.texture[_t323].isRenderTargetTexture = !0;
      return _this128;
    }
    _createClass(_class52, [{
      key: "setSize",
      value: function setSize(t, e) {
        var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        if (this.width !== t || this.height !== e || this.depth !== n) {
          this.width = t, this.height = e, this.depth = n;
          for (var _i228 = 0, r = this.texture.length; _i228 < r; _i228++) this.texture[_i228].image.width = t, this.texture[_i228].image.height = e, this.texture[_i228].image.depth = n;
          this.dispose();
        }
        this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        this.dispose(), this.width = t.width, this.height = t.height, this.depth = t.depth, this.scissor.copy(t.scissor), this.scissorTest = t.scissorTest, this.viewport.copy(t.viewport), this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, null !== t.depthTexture && (this.depthTexture = t.depthTexture.clone()), this.texture.length = 0;
        for (var _e318 = 0, _n293 = t.texture.length; _e318 < _n293; _e318++) this.texture[_e318] = t.texture[_e318].clone(), this.texture[_e318].isRenderTargetTexture = !0;
        return this;
      }
    }]);
    return _class52;
  }(Ne), t.WebGLRenderTarget = Ne, t.WebGLRenderer = Xa, t.WebGLUtils = Oa, t.WebGPUCoordinateSystem = qt, t.WireframeGeometry = Rc, t.WrapAroundEnding = Rt, t.ZeroCurvatureEnding = wt, t.ZeroFactor = 200, t.ZeroSlopeEnding = At, t.ZeroStencilOp = 0, t._SRGBAFormat = Xt, t.createCanvasElement = ge, t.sRGBEncoding = It;
});
},{}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "34077" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","js/three.min.js"], null)
//# sourceMappingURL=/three.min.f31d536c.js.map